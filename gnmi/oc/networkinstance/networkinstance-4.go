/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bypass-optimize-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).BypassOptimizeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bypass-optimize-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).BypassOptimizeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/config/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bypass-optimize-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).BypassOptimizeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/config/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bypass-optimize-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).BypassOptimizeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).LinkProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).LinkProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/config/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).LinkProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/config/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).LinkProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny struct {
	*ygnmi.NodePath
}

// BypassOptimizeInterval (leaf): interval between periodic optimization
// of the bypass LSPs
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/*/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) BypassOptimizeInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bypass-optimize-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BypassOptimizeInterval (leaf): interval between periodic optimization
// of the bypass LSPs
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/*/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) BypassOptimizeInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bypass-optimize-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkProtectionStyleRequested (leaf): Style of mpls frr protection desired:
// link, link-node, or unprotected
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/*/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) LinkProtectionStyleRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-protection-style-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkProtectionStyleRequested (leaf): Style of mpls frr protection desired:
// link, link-node, or unprotected
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/*/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) LinkProtectionStyleRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-protection-style-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/calculated-absolute-subscription-bw"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).CalculatedAbsoluteSubscriptionBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/calculated-absolute-subscription-bw"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).CalculatedAbsoluteSubscriptionBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).Subscription
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).Subscription
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/config/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).Subscription
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/config/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).Subscription
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny struct {
	*ygnmi.NodePath
}

// CalculatedAbsoluteSubscriptionBw (leaf): The calculated absolute value of the bandwidth
// which is reservable to RSVP-TE on the interface
// prior to any adjustments that may be made from
// external sources.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/calculated-absolute-subscription-bw"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) CalculatedAbsoluteSubscriptionBw() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CalculatedAbsoluteSubscriptionBw (leaf): The calculated absolute value of the bandwidth
// which is reservable to RSVP-TE on the interface
// prior to any adjustments that may be made from
// external sources.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/calculated-absolute-subscription-bw"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) CalculatedAbsoluteSubscriptionBw() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subscription (leaf): percentage of the interface bandwidth that
// RSVP can reserve
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/*/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subscription (leaf): percentage of the interface bandwidth that
// RSVP can reserve
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/*/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detected-interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detected-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).DetectedInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detected-interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detected-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).DetectedInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath) State() ygnmi.SingletonQuery[oc.E_Neighbor_NeighborStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Neighbor_NeighborStatus](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborStatus, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).NeighborStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Neighbor_NeighborStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Neighbor_NeighborStatus](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborStatus, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).NeighborStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): Address of RSVP neighbor
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/*/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): Address of RSVP neighbor
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/*/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectedInterface (leaf): Interface where RSVP neighbor was detected
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detected-interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) DetectedInterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "detected-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectedInterface (leaf): Interface where RSVP neighbor was detected
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detected-interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) DetectedInterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "detected-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborStatus (leaf): Enumuration of possible RSVP neighbor states
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) NeighborStatus() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborStatus (leaf): Enumuration of possible RSVP neighbor states
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) NeighborStatus() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RefreshReduction (leaf): Suppport of neighbor for RSVP refresh reduction
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RefreshReduction (leaf): Suppport of neighbor for RSVP refresh reduction
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-in"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LabelIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-in"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LabelIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-out"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LabelOut
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-out"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LabelOut
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LocalIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LocalIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"local-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LocalIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"local-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LocalIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LspId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LspId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).ProtectionRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).ProtectionRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).SessionName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).SessionName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath) State() ygnmi.SingletonQuery[oc.E_Session_Status] {
	return ygnmi.NewSingletonQuery[oc.E_Session_Status](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Session_Status, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny) State() ygnmi.WildcardQuery[oc.E_Session_Status] {
	return ygnmi.NewWildcardQuery[oc.E_Session_Status](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Session_Status, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).TunnelId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).TunnelId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_LSP_ROLE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_LSP_ROLE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_ROLE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_ROLE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_ROLE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_ROLE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMapAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination address of RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) DestinationAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination address of RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) DestinationAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitRouteObjectAny (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ExplicitRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectAny (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ExplicitRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ExplicitRouteObject (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
//
//	Index: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ExplicitRouteObject(Index uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ExplicitRouteObject (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
//
//	Index: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ExplicitRouteObject(Index uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectMap (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ExplicitRouteObjectMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectMap (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ExplicitRouteObjectMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LabelIn (leaf): Incoming MPLS label associated with this RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-in"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LabelIn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelIn (leaf): Incoming MPLS label associated with this RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-in"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LabelIn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelOut (leaf): Outgoing MPLS label associated with this RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-out"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LabelOut() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelOut (leaf): Outgoing MPLS label associated with this RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-out"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LabelOut() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalIndex (leaf): The index used to identify the RSVP session
// on the local network element. This index is
// generated by the device and is unique only
// to the local network element.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/*/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LocalIndex() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalIndex (leaf): The index used to identify the RSVP session
// on the local network element. This index is
// generated by the device and is unique only
// to the local network element.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/*/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LocalIndex() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): The LSP ID distinguishes between two LSPs
// originated from the same headend, and is
// commonly used to distinguish RSVP sessions
// during make before break operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LspId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): The LSP ID distinguishes between two LSPs
// originated from the same headend, and is
// commonly used to distinguish RSVP sessions
// during make before break operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LspId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionRequested (leaf): The type of protection requested for the RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ProtectionRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "protection-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionRequested (leaf): The type of protection requested for the RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ProtectionRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "protection-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecordRouteObjectAny (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) RecordRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// RecordRouteObjectAny (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) RecordRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// RecordRouteObject (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
//
//	Index: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) RecordRouteObject(Index uint8) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// RecordRouteObject (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
//
//	Index: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) RecordRouteObject(Index uint8) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// RecordRouteObjectMap (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) RecordRouteObjectMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RecordRouteObjectMap (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) RecordRouteObjectMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SenderTspec (container): Operational state statistics relating to the SENDER_TSPEC
// received for the RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sender-tspec"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) SenderTspec() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sender-tspec"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SenderTspec (container): Operational state statistics relating to the SENDER_TSPEC
// received for the RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sender-tspec"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) SenderTspec() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sender-tspec"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SessionName (leaf): The signaled name of this RSVP session.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) SessionName() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionName (leaf): The signaled name of this RSVP session.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) SessionName() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Origin address of RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) SourceAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Origin address of RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) SourceAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): Enumeration of RSVP session states
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) Status() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): Enumeration of RSVP session states
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) Status() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TunnelId (leaf): The tunnel ID is an identifier used in the
// RSVP session, which remains constant over
// the life of the tunnel.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) TunnelId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TunnelId (leaf): The tunnel ID is an identifier used in the
// RSVP session, which remains constant over
// the life of the tunnel.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) TunnelId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type/role of the RSVP session, signifing
// the session's role on the current device, such as
// a transit session vs. an ingress session.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type/role of the RSVP session, signifing
// the session's role on the current device, such as
// a transit session vs. an ingress session.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Session
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sessions"},
			PostRelPath: []string{"openconfig-network-instance:session"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Session
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sessions"},
			PostRelPath: []string{"openconfig-network-instance:session"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/asn"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/asn"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).InterfaceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).InterfaceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Label
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Label
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/loose"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loose"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Loose
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/loose"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loose"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Loose
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath) State() ygnmi.SingletonQuery[oc.E_ExplicitRouteObject_Type] {
	return ygnmi.NewSingletonQuery[oc.E_ExplicitRouteObject_Type](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ExplicitRouteObject_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny) State() ygnmi.WildcardQuery[oc.E_ExplicitRouteObject_Type] {
	return ygnmi.NewWildcardQuery[oc.E_ExplicitRouteObject_Type](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ExplicitRouteObject_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny struct {
	*ygnmi.NodePath
}

// Asn (leaf): The autonomous system number indicated by the ERO. Specified
// only when the ERO hop is an 2 or 4-byte AS number.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/asn"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Asn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Asn (leaf): The autonomous system number indicated by the ERO. Specified
// only when the ERO hop is an 2 or 4-byte AS number.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/asn"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Asn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the entry in the ERO. Entries are ordered in
// ascending order from the source to destination of the
// LSP.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/*/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the entry in the ERO. Entries are ordered in
// ascending order from the source to destination of the
// LSP.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/*/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): The interface ID for an unnumbered interface. Specified only
// when the ERO hop is a unnumbered interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): The interface ID for an unnumbered interface. Specified only
// when the ERO hop is a unnumbered interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpPrefix (leaf): The IPv4 or IPv6 prefix indicated by the ERO. Specified
// only when the ERO hop is an IPv4 or IPv6 prefix.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) IpPrefix() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpPrefix (leaf): The IPv4 or IPv6 prefix indicated by the ERO. Specified
// only when the ERO hop is an IPv4 or IPv6 prefix.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) IpPrefix() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): The MPLS label specified in the ERO hop. Specified only when
// the hop is an MPLS label.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Label() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): The MPLS label specified in the ERO hop. Specified only when
// the hop is an MPLS label.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Label() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Loose (leaf): When set to true, indicates that the hop of the ERO is
// a loose hop within the explicit route. If unset, indicates
// that the hop must explicitly traverse the entity specified
// in the ERO hop as the next-entity.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/loose"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Loose() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loose"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Loose (leaf): When set to true, indicates that the hop of the ERO is
// a loose hop within the explicit route. If unset, indicates
// that the hop must explicitly traverse the entity specified
// in the ERO hop as the next-entity.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/loose"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Loose() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loose"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of hop indicated by the ERO entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of hop indicated by the ERO entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-flags"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).ReportedFlags
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-flags"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).ReportedFlags
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).ReportedLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).ReportedLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): IP router hop for RRO entry
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): IP router hop for RRO entry
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of object in the list. Used for ordering.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/*/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of object in the list. Used for ordering.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/*/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedFlags (leaf): Subobject flags for MPLS label
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-flags"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) ReportedFlags() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedFlags (leaf): Subobject flags for MPLS label
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-flags"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) ReportedFlags() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedLabel (leaf): Label reported for RRO hop
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) ReportedLabel() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedLabel (leaf): Label reported for RRO hop
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) ReportedLabel() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).RecordRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:record-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:record-route-object"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).RecordRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:record-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:record-route-object"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peak-data-rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peak-data-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).PeakDataRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peak-data-rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peak-data-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).PeakDataRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).Rate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).Rate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "size"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).Size
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "size"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).Size
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny struct {
	*ygnmi.NodePath
}

// PeakDataRate (leaf): The maximum traffic generation rate that the head-end
// device sends traffic at.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peak-data-rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) PeakDataRate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"peak-data-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeakDataRate (leaf): The maximum traffic generation rate that the head-end
// device sends traffic at.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peak-data-rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) PeakDataRate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"peak-data-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rate (leaf): The rate at which the head-end device generates traffic,
// expressed in bytes per second.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) Rate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rate (leaf): The rate at which the head-end device generates traffic,
// expressed in bytes per second.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) Rate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The size of the token bucket that is used to determine
// the rate at which the head-end device generates traffic,
// expressed in bytes per second.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "size"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) Size() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The size of the token bucket that is used to determine
// the rate at which the head-end device generates traffic,
// expressed in bytes per second.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "size"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) Size() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny struct {
	*ygnmi.NodePath
}

// AggregateSidCounterAny (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) AggregateSidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
	return ps
}

// AggregateSidCounterAny (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) AggregateSidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
	return ps
}

// AggregateSidCounter (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
//
//	MplsLabel: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) AggregateSidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
	return ps
}

// AggregateSidCounter (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
//
//	MplsLabel: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) AggregateSidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
	return ps
}

// AggregateSidCounterMap (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) AggregateSidCounterMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AggregateSidCounterMap (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) AggregateSidCounterMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) InterfaceMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) InterfaceMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny struct {
	*ygnmi.NodePath
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/*/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/*/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).AggregateSidCounter
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:aggregate-sid-counters"},
			PostRelPath: []string{"openconfig-network-instance:aggregate-sid-counter"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).AggregateSidCounter
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:aggregate-sid-counters"},
			PostRelPath: []string{"openconfig-network-instance:aggregate-sid-counter"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): A unique identifier for the interface.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): A unique identifier for the interface.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidCounterAny (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) SidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
	return ps
}

// SidCounterAny (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) SidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
	return ps
}

// SidCounter (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
//
//	MplsLabel: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) SidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
	return ps
}

// SidCounter (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
//
//	MplsLabel: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) SidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
	return ps
}

// SidCounterMap (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) SidCounterMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SidCounterMap (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) SidCounterMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny struct {
	*ygnmi.NodePath
}

// ForwardingClassAny (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) ForwardingClassAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": "*"},
			n,
		),
	}
	return ps
}

// ForwardingClassAny (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) ForwardingClassAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": "*"},
			n,
		),
	}
	return ps
}

// ForwardingClass (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
//
//	Exp: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) ForwardingClass(Exp uint8) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": Exp},
			n,
		),
	}
	return ps
}

// ForwardingClass (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
//
//	Exp: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) ForwardingClass(Exp uint8) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": Exp},
			n,
		),
	}
	return ps
}

// ForwardingClassMap (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) ForwardingClassMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ForwardingClassMap (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) ForwardingClassMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/*/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/*/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).SidCounter
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sid-counters"},
			PostRelPath: []string{"openconfig-network-instance:sid-counter"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).SidCounter
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sid-counters"},
			PostRelPath: []string{"openconfig-network-instance:sid-counter"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).Exp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).Exp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "exp"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"exp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).Exp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "exp"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"exp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).Exp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny struct {
	*ygnmi.NodePath
}

// Exp (leaf): The value of the MPLS EXP (experimental) or Traffic Class bits that the
// SID statistics relate to. Packets received with a MPLS label value
// equal to the SID's MPLS label and EXP bits equal to the this value
// should be counted towards the associated ingress statistics. Packets
// that are forwarded to the destination MPLS label corresponding to the
// SID should be counted towards this value. In the egress direction, where
// forwarding follows a SID value that requires PHP at the local node,
// packets should still be counted towards the egress counters.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/*/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) Exp() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Exp (leaf): The value of the MPLS EXP (experimental) or Traffic Class bits that the
// SID statistics relate to. Packets received with a MPLS label value
// equal to the SID's MPLS label and EXP bits equal to the this value
// should be counted towards the associated ingress statistics. Packets
// that are forwarded to the destination MPLS label corresponding to the
// SID should be counted towards this value. In the egress direction, where
// forwarding follows a SID value that requires PHP at the local node,
// packets should still be counted towards the egress counters.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/*/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) Exp() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).ForwardingClass
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:forwarding-classes"},
			PostRelPath: []string{"openconfig-network-instance:forwarding-class"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).ForwardingClass
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:forwarding-classes"},
			PostRelPath: []string{"openconfig-network-instance:forwarding-class"},
		},
	)
}

// NetworkInstance_Mpls_TeGlobalAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributesPathAny struct {
	*ygnmi.NodePath
}

// AdminGroupAny (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) AdminGroupAny() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": "*"},
			n,
		),
	}
	return ps
}

// AdminGroupAny (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) AdminGroupAny() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": "*"},
			n,
		),
	}
	return ps
}

// AdminGroup (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
//
//	AdminGroupName: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) AdminGroup(AdminGroupName string) *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": AdminGroupName},
			n,
		),
	}
	return ps
}

// AdminGroup (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
//
//	AdminGroupName: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) AdminGroup(AdminGroupName string) *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": AdminGroupName},
			n,
		),
	}
	return ps
}

// AdminGroupMap (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) AdminGroupMap() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminGroupMap (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) AdminGroupMap() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrlgAny (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) SrlgAny() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// SrlgAny (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) SrlgAny() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Srlg (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
//
//	Name: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) Srlg(Name string) *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Srlg (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
//
//	Name: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) Srlg(Name string) *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// SrlgMap (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) SrlgMap() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrlgMap (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) SrlgMap() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeLspTimers (container): Definition for delays associated with setup
// and cleanup of TE LSPs
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-lsp-timers"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) TeLspTimers() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-lsp-timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeLspTimers (container): Definition for delays associated with setup
// and cleanup of TE LSPs
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-lsp-timers"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) TeLspTimers() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-lsp-timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).AdminGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).AdminGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/config/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).AdminGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/config/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).AdminGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bit-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).BitPosition
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bit-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).BitPosition
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/config/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bit-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).BitPosition
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/config/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bit-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).BitPosition
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny struct {
	*ygnmi.NodePath
}

// AdminGroupName (leaf): name for mpls admin-group
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/*/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) AdminGroupName() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-group-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminGroupName (leaf): name for mpls admin-group
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/*/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) AdminGroupName() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-group-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BitPosition (leaf): bit-position value for mpls admin-group. The value
// for the admin group is an integer that represents one
// of the bit positions in the admin-group bitmask. Values
// between 0 and 31 are interpreted as the original limit
// of 32 admin groups. Values >=32 are interpreted as
// extended admin group values as per RFC7308.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/*/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) BitPosition() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bit-position"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BitPosition (leaf): bit-position value for mpls admin-group. The value
// for the admin group is an integer that represents one
// of the bit positions in the admin-group bitmask. Values
// between 0 and 31 are interpreted as the original limit
// of 32 admin groups. Values >=32 are interpreted as
// extended admin group values as per RFC7308.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/*/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) BitPosition() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bit-position"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).AdminGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls-admin-groups"},
			PostRelPath: []string{"openconfig-network-instance:admin-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).AdminGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls-admin-groups"},
			PostRelPath: []string{"openconfig-network-instance:admin-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).AdminGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls-admin-groups"},
			PostRelPath: []string{"openconfig-network-instance:admin-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).AdminGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls-admin-groups"},
			PostRelPath: []string{"openconfig-network-instance:admin-group"},
		},
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cost"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Cost
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cost"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Cost
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cost"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Cost
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cost"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Cost
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath) State() ygnmi.SingletonQuery[oc.E_Mpls_MplsSrlgFloodingType] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_MplsSrlgFloodingType](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flooding-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsSrlgFloodingType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).FloodingType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_MplsSrlgFloodingType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_MplsSrlgFloodingType](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flooding-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsSrlgFloodingType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).FloodingType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath) Config() ygnmi.ConfigQuery[oc.E_Mpls_MplsSrlgFloodingType] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_MplsSrlgFloodingType](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flooding-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsSrlgFloodingType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).FloodingType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_MplsSrlgFloodingType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_MplsSrlgFloodingType](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flooding-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsSrlgFloodingType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).FloodingType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny struct {
	*ygnmi.NodePath
}

// Cost (leaf): The cost of the SRLG to the computation
// algorithm
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Cost() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cost"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cost (leaf): The cost of the SRLG to the computation
// algorithm
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Cost() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cost"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FloodingType (leaf): The type of SRLG, either flooded in the IGP or
// statically configured
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) FloodingType() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flooding-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FloodingType (leaf): The type of SRLG, either flooded in the IGP or
// statically configured
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) FloodingType() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flooding-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MembersListAny (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) MembersListAny() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": "*"},
			n,
		),
	}
	return ps
}

// MembersListAny (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) MembersListAny() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": "*"},
			n,
		),
	}
	return ps
}

// MembersList (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
//
//	FromAddress: string
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) MembersList(FromAddress string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": FromAddress},
			n,
		),
	}
	return ps
}

// MembersList (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
//
//	FromAddress: string
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) MembersList(FromAddress string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": FromAddress},
			n,
		),
	}
	return ps
}

// MembersListMap (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) MembersListMap() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MembersListMap (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) MembersListMap() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): SRLG group identifier
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Name() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): SRLG group identifier
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Name() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): group ID for the SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Value() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): group ID for the SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Value() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlgs"},
			PostRelPath: []string{"openconfig-network-instance:srlg"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlgs"},
			PostRelPath: []string{"openconfig-network-instance:srlg"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlgs"},
			PostRelPath: []string{"openconfig-network-instance:srlg"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlgs"},
			PostRelPath: []string{"openconfig-network-instance:srlg"},
		},
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "from-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).FromAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "from-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).FromAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/config/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "from-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).FromAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/config/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "from-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).FromAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "to-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).ToAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "to-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).ToAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/config/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "to-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).ToAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/config/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "to-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).ToAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny struct {
	*ygnmi.NodePath
}

// FromAddress (leaf): IP address of the a-side of the SRLG link
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/*/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) FromAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "from-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FromAddress (leaf): IP address of the a-side of the SRLG link
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/*/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) FromAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "from-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ToAddress (leaf): IP address of the z-side of the SRLG link
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/*/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) ToAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "to-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ToAddress (leaf): IP address of the z-side of the SRLG link
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/*/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) ToAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "to-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).MembersList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-srlg-members"},
			PostRelPath: []string{"openconfig-network-instance:members-list"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).MembersList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-srlg-members"},
			PostRelPath: []string{"openconfig-network-instance:members-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).MembersList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-srlg-members"},
			PostRelPath: []string{"openconfig-network-instance:members-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).MembersList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-srlg-members"},
			PostRelPath: []string{"openconfig-network-instance:members-list"},
		},
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cleanup-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).CleanupDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cleanup-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).CleanupDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cleanup-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).CleanupDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cleanup-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).CleanupDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).InstallDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).InstallDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "install-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).InstallDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "install-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).InstallDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny struct {
	*ygnmi.NodePath
}

// CleanupDelay (leaf): delay the removal of old te lsp for a specified
// amount of time
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) CleanupDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cleanup-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CleanupDelay (leaf): delay the removal of old te lsp for a specified
// amount of time
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) CleanupDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cleanup-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallDelay (leaf): delay the use of newly installed te lsp for a
// specified amount of time.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) InstallDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "install-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallDelay (leaf): delay the use of newly installed te lsp for a
// specified amount of time.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) InstallDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "install-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) ReoptimizeTimer() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) ReoptimizeTimer() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwardingPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding YANG schema element.
type NetworkInstance_PolicyForwardingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwardingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding YANG schema element.
type NetworkInstance_PolicyForwardingPathAny struct {
	*ygnmi.NodePath
}

// InterfaceAny (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
func (n *NetworkInstance_PolicyForwardingPath) InterfaceAny() *NetworkInstance_PolicyForwarding_InterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
func (n *NetworkInstance_PolicyForwardingPathAny) InterfaceAny() *NetworkInstance_PolicyForwarding_InterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_PolicyForwardingPath) Interface(InterfaceId string) *NetworkInstance_PolicyForwarding_InterfacePath {
	ps := &NetworkInstance_PolicyForwarding_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_PolicyForwardingPathAny) Interface(InterfaceId string) *NetworkInstance_PolicyForwarding_InterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
func (n *NetworkInstance_PolicyForwardingPath) InterfaceMap() *NetworkInstance_PolicyForwarding_InterfacePathMap {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
func (n *NetworkInstance_PolicyForwardingPathAny) InterfaceMap() *NetworkInstance_PolicyForwarding_InterfacePathMapAny {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathSelectionGroupAny (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
func (n *NetworkInstance_PolicyForwardingPath) PathSelectionGroupAny() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
	return ps
}

// PathSelectionGroupAny (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
func (n *NetworkInstance_PolicyForwardingPathAny) PathSelectionGroupAny() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
	return ps
}

// PathSelectionGroup (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
//
//	GroupId: string
func (n *NetworkInstance_PolicyForwardingPath) PathSelectionGroup(GroupId string) *NetworkInstance_PolicyForwarding_PathSelectionGroupPath {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
	return ps
}

// PathSelectionGroup (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
//
//	GroupId: string
func (n *NetworkInstance_PolicyForwardingPathAny) PathSelectionGroup(GroupId string) *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
	return ps
}

// PathSelectionGroupMap (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
func (n *NetworkInstance_PolicyForwardingPath) PathSelectionGroupMap() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathSelectionGroupMap (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
func (n *NetworkInstance_PolicyForwardingPathAny) PathSelectionGroupMap() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyAny (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
func (n *NetworkInstance_PolicyForwardingPath) PolicyAny() *NetworkInstance_PolicyForwarding_PolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": "*"},
			n,
		),
	}
	return ps
}

// PolicyAny (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
func (n *NetworkInstance_PolicyForwardingPathAny) PolicyAny() *NetworkInstance_PolicyForwarding_PolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": "*"},
			n,
		),
	}
	return ps
}

// Policy (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
//
//	PolicyId: string
func (n *NetworkInstance_PolicyForwardingPath) Policy(PolicyId string) *NetworkInstance_PolicyForwarding_PolicyPath {
	ps := &NetworkInstance_PolicyForwarding_PolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": PolicyId},
			n,
		),
	}
	return ps
}

// Policy (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
//
//	PolicyId: string
func (n *NetworkInstance_PolicyForwardingPathAny) Policy(PolicyId string) *NetworkInstance_PolicyForwarding_PolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": PolicyId},
			n,
		),
	}
	return ps
}

// PolicyMap (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
func (n *NetworkInstance_PolicyForwardingPath) PolicyMap() *NetworkInstance_PolicyForwarding_PolicyPathMap {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyMap (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
func (n *NetworkInstance_PolicyForwardingPathAny) PolicyMap() *NetworkInstance_PolicyForwarding_PolicyPathMapAny {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwardingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwardingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwardingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding](
		"NetworkInstance_PolicyForwarding",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwardingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding](
		"NetworkInstance_PolicyForwarding",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "apply-forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyForwardingPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "apply-forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyForwardingPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "apply-forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyForwardingPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "apply-forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyForwardingPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "apply-vrf-selection-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyVrfSelectionPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "apply-vrf-selection-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyVrfSelectionPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "apply-vrf-selection-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyVrfSelectionPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "apply-vrf-selection-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyVrfSelectionPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/interface-id"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/interface-id"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// ApplyForwardingPolicy (leaf): The policy to be applied on the interface. Packets ingress on
// the referenced interface should be compared to the match
// criteria within the specified policy, and in the case that
// these criteria are met, the forwarding actions specified
// applied. These policies should be applied following quality of
// service classification, and ACL actions if such entities are
// referenced by the corresponding interface.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) ApplyForwardingPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath {
	ps := &NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "apply-forwarding-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ApplyForwardingPolicy (leaf): The policy to be applied on the interface. Packets ingress on
// the referenced interface should be compared to the match
// criteria within the specified policy, and in the case that
// these criteria are met, the forwarding actions specified
// applied. These policies should be applied following quality of
// service classification, and ACL actions if such entities are
// referenced by the corresponding interface.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) ApplyForwardingPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "apply-forwarding-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ApplyVrfSelectionPolicy (leaf): Apply the specific VRF selection policy on the interface.
// The referenced Interface must be resolved using the Interface
// and Sub-interface leaves.
//
// The referenced policy MUST be of the type VRF_SELECTION_POLICY.
// The VRF selection policy may coexist with a policy-forwarding policy.
//
// The policy specified in this leaf is used to specifically choose the L3VRF network
// instance that is used for specific input criteria of packets.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) ApplyVrfSelectionPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath {
	ps := &NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "apply-vrf-selection-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ApplyVrfSelectionPolicy (leaf): Apply the specific VRF selection policy on the interface.
// The referenced Interface must be resolved using the Interface
// and Sub-interface leaves.
//
// The referenced policy MUST be of the type VRF_SELECTION_POLICY.
// The VRF selection policy may coexist with a policy-forwarding policy.
//
// The policy specified in this leaf is used to specifically choose the L3VRF network
// instance that is used for specific input criteria of packets.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) ApplyVrfSelectionPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "apply-vrf-selection-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): A unique identifier for the interface.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/interface-id"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) InterfaceId() *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): A unique identifier for the interface.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/interface-id"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) InterfaceId() *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) InterfaceRef() *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) InterfaceRef() *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) Interface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).GroupId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).GroupId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/config/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).GroupId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/config/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).GroupId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).MplsLsp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).MplsLsp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/config/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).MplsLsp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/config/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).MplsLsp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny struct {
	*ygnmi.NodePath
}

// GroupId (leaf): A unique name for the path-selection-group
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/*/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) GroupId() *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GroupId (leaf): A unique name for the path-selection-group
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/*/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) GroupId() *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLsp (leaf-list): A set of MPLS constrained-path LSPs which should be
// considered for the policy forwarding next-hop. In order to
// select between the LSPs within the path-selection-group, the
// system should determine which LSP provides the best path to
// the next-hop for the routed packet.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/*/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) MplsLsp() *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLsp (leaf-list): A set of MPLS constrained-path LSPs which should be
// considered for the policy forwarding next-hop. In order to
// select between the LSPs within the path-selection-group, the
// system should determine which LSP provides the best path to
// the next-hop for the routed packet.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/*/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) MplsLsp() *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).PathSelectionGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-selection-groups"},
			PostRelPath: []string{"openconfig-network-instance:path-selection-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).PathSelectionGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-selection-groups"},
			PostRelPath: []string{"openconfig-network-instance:path-selection-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).PathSelectionGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-selection-groups"},
			PostRelPath: []string{"openconfig-network-instance:path-selection-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).PathSelectionGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-selection-groups"},
			PostRelPath: []string{"openconfig-network-instance:path-selection-group"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Policy_PolicyIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_PolicyIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id"
func (n *NetworkInstance_PolicyForwarding_Policy_PolicyIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).PolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id"
func (n *NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).PolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/config/policy-id"
func (n *NetworkInstance_PolicyForwarding_Policy_PolicyIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).PolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/config/policy-id"
func (n *NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).PolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_TypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_TypePath) State() ygnmi.SingletonQuery[oc.E_Policy_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Policy_Type](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Type, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Policy_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Policy_Type](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Type, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_TypePath) Config() ygnmi.ConfigQuery[oc.E_Policy_Type] {
	return ygnmi.NewConfigQuery[oc.E_Policy_Type](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Type, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Policy_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Policy_Type](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Type, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_PolicyPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PolicyPathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PolicyPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPathMapAny struct {
	*ygnmi.NodePath
}

// PolicyId (leaf): A unique name identifying the forwarding policy. This name is
// used when applying the policy to a particular interface.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/*/policy-id"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) PolicyId() *NetworkInstance_PolicyForwarding_Policy_PolicyIdPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_PolicyIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "policy-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PolicyId (leaf): A unique name identifying the forwarding policy. This name is
// used when applying the policy to a particular interface.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/*/policy-id"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) PolicyId() *NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "policy-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RuleAny (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) RuleAny() *NetworkInstance_PolicyForwarding_Policy_RulePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// RuleAny (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) RuleAny() *NetworkInstance_PolicyForwarding_Policy_RulePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// Rule (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
//
//	SequenceId: uint32
func (n *NetworkInstance_PolicyForwarding_PolicyPath) Rule(SequenceId uint32) *NetworkInstance_PolicyForwarding_Policy_RulePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// Rule (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
//
//	SequenceId: uint32
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) Rule(SequenceId uint32) *NetworkInstance_PolicyForwarding_Policy_RulePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// RuleMap (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) RuleMap() *NetworkInstance_PolicyForwarding_Policy_RulePathMap {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RuleMap (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) RuleMap() *NetworkInstance_PolicyForwarding_Policy_RulePathMapAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of the policy. By default policies are generally usable for policy-based
// routing, and have no restrictions on their implementation. Where there are alternate
// policy types, this leaf specifies that a policy is expected to conform with a subset
// of the functionality as described in the specified type.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/*/type"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) Type() *NetworkInstance_PolicyForwarding_Policy_TypePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of the policy. By default policies are generally usable for policy-based
// routing, and have no restrictions on their implementation. Where there are alternate
// policy types, this leaf specifies that a policy is expected to conform with a subset
// of the functionality as described in the specified type.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/*/type"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) Type() *NetworkInstance_PolicyForwarding_Policy_TypePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policies"},
			PostRelPath: []string{"openconfig-network-instance:policy"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policies"},
			PostRelPath: []string{"openconfig-network-instance:policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policies"},
			PostRelPath: []string{"openconfig-network-instance:policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policies"},
			PostRelPath: []string{"openconfig-network-instance:policy"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-pkts"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).MatchedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-pkts"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).MatchedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/config/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/config/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_RulePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_RulePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_RulePathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_RulePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePathMapAny struct {
	*ygnmi.NodePath
}

// Action (container): The forwarding policy action to be applied for
// packets matching the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "action"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Action() *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Action (container): The forwarding policy action to be applied for
// packets matching the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "action"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Action() *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Ipv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Ipv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Ipv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Ipv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) L2() *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) L2() *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchedOctets (leaf): Bytes matched by the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) MatchedOctets() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Bytes matched by the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) MatchedOctets() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPkts (leaf): Number of packets matched by the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-pkts"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) MatchedPkts() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPkts (leaf): Number of packets matched by the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-pkts"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) MatchedPkts() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Unique sequence number for the policy rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/*/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) SequenceId() *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Unique sequence number for the policy rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/*/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) SequenceId() *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transport"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Transport() *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transport"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Transport() *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Rule
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rules"},
			PostRelPath: []string{"openconfig-network-instance:rule"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Rule
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rules"},
			PostRelPath: []string{"openconfig-network-instance:rule"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Rule
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rules"},
			PostRelPath: []string{"openconfig-network-instance:rule"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Rule
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rules"},
			PostRelPath: []string{"openconfig-network-instance:rule"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-fallback-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-fallback-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decap-fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapFallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decap-fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapFallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decap-fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapFallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decap-fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapFallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-gre"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGre
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-gre"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGre
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-gre"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGre
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-gre"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGre
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-gue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGue
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-gue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGue
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-gue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGue
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-gue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGue
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-mpls-in-udp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateMplsInUdp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-mpls-in-udp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateMplsInUdp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-mpls-in-udp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateMplsInUdp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-mpls-in-udp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateMplsInUdp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-selection-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PathSelectionGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-selection-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PathSelectionGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-selection-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PathSelectionGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-selection-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PathSelectionGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/post-decap-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/post-decap-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "post-decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PostDecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "post-decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PostDecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "post-decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PostDecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "post-decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PostDecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny struct {
	*ygnmi.NodePath
}

// DecapFallbackNetworkInstance (leaf): This leaf has to be set when ../decap-network-instance is set.
// When this leaf is set, the specified NI should be used as a
// fallback instance for lookup when
// ../decap-network-instance produces no match for the packet.
// NI specified by this leaf might contain different mixed next hop
// actions (e.g. next hop IP, decapsulation, redirect to another NI,
// etc).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapFallbackNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decap-fallback-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapFallbackNetworkInstance (leaf): This leaf has to be set when ../decap-network-instance is set.
// When this leaf is set, the specified NI should be used as a
// fallback instance for lookup when
// ../decap-network-instance produces no match for the packet.
// NI specified by this leaf might contain different mixed next hop
// actions (e.g. next hop IP, decapsulation, redirect to another NI,
// etc).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapFallbackNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decap-fallback-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapNetworkInstance (leaf): This leaf is mutually exclusive with ../network-instance.
// This leaf should be used along with
// ../decap-fallback-network-instance and ../post-decap-network-instance.
// This leaf is normally used with NIs (network instances) that are
// populated by SDN controllers (e.g. via gRIBI), where we want:
//   - The decapsulation decision to be controlled by the
//     controllers.
//   - The new header after decapsulation is to be looked up in
//     another NI, and the NI is chosen by fields (e.g. source IP,
//     DSCP, etc) that are not used for route resolution.
//
// When this leaf is set, packets matching the match criteria for
// the forwarding rule should be looked up in the specified NI.
// It is expected that the NI should only contain routes that have
// next hop action as decapsulation.
//   - If there is a match, the packet should be decapsulated.
//     The route lookup on the new header should happen in the
//     ../post-decap-network-instance.
//   - If there is no match, the packet should be looked up in the
//     NI set by ../decap-fallback-network-instance.
//     Defining module:      "openconfig-pf-forwarding-policies"
//     Instantiating module: "openconfig-network-instance"
//     Path from parent:     "*/decap-network-instance"
//     Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decap-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapNetworkInstance (leaf): This leaf is mutually exclusive with ../network-instance.
// This leaf should be used along with
// ../decap-fallback-network-instance and ../post-decap-network-instance.
// This leaf is normally used with NIs (network instances) that are
// populated by SDN controllers (e.g. via gRIBI), where we want:
//   - The decapsulation decision to be controlled by the
//     controllers.
//   - The new header after decapsulation is to be looked up in
//     another NI, and the NI is chosen by fields (e.g. source IP,
//     DSCP, etc) that are not used for route resolution.
//
// When this leaf is set, packets matching the match criteria for
// the forwarding rule should be looked up in the specified NI.
// It is expected that the NI should only contain routes that have
// next hop action as decapsulation.
//   - If there is a match, the packet should be decapsulated.
//     The route lookup on the new header should happen in the
//     ../post-decap-network-instance.
//   - If there is no match, the packet should be looked up in the
//     NI set by ../decap-fallback-network-instance.
//     Defining module:      "openconfig-pf-forwarding-policies"
//     Instantiating module: "openconfig-network-instance"
//     Path from parent:     "*/decap-network-instance"
//     Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decap-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateGre (leaf): When this leaf is set to true, the local system should remove
// the GRE header from the packet matching the rule. Following
// the decapsulation it should subsequently forward the
// encapsulated packet according to the relevant lookup (e.g., if
// the encapsulated packet is IP, the packet should be routed
// according to the IP destination).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-gre"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateGre (leaf): When this leaf is set to true, the local system should remove
// the GRE header from the packet matching the rule. Following
// the decapsulation it should subsequently forward the
// encapsulated packet according to the relevant lookup (e.g., if
// the encapsulated packet is IP, the packet should be routed
// according to the IP destination).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-gre"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateGue (leaf): When this leaf is set to true, the local system should remove
// the Generic UDP Encapsulation (GUE) header from the packet matching
// the rule. Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying IPv4 or IPv6 header.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapsulateGue() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-gue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateGue (leaf): When this leaf is set to true, the local system should remove
// the Generic UDP Encapsulation (GUE) header from the packet matching
// the rule. Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying IPv4 or IPv6 header.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapsulateGue() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-gue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateMplsInUdp (leaf): When this leaf is set to true, the local system should remove
// the UDP header from the packet matching the rule.
// Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying MPLS label.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapsulateMplsInUdp() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-mpls-in-udp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateMplsInUdp (leaf): When this leaf is set to true, the local system should remove
// the UDP header from the packet matching the rule.
// Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying MPLS label.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapsulateMplsInUdp() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-mpls-in-udp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Discard (leaf): When this leaf is set to true, the local system should drop
// packets that match the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) Discard() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Discard (leaf): When this leaf is set to true, the local system should drop
// packets that match the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) Discard() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulateGre (container): Packets matching the policy rule should be GRE encapsulated
// towards the set of targets defined within the target list. Where
// more than one target is specified, or the target subnet expands
// to more than one endpoint, packets should be load-balanced across
// the destination addresses within the subnets.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "encapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) EncapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"encapsulate-gre"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EncapsulateGre (container): Packets matching the policy rule should be GRE encapsulated
// towards the set of targets defined within the target list. Where
// more than one target is specified, or the target subnet expands
// to more than one endpoint, packets should be load-balanced across
// the destination addresses within the subnets.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "encapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) EncapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"encapsulate-gre"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NetworkInstance (leaf): This leaf is mutually exclusive with ../decap-network-instance.
// When this leaf is set, packets matching the match criteria
// for the forwarding rule should be looked up in the
// network-instance that is referenced rather than the
// network-instance with which the interface is associated.
// Such configuration allows policy-routing into multiple
// sub-topologies from a single ingress access interface, or
// different send and receive contexts for a particular
// interface (sometimes referred to as half-duplex VRF).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) NetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): This leaf is mutually exclusive with ../decap-network-instance.
// When this leaf is set, packets matching the match criteria
// for the forwarding rule should be looked up in the
// network-instance that is referenced rather than the
// network-instance with which the interface is associated.
// Such configuration allows policy-routing into multiple
// sub-topologies from a single ingress access interface, or
// different send and receive contexts for a particular
// interface (sometimes referred to as half-duplex VRF).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) NetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): When an IP next-hop is specified in the next-hop field,
// packets matching the match criteria for the forwarding rule
// should be forwarded to the next-hop IP address, bypassing any
// lookup on the local system.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) NextHop() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): When an IP next-hop is specified in the next-hop field,
// packets matching the match criteria for the forwarding rule
// should be forwarded to the next-hop IP address, bypassing any
// lookup on the local system.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) NextHop() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathSelectionGroup (leaf): When path-selection-group is set, packets matching the
// match criteria for the forwarding rule should be forwarded
// only via one of the paths that is specified within the
// referenced path-selection-group. The next-hop of the packet
// within the routing context should be used to determine between
// multiple paths that are specified within the group.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) PathSelectionGroup() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-selection-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathSelectionGroup (leaf): When path-selection-group is set, packets matching the
// match criteria for the forwarding rule should be forwarded
// only via one of the paths that is specified within the
// referenced path-selection-group. The next-hop of the packet
// within the routing context should be used to determine between
// multiple paths that are specified within the group.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) PathSelectionGroup() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-selection-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostDecapNetworkInstance (leaf): This leaf can only be set when ../decap-network-instance is set.
// When this leaf is set, the specified NI should be used for lookup
// on the new header after ../decap-network-instance does decap for
// the matched packet. NI specified by this leaf might contain different
// mixed next hop actions (e.g. next hop IP, decapsulation,
// redirect to another NI, etc).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) PostDecapNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "post-decap-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostDecapNetworkInstance (leaf): This leaf can only be set when ../decap-network-instance is set.
// When this leaf is set, the specified NI should be used for lookup
// on the new header after ../decap-network-instance does decap for
// the matched packet. NI specified by this leaf might contain different
// mixed next hop actions (e.g. next hop IP, decapsulation,
// redirect to another NI, etc).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) PostDecapNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "post-decap-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifying-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).IdentifyingPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifying-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).IdentifyingPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/config/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifying-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).IdentifyingPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/config/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifying-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).IdentifyingPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny struct {
	*ygnmi.NodePath
}

// IdentifyingPrefix (leaf): An IP prefix that can be used to identify the group of
// GRE endpoints that are being encapsulated towards. Systems
// that require an IP identifier for the tunnel set
// should use this prefix as the next-hop identifier.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/*/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) IdentifyingPrefix() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "identifying-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IdentifyingPrefix (leaf): An IP prefix that can be used to identify the group of
// GRE endpoints that are being encapsulated towards. Systems
// that require an IP identifier for the tunnel set
// should use this prefix as the next-hop identifier.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/*/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) IdentifyingPrefix() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "identifying-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetAny (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) TargetAny() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// TargetAny (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) TargetAny() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Target (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
//
//	Id: string
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) Target(Id string) *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Target (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
//
//	Id: string
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) Target(Id string) *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// TargetMap (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) TargetMap() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetMap (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) TargetMap() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny struct {
	*ygnmi.NodePath
}

// Destination (leaf): The set of destination addresses that should be encapsulated towards.
// Where a subnet is specified, each address within the subnet should be
// treated as an independent destination for encapsulated traffic. Packets
// should be distributed with ECMP across the set of tunnel destination
// addresses.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Destination() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Destination (leaf): The set of destination addresses that should be encapsulated towards.
// Where a subnet is specified, each address within the subnet should be
// treated as an independent destination for encapsulated traffic. Packets
// should be distributed with ECMP across the set of tunnel destination
// addresses.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Destination() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the target.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Id() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the target.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Id() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpTtl (leaf): The TTL that should be specified in the IP header of the GRE packet
// encapsulating the packet matching the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) IpTtl() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpTtl (leaf): The TTL that should be specified in the IP header of the GRE packet
// encapsulating the packet matching the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) IpTtl() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): The source IP address that should be used when encapsulating
// packets from the local system.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Source() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): The source IP address that should be used when encapsulating
// packets from the local system.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Source() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/length YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/length YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) DestinationAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) DestinationAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "icmpv4"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Icmpv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "icmpv4"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Icmpv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Length() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Length() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) SourceAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) SourceAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/code YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/code YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/config/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/config/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/*/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path) Code() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/*/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny) Code() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/*/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path) Type() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/*/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny) Type() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/length YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/length YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DestinationAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DestinationAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DestinationFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DestinationFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "icmpv6"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Icmpv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "icmpv6"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Icmpv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Length() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Length() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) SourceAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) SourceAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) SourceFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) SourceFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/code YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/code YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/config/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/config/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/*/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path) Code() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/*/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny) Code() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/*/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path) Type() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/*/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny) Type() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny struct {
	*ygnmi.NodePath
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) DestinationMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) DestinationMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) DestinationMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) DestinationMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) Ethertype() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) Ethertype() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) SourceMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) SourceMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) SourceMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) SourceMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/builtin-detail YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/builtin-detail YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath) State() ygnmi.SingletonQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_BuiltinDetail](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny) State() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath) Config() ygnmi.ConfigQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewConfigQuery[oc.E_Transport_BuiltinDetail](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/detail-mode YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/detail-mode YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath) State() ygnmi.SingletonQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_DetailMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_DetailMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-detail-match-mode YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-detail-match-mode YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath) State() ygnmi.SingletonQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-tcp-flags YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-tcp-flags YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewSingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath) Config() ygnmi.ConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny) Config() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny struct {
	*ygnmi.NodePath
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) BuiltinDetail() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) BuiltinDetail() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) DestinationPort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) DestinationPort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) DestinationPortSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) DestinationPortSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) DetailMode() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) DetailMode() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) ExplicitDetailMatchMode() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) ExplicitDetailMatchMode() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) ExplicitTcpFlags() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) ExplicitTcpFlags() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) SourcePort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) SourcePort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) SourcePortSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) SourcePortSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_DefaultMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/default-metric YANG schema element.
type NetworkInstance_Protocol_DefaultMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_DefaultMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/default-metric YANG schema element.
type NetworkInstance_Protocol_DefaultMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/default-metric"
func (n *NetworkInstance_Protocol_DefaultMetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).DefaultMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/default-metric"
func (n *NetworkInstance_Protocol_DefaultMetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).DefaultMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/default-metric"
func (n *NetworkInstance_Protocol_DefaultMetricPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).DefaultMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/default-metric"
func (n *NetworkInstance_Protocol_DefaultMetricPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).DefaultMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/enabled YANG schema element.
type NetworkInstance_Protocol_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/enabled YANG schema element.
type NetworkInstance_Protocol_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/enabled"
func (n *NetworkInstance_Protocol_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/enabled"
func (n *NetworkInstance_Protocol_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/enabled"
func (n *NetworkInstance_Protocol_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/enabled"
func (n *NetworkInstance_Protocol_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_IdentifierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/identifier YANG schema element.
type NetworkInstance_Protocol_IdentifierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_IdentifierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/identifier YANG schema element.
type NetworkInstance_Protocol_IdentifierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/identifier"
func (n *NetworkInstance_Protocol_IdentifierPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Protocol",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/identifier"
func (n *NetworkInstance_Protocol_IdentifierPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Protocol",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/identifier"
func (n *NetworkInstance_Protocol_IdentifierPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/identifier"
func (n *NetworkInstance_Protocol_IdentifierPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
