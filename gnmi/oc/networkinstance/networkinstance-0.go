/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/state/description YANG schema element.
type NetworkInstance_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/description YANG schema element.
type NetworkInstance_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/state/description"
func (n *NetworkInstance_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/state/description"
func (n *NetworkInstance_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/config/description"
func (n *NetworkInstance_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/config/description"
func (n *NetworkInstance_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_FallbackNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/state/fallback-network-instance YANG schema element.
type NetworkInstance_FallbackNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_FallbackNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/fallback-network-instance YANG schema element.
type NetworkInstance_FallbackNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/state/fallback-network-instance"
func (n *NetworkInstance_FallbackNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).FallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/state/fallback-network-instance"
func (n *NetworkInstance_FallbackNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).FallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/config/fallback-network-instance"
func (n *NetworkInstance_FallbackNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).FallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/config/fallback-network-instance"
func (n *NetworkInstance_FallbackNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).FallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_NamePath represents the /openconfig-network-instance/network-instances/network-instance/state/name YANG schema element.
type NetworkInstance_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/name YANG schema element.
type NetworkInstance_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/state/name"
func (n *NetworkInstance_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/state/name"
func (n *NetworkInstance_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/config/name"
func (n *NetworkInstance_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/config/name"
func (n *NetworkInstance_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouteDistinguisherPath represents the /openconfig-network-instance/network-instances/network-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_RouteDistinguisherPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouteDistinguisherPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_RouteDistinguisherPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/state/route-distinguisher"
func (n *NetworkInstance_RouteDistinguisherPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouteDistinguisher
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/state/route-distinguisher"
func (n *NetworkInstance_RouteDistinguisherPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouteDistinguisher
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/config/route-distinguisher"
func (n *NetworkInstance_RouteDistinguisherPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouteDistinguisher
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/config/route-distinguisher"
func (n *NetworkInstance_RouteDistinguisherPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouteDistinguisher
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/state/router-id YANG schema element.
type NetworkInstance_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/router-id YANG schema element.
type NetworkInstance_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/state/router-id"
func (n *NetworkInstance_RouterIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/state/router-id"
func (n *NetworkInstance_RouterIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/router-id"
//	Path from root:       "/network-instances/network-instance/config/router-id"
func (n *NetworkInstance_RouterIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/router-id"
//	Path from root:       "/network-instances/network-instance/config/router-id"
func (n *NetworkInstance_RouterIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_TypePath represents the /openconfig-network-instance/network-instances/network-instance/state/type YANG schema element.
type NetworkInstance_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/type YANG schema element.
type NetworkInstance_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/state/type"
func (n *NetworkInstance_TypePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE](
		"NetworkInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/state/type"
func (n *NetworkInstance_TypePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE](
		"NetworkInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/config/type"
func (n *NetworkInstance_TypePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE](
		"NetworkInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/config/type"
func (n *NetworkInstance_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE](
		"NetworkInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePath struct {
	*ygnmi.NodePath
}

// NetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstancePathMap represents the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstancePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePathMapAny struct {
	*ygnmi.NodePath
}

// Afts (container): The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
//
//	Defining module:      "openconfig-aft"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afts"
//	Path from root:       "/network-instances/network-instance/afts"
func (n *NetworkInstancePath) Afts() *NetworkInstance_AftsPath {
	ps := &NetworkInstance_AftsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"afts"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Afts (container): The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
//
//	Defining module:      "openconfig-aft"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afts"
//	Path from root:       "/network-instances/network-instance/afts"
func (n *NetworkInstancePathAny) Afts() *NetworkInstance_AftsPathAny {
	ps := &NetworkInstance_AftsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afts"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConnectionPointAny (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
func (n *NetworkInstancePath) ConnectionPointAny() *NetworkInstance_ConnectionPointPathAny {
	ps := &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": "*"},
			n,
		),
	}
	return ps
}

// ConnectionPointAny (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
func (n *NetworkInstancePathAny) ConnectionPointAny() *NetworkInstance_ConnectionPointPathAny {
	ps := &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": "*"},
			n,
		),
	}
	return ps
}

// ConnectionPoint (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
//
//	ConnectionPointId: string
func (n *NetworkInstancePath) ConnectionPoint(ConnectionPointId string) *NetworkInstance_ConnectionPointPath {
	ps := &NetworkInstance_ConnectionPointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": ConnectionPointId},
			n,
		),
	}
	return ps
}

// ConnectionPoint (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
//
//	ConnectionPointId: string
func (n *NetworkInstancePathAny) ConnectionPoint(ConnectionPointId string) *NetworkInstance_ConnectionPointPathAny {
	ps := &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": ConnectionPointId},
			n,
		),
	}
	return ps
}

// ConnectionPointMap (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
func (n *NetworkInstancePath) ConnectionPointMap() *NetworkInstance_ConnectionPointPathMap {
	ps := &NetworkInstance_ConnectionPointPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConnectionPointMap (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
func (n *NetworkInstancePathAny) ConnectionPointMap() *NetworkInstance_ConnectionPointPathMapAny {
	ps := &NetworkInstance_ConnectionPointPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Description (leaf): A free-form string to be used by the network operator to
// describe the function of this network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/*/description"
func (n *NetworkInstancePath) Description() *NetworkInstance_DescriptionPath {
	ps := &NetworkInstance_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A free-form string to be used by the network operator to
// describe the function of this network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/*/description"
func (n *NetworkInstancePathAny) Description() *NetworkInstance_DescriptionPathAny {
	ps := &NetworkInstance_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Encapsulation (container): Configuration parameters relating to the encapsulation
// used for the network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "encapsulation"
//	Path from root:       "/network-instances/network-instance/encapsulation"
func (n *NetworkInstancePath) Encapsulation() *NetworkInstance_EncapsulationPath {
	ps := &NetworkInstance_EncapsulationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Encapsulation (container): Configuration parameters relating to the encapsulation
// used for the network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "encapsulation"
//	Path from root:       "/network-instances/network-instance/encapsulation"
func (n *NetworkInstancePathAny) Encapsulation() *NetworkInstance_EncapsulationPathAny {
	ps := &NetworkInstance_EncapsulationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Evpn (container): Configuration of parameters for EVPN related bridge domains
// (MAC VRFs) and layer3 VRFs (IP VRFs)
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn"
//	Path from root:       "/network-instances/network-instance/evpn"
func (n *NetworkInstancePath) Evpn() *NetworkInstance_EvpnPath {
	ps := &NetworkInstance_EvpnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Evpn (container): Configuration of parameters for EVPN related bridge domains
// (MAC VRFs) and layer3 VRFs (IP VRFs)
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn"
//	Path from root:       "/network-instances/network-instance/evpn"
func (n *NetworkInstancePathAny) Evpn() *NetworkInstance_EvpnPathAny {
	ps := &NetworkInstance_EvpnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FallbackNetworkInstance (leaf): When this leaf is populated, the specified network instance
// should be used as a fallback instance when a route cannot
// be resolved in the local network-instance.
// This configuration is only valid when specified in a non-default
// instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/*/fallback-network-instance"
func (n *NetworkInstancePath) FallbackNetworkInstance() *NetworkInstance_FallbackNetworkInstancePath {
	ps := &NetworkInstance_FallbackNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fallback-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FallbackNetworkInstance (leaf): When this leaf is populated, the specified network instance
// should be used as a fallback instance when a route cannot
// be resolved in the local network-instance.
// This configuration is only valid when specified in a non-default
// instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/*/fallback-network-instance"
func (n *NetworkInstancePathAny) FallbackNetworkInstance() *NetworkInstance_FallbackNetworkInstancePathAny {
	ps := &NetworkInstance_FallbackNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fallback-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Fdb (container): Operational state and configuration parameters relating to
// the forwarding database of the network instance
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "fdb"
//	Path from root:       "/network-instances/network-instance/fdb"
func (n *NetworkInstancePath) Fdb() *NetworkInstance_FdbPath {
	ps := &NetworkInstance_FdbPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fdb"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Fdb (container): Operational state and configuration parameters relating to
// the forwarding database of the network instance
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "fdb"
//	Path from root:       "/network-instances/network-instance/fdb"
func (n *NetworkInstancePathAny) Fdb() *NetworkInstance_FdbPathAny {
	ps := &NetworkInstance_FdbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fdb"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterInstancePolicies (container): Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "inter-instance-policies"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies"
func (n *NetworkInstancePath) InterInstancePolicies() *NetworkInstance_InterInstancePoliciesPath {
	ps := &NetworkInstance_InterInstancePoliciesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inter-instance-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterInstancePolicies (container): Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "inter-instance-policies"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies"
func (n *NetworkInstancePathAny) InterInstancePolicies() *NetworkInstance_InterInstancePoliciesPathAny {
	ps := &NetworkInstance_InterInstancePoliciesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inter-instance-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
func (n *NetworkInstancePath) InterfaceAny() *NetworkInstance_InterfacePathAny {
	ps := &NetworkInstance_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
func (n *NetworkInstancePathAny) InterfaceAny() *NetworkInstance_InterfacePathAny {
	ps := &NetworkInstance_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
//
//	Id: string
func (n *NetworkInstancePath) Interface(Id string) *NetworkInstance_InterfacePath {
	ps := &NetworkInstance_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Interface (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
//
//	Id: string
func (n *NetworkInstancePathAny) Interface(Id string) *NetworkInstance_InterfacePathAny {
	ps := &NetworkInstance_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
func (n *NetworkInstancePath) InterfaceMap() *NetworkInstance_InterfacePathMap {
	ps := &NetworkInstance_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
func (n *NetworkInstancePathAny) InterfaceMap() *NetworkInstance_InterfacePathMapAny {
	ps := &NetworkInstance_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): Anchor point for mpls configuration and operational
// data
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/mpls"
func (n *NetworkInstancePath) Mpls() *NetworkInstance_MplsPath {
	ps := &NetworkInstance_MplsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): Anchor point for mpls configuration and operational
// data
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/mpls"
func (n *NetworkInstancePathAny) Mpls() *NetworkInstance_MplsPathAny {
	ps := &NetworkInstance_MplsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An operator-assigned unique name for the network instance.
// If the operator does not designate a name for the instance of
// type 'DEFAULT_INSTANCE' (e.g. config), the implementation
// should use the name of 'DEFAULT' (e.g. state).
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/*/name"
func (n *NetworkInstancePath) Name() *NetworkInstance_NamePath {
	ps := &NetworkInstance_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An operator-assigned unique name for the network instance.
// If the operator does not designate a name for the instance of
// type 'DEFAULT_INSTANCE' (e.g. config), the implementation
// should use the name of 'DEFAULT' (e.g. state).
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/*/name"
func (n *NetworkInstancePathAny) Name() *NetworkInstance_NamePathAny {
	ps := &NetworkInstance_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PolicyForwarding (container): Configuration and operational state relating to policy-forwarding within
// a network instance.
//
//	Defining module:      "openconfig-policy-forwarding"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding"
//	Path from root:       "/network-instances/network-instance/policy-forwarding"
func (n *NetworkInstancePath) PolicyForwarding() *NetworkInstance_PolicyForwardingPath {
	ps := &NetworkInstance_PolicyForwardingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyForwarding (container): Configuration and operational state relating to policy-forwarding within
// a network instance.
//
//	Defining module:      "openconfig-policy-forwarding"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding"
//	Path from root:       "/network-instances/network-instance/policy-forwarding"
func (n *NetworkInstancePathAny) PolicyForwarding() *NetworkInstance_PolicyForwardingPathAny {
	ps := &NetworkInstance_PolicyForwardingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProtocolAny (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
func (n *NetworkInstancePath) ProtocolAny() *NetworkInstance_ProtocolPathAny {
	ps := &NetworkInstance_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": "*"},
			n,
		),
	}
	return ps
}

// ProtocolAny (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
func (n *NetworkInstancePathAny) ProtocolAny() *NetworkInstance_ProtocolPathAny {
	ps := &NetworkInstance_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": "*"},
			n,
		),
	}
	return ps
}

// WithIdentifier sets NetworkInstance_ProtocolPathAny's key "identifier" to the specified value.
// Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_ProtocolPathAny) WithIdentifier(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_ProtocolPathAny {
	ygnmi.ModifyKey(n.NodePath, "identifier", Identifier)
	return n
}

// WithName sets NetworkInstance_ProtocolPathAny's key "name" to the specified value.
// Name: string
func (n *NetworkInstance_ProtocolPathAny) WithName(Name string) *NetworkInstance_ProtocolPathAny {
	ygnmi.ModifyKey(n.NodePath, "name", Name)
	return n
}

// Protocol (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
//
//	Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	Name: string
func (n *NetworkInstancePath) Protocol(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, Name string) *NetworkInstance_ProtocolPath {
	ps := &NetworkInstance_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": Name},
			n,
		),
	}
	return ps
}

// Protocol (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
//
//	Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	Name: string
func (n *NetworkInstancePathAny) Protocol(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, Name string) *NetworkInstance_ProtocolPathAny {
	ps := &NetworkInstance_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": Name},
			n,
		),
	}
	return ps
}

// ProtocolMap (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
func (n *NetworkInstancePath) ProtocolMap() *NetworkInstance_ProtocolPathMap {
	ps := &NetworkInstance_ProtocolPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProtocolMap (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
func (n *NetworkInstancePathAny) ProtocolMap() *NetworkInstance_ProtocolPathMapAny {
	ps := &NetworkInstance_ProtocolPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouteDistinguisher (leaf): The route distinguisher that should be used for the local
// VRF or VSI instance when it is signalled via BGP.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/*/route-distinguisher"
func (n *NetworkInstancePath) RouteDistinguisher() *NetworkInstance_RouteDistinguisherPath {
	ps := &NetworkInstance_RouteDistinguisherPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteDistinguisher (leaf): The route distinguisher that should be used for the local
// VRF or VSI instance when it is signalled via BGP.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/*/route-distinguisher"
func (n *NetworkInstancePathAny) RouteDistinguisher() *NetworkInstance_RouteDistinguisherPathAny {
	ps := &NetworkInstance_RouteDistinguisherPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteLimitAny (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
func (n *NetworkInstancePath) RouteLimitAny() *NetworkInstance_RouteLimitPathAny {
	ps := &NetworkInstance_RouteLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": "*"},
			n,
		),
	}
	return ps
}

// RouteLimitAny (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
func (n *NetworkInstancePathAny) RouteLimitAny() *NetworkInstance_RouteLimitPathAny {
	ps := &NetworkInstance_RouteLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": "*"},
			n,
		),
	}
	return ps
}

// RouteLimit (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
//
//	Afi: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) RouteLimit(Afi oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_RouteLimitPath {
	ps := &NetworkInstance_RouteLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": Afi},
			n,
		),
	}
	return ps
}

// RouteLimit (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
//
//	Afi: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) RouteLimit(Afi oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_RouteLimitPathAny {
	ps := &NetworkInstance_RouteLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": Afi},
			n,
		),
	}
	return ps
}

// RouteLimitMap (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
func (n *NetworkInstancePath) RouteLimitMap() *NetworkInstance_RouteLimitPathMap {
	ps := &NetworkInstance_RouteLimitPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouteLimitMap (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
func (n *NetworkInstancePathAny) RouteLimitMap() *NetworkInstance_RouteLimitPathMapAny {
	ps := &NetworkInstance_RouteLimitPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouterId (leaf): A identifier for the local network instance - typically
// used within associated routing protocols or signalling
// routing information in another network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/router-id"
//	Path from root:       "/network-instances/network-instance/*/router-id"
func (n *NetworkInstancePath) RouterId() *NetworkInstance_RouterIdPath {
	ps := &NetworkInstance_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): A identifier for the local network instance - typically
// used within associated routing protocols or signalling
// routing information in another network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/router-id"
//	Path from root:       "/network-instances/network-instance/*/router-id"
func (n *NetworkInstancePathAny) RouterId() *NetworkInstance_RouterIdPathAny {
	ps := &NetworkInstance_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SegmentRouting (container): Configuration and operational state parameters relating to
// segment routing.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/segment-routing"
func (n *NetworkInstancePath) SegmentRouting() *NetworkInstance_SegmentRoutingPath {
	ps := &NetworkInstance_SegmentRoutingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRouting (container): Configuration and operational state parameters relating to
// segment routing.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/segment-routing"
func (n *NetworkInstancePathAny) SegmentRouting() *NetworkInstance_SegmentRoutingPathAny {
	ps := &NetworkInstance_SegmentRoutingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TableAny (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	removal of the table should not require additional or
//	explicit configurations.
//
// Users cannot create or delete tables.  Instead a user may
// configure table-connections which reference these tables.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tables/table"
//	Path from root:       "/network-instances/network-instance/tables/table"
func (n *NetworkInstancePath) TableAny() *NetworkInstance_TablePathAny {
	ps := &NetworkInstance_TablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": "*"},
			n,
		),
	}
	return ps
}

// TableAny (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	removal of the table should not require additional or
//	explicit configurations.
//
// Users cannot create or delete tables.  Instead a user may
// configure table-connections which reference these tables.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tables/table"
//	Path from root:       "/network-instances/network-instance/tables/table"
func (n *NetworkInstancePathAny) TableAny() *NetworkInstance_TablePathAny {
	ps := &NetworkInstance_TablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": "*"},
			n,
		),
	}
	return ps
}

// WithProtocol sets NetworkInstance_TablePathAny's key "protocol" to the specified value.
// Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_TablePathAny) WithProtocol(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TablePathAny {
	ygnmi.ModifyKey(n.NodePath, "protocol", Protocol)
	return n
}

// WithAddressFamily sets NetworkInstance_TablePathAny's key "address-family" to the specified value.
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstance_TablePathAny) WithAddressFamily(AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	ygnmi.ModifyKey(n.NodePath, "address-family", AddressFamily)
	return n
}

// Table (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	removal of the table should not require additional or
//	explicit configurations.
//
// Users cannot create or delete tables.  Instead a user may
// configure table-connections which reference these tables.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tables/table"
//	Path from root:       "/network-instances/network-instance/tables/table"
//
//	Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) Table(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePath {
	ps := &NetworkInstance_TablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": AddressFamily},
			n,
		),
	}
	return ps
}

// Table (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	removal of the table should not require additional or
//	explicit configurations.
//
// Users cannot create or delete tables.  Instead a user may
// configure table-connections which reference these tables.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tables/table"
//	Path from root:       "/network-instances/network-instance/tables/table"
//
//	Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) Table(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	ps := &NetworkInstance_TablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": AddressFamily},
			n,
		),
	}
	return ps
}

// TableMap (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	removal of the table should not require additional or
//	explicit configurations.
//
// Users cannot create or delete tables.  Instead a user may
// configure table-connections which reference these tables.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tables/table"
//	Path from root:       "/network-instances/network-instance/tables/table"
func (n *NetworkInstancePath) TableMap() *NetworkInstance_TablePathMap {
	ps := &NetworkInstance_TablePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TableMap (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	removal of the table should not require additional or
//	explicit configurations.
//
// Users cannot create or delete tables.  Instead a user may
// configure table-connections which reference these tables.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tables/table"
//	Path from root:       "/network-instances/network-instance/tables/table"
func (n *NetworkInstancePathAny) TableMap() *NetworkInstance_TablePathMapAny {
	ps := &NetworkInstance_TablePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TableConnectionAny (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
func (n *NetworkInstancePath) TableConnectionAny() *NetworkInstance_TableConnectionPathAny {
	ps := &NetworkInstance_TableConnectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
	return ps
}

// TableConnectionAny (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
func (n *NetworkInstancePathAny) TableConnectionAny() *NetworkInstance_TableConnectionPathAny {
	ps := &NetworkInstance_TableConnectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
	return ps
}

// WithSrcProtocol sets NetworkInstance_TableConnectionPathAny's key "src-protocol" to the specified value.
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_TableConnectionPathAny) WithSrcProtocol(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	ygnmi.ModifyKey(n.NodePath, "src-protocol", SrcProtocol)
	return n
}

// WithDstProtocol sets NetworkInstance_TableConnectionPathAny's key "dst-protocol" to the specified value.
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_TableConnectionPathAny) WithDstProtocol(DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	ygnmi.ModifyKey(n.NodePath, "dst-protocol", DstProtocol)
	return n
}

// WithAddressFamily sets NetworkInstance_TableConnectionPathAny's key "address-family" to the specified value.
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstance_TableConnectionPathAny) WithAddressFamily(AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	ygnmi.ModifyKey(n.NodePath, "address-family", AddressFamily)
	return n
}

// TableConnection (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
//
//	SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnection(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPath {
	ps := &NetworkInstance_TableConnectionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
	return ps
}

// TableConnection (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
//
//	SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnection(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	ps := &NetworkInstance_TableConnectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
	return ps
}

// TableConnectionMap (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
func (n *NetworkInstancePath) TableConnectionMap() *NetworkInstance_TableConnectionPathMap {
	ps := &NetworkInstance_TableConnectionPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TableConnectionMap (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
func (n *NetworkInstancePathAny) TableConnectionMap() *NetworkInstance_TableConnectionPathMapAny {
	ps := &NetworkInstance_TableConnectionPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of network instance. The value of this leaf
// indicates the type of forwarding entries that should be
// supported by this network instance. Signalling protocols also
// use the network instance type to infer the type of service
// they advertise; for example MPLS signalling for an L2VSI
// network instance would infer a VPLS service whereas a type of
// L2PTP would infer a VPWS (pseudo-wire) service.
//
// An implementation must support only a single network-instance
// of type 'DEFAULT_INSTANCE'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/*/type"
func (n *NetworkInstancePath) Type() *NetworkInstance_TypePath {
	ps := &NetworkInstance_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of network instance. The value of this leaf
// indicates the type of forwarding entries that should be
// supported by this network instance. Signalling protocols also
// use the network instance type to infer the type of service
// they advertise; for example MPLS signalling for an L2VSI
// network instance would infer a VPLS service whereas a type of
// L2PTP would infer a VPWS (pseudo-wire) service.
//
// An implementation must support only a single network-instance
// of type 'DEFAULT_INSTANCE'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/*/type"
func (n *NetworkInstancePathAny) Type() *NetworkInstance_TypePathAny {
	ps := &NetworkInstance_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanAny (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
func (n *NetworkInstancePath) VlanAny() *NetworkInstance_VlanPathAny {
	ps := &NetworkInstance_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
	return ps
}

// VlanAny (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
func (n *NetworkInstancePathAny) VlanAny() *NetworkInstance_VlanPathAny {
	ps := &NetworkInstance_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
	return ps
}

// Vlan (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
//
//	VlanId: uint16
func (n *NetworkInstancePath) Vlan(VlanId uint16) *NetworkInstance_VlanPath {
	ps := &NetworkInstance_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
	return ps
}

// Vlan (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
//
//	VlanId: uint16
func (n *NetworkInstancePathAny) Vlan(VlanId uint16) *NetworkInstance_VlanPathAny {
	ps := &NetworkInstance_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
	return ps
}

// VlanMap (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
func (n *NetworkInstancePath) VlanMap() *NetworkInstance_VlanPathMap {
	ps := &NetworkInstance_VlanPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VlanMap (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
func (n *NetworkInstancePathAny) VlanMap() *NetworkInstance_VlanPathMapAny {
	ps := &NetworkInstance_VlanPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance, bool) {
			ret := gs.(*oc.Root).NetworkInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:network-instances"},
			PostRelPath: []string{"openconfig-network-instance:network-instance"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance, bool) {
			ret := gs.(*oc.Root).NetworkInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:network-instances"},
			PostRelPath: []string{"openconfig-network-instance:network-instance"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance, bool) {
			ret := gs.(*oc.Root).NetworkInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:network-instances"},
			PostRelPath: []string{"openconfig-network-instance:network-instance"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance, bool) {
			ret := gs.(*oc.Root).NetworkInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:network-instances"},
			PostRelPath: []string{"openconfig-network-instance:network-instance"},
		},
	)
}

// NetworkInstance_AftsPath represents the /openconfig-network-instance/network-instances/network-instance/afts YANG schema element.
type NetworkInstance_AftsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_AftsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts YANG schema element.
type NetworkInstance_AftsPathAny struct {
	*ygnmi.NodePath
}

// AftSummaries (container): Aft summary for the network instance.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aft-summaries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries"
func (n *NetworkInstance_AftsPath) AftSummaries() *NetworkInstance_Afts_AftSummariesPath {
	ps := &NetworkInstance_Afts_AftSummariesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"aft-summaries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AftSummaries (container): Aft summary for the network instance.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aft-summaries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries"
func (n *NetworkInstance_AftsPathAny) AftSummaries() *NetworkInstance_Afts_AftSummariesPathAny {
	ps := &NetworkInstance_Afts_AftSummariesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aft-summaries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4EntryAny (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
func (n *NetworkInstance_AftsPath) Ipv4EntryAny() *NetworkInstance_Afts_Ipv4EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Ipv4EntryAny (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
func (n *NetworkInstance_AftsPathAny) Ipv4EntryAny() *NetworkInstance_Afts_Ipv4EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Ipv4Entry (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
//
//	Prefix: string
func (n *NetworkInstance_AftsPath) Ipv4Entry(Prefix string) *NetworkInstance_Afts_Ipv4EntryPath {
	ps := &NetworkInstance_Afts_Ipv4EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Ipv4Entry (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
//
//	Prefix: string
func (n *NetworkInstance_AftsPathAny) Ipv4Entry(Prefix string) *NetworkInstance_Afts_Ipv4EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Ipv4EntryMap (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
func (n *NetworkInstance_AftsPath) Ipv4EntryMap() *NetworkInstance_Afts_Ipv4EntryPathMap {
	ps := &NetworkInstance_Afts_Ipv4EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4EntryMap (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
func (n *NetworkInstance_AftsPathAny) Ipv4EntryMap() *NetworkInstance_Afts_Ipv4EntryPathMapAny {
	ps := &NetworkInstance_Afts_Ipv4EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6EntryAny (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
func (n *NetworkInstance_AftsPath) Ipv6EntryAny() *NetworkInstance_Afts_Ipv6EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Ipv6EntryAny (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
func (n *NetworkInstance_AftsPathAny) Ipv6EntryAny() *NetworkInstance_Afts_Ipv6EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Ipv6Entry (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
//
//	Prefix: string
func (n *NetworkInstance_AftsPath) Ipv6Entry(Prefix string) *NetworkInstance_Afts_Ipv6EntryPath {
	ps := &NetworkInstance_Afts_Ipv6EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Ipv6Entry (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
//
//	Prefix: string
func (n *NetworkInstance_AftsPathAny) Ipv6Entry(Prefix string) *NetworkInstance_Afts_Ipv6EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Ipv6EntryMap (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
func (n *NetworkInstance_AftsPath) Ipv6EntryMap() *NetworkInstance_Afts_Ipv6EntryPathMap {
	ps := &NetworkInstance_Afts_Ipv6EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6EntryMap (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
func (n *NetworkInstance_AftsPathAny) Ipv6EntryMap() *NetworkInstance_Afts_Ipv6EntryPathMapAny {
	ps := &NetworkInstance_Afts_Ipv6EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LabelEntryAny (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
func (n *NetworkInstance_AftsPath) LabelEntryAny() *NetworkInstance_Afts_LabelEntryPathAny {
	ps := &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": "*"},
			n,
		),
	}
	return ps
}

// LabelEntryAny (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
func (n *NetworkInstance_AftsPathAny) LabelEntryAny() *NetworkInstance_Afts_LabelEntryPathAny {
	ps := &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": "*"},
			n,
		),
	}
	return ps
}

// LabelEntry (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
//
//	Label: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPath) LabelEntry(Label oc.NetworkInstance_Afts_LabelEntry_Label_Union) *NetworkInstance_Afts_LabelEntryPath {
	ps := &NetworkInstance_Afts_LabelEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": Label},
			n,
		),
	}
	return ps
}

// LabelEntry (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
//
//	Label: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPathAny) LabelEntry(Label oc.NetworkInstance_Afts_LabelEntry_Label_Union) *NetworkInstance_Afts_LabelEntryPathAny {
	ps := &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": Label},
			n,
		),
	}
	return ps
}

// LabelEntryMap (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
func (n *NetworkInstance_AftsPath) LabelEntryMap() *NetworkInstance_Afts_LabelEntryPathMap {
	ps := &NetworkInstance_Afts_LabelEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LabelEntryMap (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
func (n *NetworkInstance_AftsPathAny) LabelEntryMap() *NetworkInstance_Afts_LabelEntryPathMapAny {
	ps := &NetworkInstance_Afts_LabelEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacEntryAny (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
func (n *NetworkInstance_AftsPath) MacEntryAny() *NetworkInstance_Afts_MacEntryPathAny {
	ps := &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
	return ps
}

// MacEntryAny (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
func (n *NetworkInstance_AftsPathAny) MacEntryAny() *NetworkInstance_Afts_MacEntryPathAny {
	ps := &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
	return ps
}

// MacEntry (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
//
//	MacAddress: string
func (n *NetworkInstance_AftsPath) MacEntry(MacAddress string) *NetworkInstance_Afts_MacEntryPath {
	ps := &NetworkInstance_Afts_MacEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
	return ps
}

// MacEntry (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
//
//	MacAddress: string
func (n *NetworkInstance_AftsPathAny) MacEntry(MacAddress string) *NetworkInstance_Afts_MacEntryPathAny {
	ps := &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
	return ps
}

// MacEntryMap (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
func (n *NetworkInstance_AftsPath) MacEntryMap() *NetworkInstance_Afts_MacEntryPathMap {
	ps := &NetworkInstance_Afts_MacEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacEntryMap (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
func (n *NetworkInstance_AftsPathAny) MacEntryMap() *NetworkInstance_Afts_MacEntryPathMapAny {
	ps := &NetworkInstance_Afts_MacEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopAny (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
func (n *NetworkInstance_AftsPath) NextHopAny() *NetworkInstance_Afts_NextHopPathAny {
	ps := &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
func (n *NetworkInstance_AftsPathAny) NextHopAny() *NetworkInstance_Afts_NextHopPathAny {
	ps := &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_AftsPath) NextHop(Index uint64) *NetworkInstance_Afts_NextHopPath {
	ps := &NetworkInstance_Afts_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_AftsPathAny) NextHop(Index uint64) *NetworkInstance_Afts_NextHopPathAny {
	ps := &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
func (n *NetworkInstance_AftsPath) NextHopMap() *NetworkInstance_Afts_NextHopPathMap {
	ps := &NetworkInstance_Afts_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
func (n *NetworkInstance_AftsPathAny) NextHopMap() *NetworkInstance_Afts_NextHopPathMapAny {
	ps := &NetworkInstance_Afts_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
func (n *NetworkInstance_AftsPath) NextHopGroupAny() *NetworkInstance_Afts_NextHopGroupPathAny {
	ps := &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
func (n *NetworkInstance_AftsPathAny) NextHopGroupAny() *NetworkInstance_Afts_NextHopGroupPathAny {
	ps := &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_AftsPath) NextHopGroup(Id uint64) *NetworkInstance_Afts_NextHopGroupPath {
	ps := &NetworkInstance_Afts_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_AftsPathAny) NextHopGroup(Id uint64) *NetworkInstance_Afts_NextHopGroupPathAny {
	ps := &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
func (n *NetworkInstance_AftsPath) NextHopGroupMap() *NetworkInstance_Afts_NextHopGroupPathMap {
	ps := &NetworkInstance_Afts_NextHopGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
func (n *NetworkInstance_AftsPathAny) NextHopGroupMap() *NetworkInstance_Afts_NextHopGroupPathMapAny {
	ps := &NetworkInstance_Afts_NextHopGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntryAny (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
func (n *NetworkInstance_AftsPath) PolicyForwardingEntryAny() *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntryAny (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntryAny() *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntry (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
//
//	Index: uint64
func (n *NetworkInstance_AftsPath) PolicyForwardingEntry(Index uint64) *NetworkInstance_Afts_PolicyForwardingEntryPath {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntry (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
//
//	Index: uint64
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntry(Index uint64) *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntryMap (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
func (n *NetworkInstance_AftsPath) PolicyForwardingEntryMap() *NetworkInstance_Afts_PolicyForwardingEntryPathMap {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntryMap (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntryMap() *NetworkInstance_Afts_PolicyForwardingEntryPathMapAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StateSynced (container): In some cases AFT streaming (e.g., over gNMI) is an eventually consistent system.
// When the device updates an entry it is usually expected to
// stream an update to the client within a vert short amount
// of time (few milliseconds). Given this is the casee, a telemetry collector or a
// controller that parse the AFT doesn't have a consistent
// snapshot, or overall versioned copy of AFT with the device
// at any specific point of time.
//
// In certain failure modes like device boot up, gNMI daemon
// failure and device/routing engine stateful switchover
// a telemetry collector or a controller need a flag to
// determine whether it is in consistent with the device or
// not such that it can a corrective action when needed.
// A device sets this leaf or flag to indicate to the
// client that AFT data/view is consistent.
//
//	Defining module:      "openconfig-aft"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-synced"
//	Path from root:       "/network-instances/network-instance/afts/state-synced"
func (n *NetworkInstance_AftsPath) StateSynced() *NetworkInstance_Afts_StateSyncedPath {
	ps := &NetworkInstance_Afts_StateSyncedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state-synced"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StateSynced (container): In some cases AFT streaming (e.g., over gNMI) is an eventually consistent system.
// When the device updates an entry it is usually expected to
// stream an update to the client within a vert short amount
// of time (few milliseconds). Given this is the casee, a telemetry collector or a
// controller that parse the AFT doesn't have a consistent
// snapshot, or overall versioned copy of AFT with the device
// at any specific point of time.
//
// In certain failure modes like device boot up, gNMI daemon
// failure and device/routing engine stateful switchover
// a telemetry collector or a controller need a flag to
// determine whether it is in consistent with the device or
// not such that it can a corrective action when needed.
// A device sets this leaf or flag to indicate to the
// client that AFT data/view is consistent.
//
//	Defining module:      "openconfig-aft"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-synced"
//	Path from root:       "/network-instances/network-instance/afts/state-synced"
func (n *NetworkInstance_AftsPathAny) StateSynced() *NetworkInstance_Afts_StateSyncedPathAny {
	ps := &NetworkInstance_Afts_StateSyncedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state-synced"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_AftsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_AftsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_AftSummariesPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries YANG schema element.
type NetworkInstance_Afts_AftSummariesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummariesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries YANG schema element.
type NetworkInstance_Afts_AftSummariesPathAny struct {
	*ygnmi.NodePath
}

// Ipv4Unicast (container): Container for ipv4 unicast aft summary by protocol type.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast"
func (n *NetworkInstance_Afts_AftSummariesPath) Ipv4Unicast() *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4Unicast (container): Container for ipv4 unicast aft summary by protocol type.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast"
func (n *NetworkInstance_Afts_AftSummariesPathAny) Ipv4Unicast() *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6Unicast (container): Container for ipv6 aft counts by protocol type.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast"
func (n *NetworkInstance_Afts_AftSummariesPath) Ipv6Unicast() *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6Unicast (container): Container for ipv6 aft counts by protocol type.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast"
func (n *NetworkInstance_Afts_AftSummariesPathAny) Ipv6Unicast() *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummariesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_AftSummaries] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_AftSummaries](
		"NetworkInstance_Afts_AftSummaries",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummariesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_AftSummaries] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_AftSummaries](
		"NetworkInstance_Afts_AftSummaries",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv4UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4UnicastPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv4UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4UnicastPathAny struct {
	*ygnmi.NodePath
}

// ProtocolAny (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPath) ProtocolAny() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"origin-protocol": "*"},
			n,
		),
	}
	return ps
}

// ProtocolAny (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPathAny) ProtocolAny() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"origin-protocol": "*"},
			n,
		),
	}
	return ps
}

// Protocol (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol"
//
//	OriginProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPath) Protocol(OriginProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"origin-protocol": OriginProtocol},
			n,
		),
	}
	return ps
}

// Protocol (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol"
//
//	OriginProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPathAny) Protocol(OriginProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"origin-protocol": OriginProtocol},
			n,
		),
	}
	return ps
}

// ProtocolMap (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPath) ProtocolMap() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMap {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProtocolMap (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPathAny) ProtocolMap() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMapAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv4UnicastPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "state/origin-protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/origin-protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "state/origin-protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/origin-protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "origin-protocol"
//	Path from root:       ""
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "origin-protocol"
//	Path from root:       ""
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Enclosing container for aft entry counters
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPath) Counters() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Enclosing container for aft entry counters
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny) Counters() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OriginProtocol (leaf): Protocol type that keys the protocol list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/origin-protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/*/origin-protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPath) OriginProtocol() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginProtocol (leaf): Protocol type that keys the protocol list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/origin-protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/*/origin-protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny) OriginProtocol() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_OriginProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMap) State() ygnmi.SingletonQuery[map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol] {
	return ygnmi.NewSingletonQuery[map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast).Protocol
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-aft-summary:protocols"},
			PostRelPath: []string{"openconfig-aft-summary:protocol"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_ProtocolPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol] {
	return ygnmi.NewWildcardQuery[map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast).Protocol
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-aft-summary:protocols"},
			PostRelPath: []string{"openconfig-aft-summary:protocol"},
		},
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters/aft-entries YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters/aft-entries YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "aft-entries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters/aft-entries"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"aft-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters).AftEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "aft-entries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters/aft-entries"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"aft-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters).AftEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPathAny struct {
	*ygnmi.NodePath
}

// AftEntries (leaf): Total number of entries in the aft.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aft-entries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters/aft-entries"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPath) AftEntries() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"aft-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AftEntries (leaf): Total number of entries in the aft.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aft-entries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv4-unicast/protocols/protocol/state/counters/aft-entries"
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPathAny) AftEntries() *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters_AftEntriesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aft-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters](
		"NetworkInstance_Afts_AftSummaries_Ipv4Unicast_Protocol_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv6UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6UnicastPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv6UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6UnicastPathAny struct {
	*ygnmi.NodePath
}

// ProtocolAny (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPath) ProtocolAny() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"origin-protocol": "*"},
			n,
		),
	}
	return ps
}

// ProtocolAny (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPathAny) ProtocolAny() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"origin-protocol": "*"},
			n,
		),
	}
	return ps
}

// Protocol (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol"
//
//	OriginProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPath) Protocol(OriginProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"origin-protocol": OriginProtocol},
			n,
		),
	}
	return ps
}

// Protocol (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol"
//
//	OriginProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPathAny) Protocol(OriginProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"origin-protocol": OriginProtocol},
			n,
		),
	}
	return ps
}

// ProtocolMap (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPath) ProtocolMap() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMap {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProtocolMap (list): Protocol type that keys the aft entry count list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPathAny) ProtocolMap() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMapAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv6UnicastPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "state/origin-protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/origin-protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "state/origin-protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/origin-protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "origin-protocol"
//	Path from root:       ""
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "origin-protocol"
//	Path from root:       ""
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Enclosing container for aft entry counters
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPath) Counters() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Enclosing container for aft entry counters
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny) Counters() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OriginProtocol (leaf): Protocol type that keys the protocol list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/origin-protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/*/origin-protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPath) OriginProtocol() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginProtocol (leaf): Protocol type that keys the protocol list.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/origin-protocol"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/*/origin-protocol"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny) OriginProtocol() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_OriginProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMap) State() ygnmi.SingletonQuery[map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol] {
	return ygnmi.NewSingletonQuery[map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast).Protocol
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-aft-summary:protocols"},
			PostRelPath: []string{"openconfig-aft-summary:protocol"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_ProtocolPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol] {
	return ygnmi.NewWildcardQuery[map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE]*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast).Protocol
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-aft-summary:protocols"},
			PostRelPath: []string{"openconfig-aft-summary:protocol"},
		},
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters/aft-entries YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters/aft-entries YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "aft-entries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters/aft-entries"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"aft-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters).AftEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-aft-summary"
//	Path from parent:     "aft-entries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters/aft-entries"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"aft-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters).AftEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters YANG schema element.
type NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPathAny struct {
	*ygnmi.NodePath
}

// AftEntries (leaf): Total number of entries in the aft.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aft-entries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters/aft-entries"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPath) AftEntries() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPath {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"aft-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AftEntries (leaf): Total number of entries in the aft.
//
//	Defining module:      "openconfig-aft-summary"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aft-entries"
//	Path from root:       "/network-instances/network-instance/afts/aft-summaries/ipv6-unicast/protocols/protocol/state/counters/aft-entries"
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPathAny) AftEntries() *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPathAny {
	ps := &NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters_AftEntriesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aft-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters](
		"NetworkInstance_Afts_AftSummaries_Ipv6Unicast_Protocol_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv4EntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv4EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv4EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv4EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_Ipv4Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_Ipv4Entry](
		"NetworkInstance_Afts_Ipv4Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_Ipv4Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_Ipv4Entry](
		"NetworkInstance_Afts_Ipv4Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4EntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Afts_Ipv4Entry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Afts_Ipv4Entry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_Ipv4Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).Ipv4Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv4-unicast"},
			PostRelPath: []string{"openconfig-network-instance:ipv4-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4EntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Afts_Ipv4Entry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Afts_Ipv4Entry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_Ipv4Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).Ipv4Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv4-unicast"},
			PostRelPath: []string{"openconfig-network-instance:ipv4-entry"},
		},
	)
}

// NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv4Entry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv4Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv4Entry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv4Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv4Entry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv4Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv4Entry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv4Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv4Entry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_Ipv4Entry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_Ipv4Entry_Counters](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_Ipv4Entry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_Ipv4Entry_Counters](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv6EntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv6EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv6EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv6EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_Ipv6Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_Ipv6Entry](
		"NetworkInstance_Afts_Ipv6Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_Ipv6Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_Ipv6Entry](
		"NetworkInstance_Afts_Ipv6Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6EntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Afts_Ipv6Entry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Afts_Ipv6Entry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_Ipv6Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).Ipv6Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv6-unicast"},
			PostRelPath: []string{"openconfig-network-instance:ipv6-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6EntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Afts_Ipv6Entry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Afts_Ipv6Entry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_Ipv6Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).Ipv6Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv6-unicast"},
			PostRelPath: []string{"openconfig-network-instance:ipv6-entry"},
		},
	)
}

// NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv6Entry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv6Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv6Entry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv6Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv6Entry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv6Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv6Entry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv6Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv6Entry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_Ipv6Entry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_Ipv6Entry_Counters](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_Ipv6Entry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_Ipv6Entry_Counters](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_LabelEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_LabelEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_LabelEntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_LabelEntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_LabelEntry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_LabelEntry](
		"NetworkInstance_Afts_LabelEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_LabelEntry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_LabelEntry](
		"NetworkInstance_Afts_LabelEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntryPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).LabelEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls"},
			PostRelPath: []string{"openconfig-network-instance:label-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntryPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).LabelEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls"},
			PostRelPath: []string{"openconfig-network-instance:label-entry"},
		},
	)
}

// NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_LabelEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_LabelEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_LabelEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_LabelEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_LabelEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_LabelEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_LabelEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_LabelEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_LabelEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters YANG schema element.
type NetworkInstance_Afts_LabelEntry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_LabelEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters YANG schema element.
type NetworkInstance_Afts_LabelEntry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_LabelEntry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_LabelEntry_Counters](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_LabelEntry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_LabelEntry_Counters](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_MacEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_MacEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_MacEntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_MacEntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_MacEntry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_MacEntry](
		"NetworkInstance_Afts_MacEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_MacEntry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_MacEntry](
		"NetworkInstance_Afts_MacEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Afts_MacEntry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Afts_MacEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_MacEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).MacEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ethernet"},
			PostRelPath: []string{"openconfig-network-instance:mac-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Afts_MacEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Afts_MacEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_MacEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).MacEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ethernet"},
			PostRelPath: []string{"openconfig-network-instance:mac-entry"},
		},
	)
}

// NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_MacEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_MacEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_MacEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_MacEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_MacEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_MacEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_MacEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_MacEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_MacEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters YANG schema element.
type NetworkInstance_Afts_MacEntry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_MacEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters YANG schema element.
type NetworkInstance_Afts_MacEntry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_MacEntry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_MacEntry_Counters](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_MacEntry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_MacEntry_Counters](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop](
		"NetworkInstance_Afts_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop](
		"NetworkInstance_Afts_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHop](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHop](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Afts_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroupPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_DscpPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Dscp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Dscp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_IdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_Condition_IdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).NextHopGroup
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).NextHopGroup
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_ConditionPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ConditionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ConditionPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ConditionPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPathMapAny struct {
	*ygnmi.NodePath
}

// Dscp (leaf-list): A set of DSCP values that must be matched by an input packet for
// the next-hop-group specified to be selected. A logical OR is applied
// across the DSCP values.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) Dscp() *NetworkInstance_Afts_NextHopGroup_Condition_DscpPath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf-list): A set of DSCP values that must be matched by an input packet for
// the next-hop-group specified to be selected. A logical OR is applied
// across the DSCP values.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) Dscp() *NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the conditional criteria.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/*/id"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) Id() *NetworkInstance_Afts_NextHopGroup_Condition_IdPath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the conditional criteria.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/*/id"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) Id() *NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputInterfaceAny (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterfaceAny() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InputInterfaceAny (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterfaceAny() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InputInterface (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
//
//	Id: string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterface(Id string) *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InputInterface (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
//
//	Id: string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterface(Id string) *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InputInterfaceMap (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterfaceMap() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputInterfaceMap (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterfaceMap() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroup (leaf): The next-hop-group that is used by the system for packets that match
// the criteria specified.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) NextHopGroup() *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf): The next-hop-group that is used by the system for packets that match
// the criteria specified.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) NextHopGroup() *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup).Condition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:conditional"},
			PostRelPath: []string{"openconfig-network-instance:condition"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup).Condition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:conditional"},
			PostRelPath: []string{"openconfig-network-instance:condition"},
		},
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): A unique reference for the input interface.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/*/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Id() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique reference for the input interface.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/*/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Id() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Interface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Interface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Subinterface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Subinterface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).InputInterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:input-interfaces"},
			PostRelPath: []string{"openconfig-network-instance:input-interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).InputInterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:input-interfaces"},
			PostRelPath: []string{"openconfig-network-instance:input-interface"},
		},
	)
}

// NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which
// the entry in the next-hop group corresponds.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) Index() *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath {
	ps := &NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A reference to the identifier for the next-hop to which
// the entry in the next-hop group corresponds.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The weight applied to the next-hop within the group. Traffic
// is balanced across the next-hops within the group in the
// proportion of weight/(sum of weights of the next-hops within
// the next-hop group).
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) Weight() *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath {
	ps := &NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The weight applied to the next-hop within the group. Traffic
// is balanced across the next-hops within the group in the
// proportion of weight/(sum of weights of the next-hops within
// the next-hop group).
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) Weight() *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_NextHop](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_NextHop](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_Afts_NextHop_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_Afts_NextHop_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPath) OctetsForwarded() *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPath) PacketsForwarded() *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_Counters](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_Counters](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/index YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/index YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/index"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_IndexPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/index"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_IndexPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHop_EncapHeader_IndexPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHop_EncapHeader_IndexPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_TypePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/type YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/type YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/type"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_TypePath) State() ygnmi.SingletonQuery[oc.E_AftTypes_EncapsulationHeaderType] {
	return ygnmi.NewSingletonQuery[oc.E_AftTypes_EncapsulationHeaderType](
		"NetworkInstance_Afts_NextHop_EncapHeader",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AftTypes_EncapsulationHeaderType, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/type"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_TypePathAny) State() ygnmi.WildcardQuery[oc.E_AftTypes_EncapsulationHeaderType] {
	return ygnmi.NewWildcardQuery[oc.E_AftTypes_EncapsulationHeaderType](
		"NetworkInstance_Afts_NextHop_EncapHeader",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AftTypes_EncapsulationHeaderType, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeaderPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeaderPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeaderPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeaderPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeaderPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeaderPathMapAny struct {
	*ygnmi.NodePath
}

// Gre (container): Container of nodes for GRE encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "gre"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) Gre() *NetworkInstance_Afts_NextHop_EncapHeader_GrePath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_GrePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"gre"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Gre (container): Container of nodes for GRE encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "gre"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) Gre() *NetworkInstance_Afts_NextHop_EncapHeader_GrePathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_GrePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"gre"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Index (leaf): A pointer to an entry in an ordered list of encapsulation headers.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/*/index"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) Index() *NetworkInstance_Afts_NextHop_EncapHeader_IndexPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A pointer to an entry in an ordered list of encapsulation headers.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/*/index"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) Index() *NetworkInstance_Afts_NextHop_EncapHeader_IndexPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4 (container): Container of nodes for UDP in IPv4 encapsulation.  When this
// container is used, an IPv4 packet with no transport header
// is added to the encapsulation list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) Ipv4() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4Path {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Container of nodes for UDP in IPv4 encapsulation.  When this
// container is used, an IPv4 packet with no transport header
// is added to the encapsulation list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) Ipv4() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4PathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Container of nodes for UDP in IPv6 encapsulation.  When this
// container is used, an IPv6 packet with no transport header
// is added to the encapsulation list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) Ipv6() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6Path {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Container of nodes for UDP in IPv6 encapsulation.  When this
// container is used, an IPv6 packet with no transport header
// is added to the encapsulation list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) Ipv6() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6PathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): Container of nodes for MPLS encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) Mpls() *NetworkInstance_Afts_NextHop_EncapHeader_MplsPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_MplsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): Container of nodes for MPLS encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) Mpls() *NetworkInstance_Afts_NextHop_EncapHeader_MplsPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_MplsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Defines which type of packet header should be used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/type"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) Type() *NetworkInstance_Afts_NextHop_EncapHeader_TypePath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Defines which type of packet header should be used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/state/type"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) Type() *NetworkInstance_Afts_NextHop_EncapHeader_TypePathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UdpV4 (container): Container of nodes for UDP in IPv4 encapsulation.  When this
// container is used, an IPv4 header with a UDP header is added
// to the encapsulation list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "udp-v4"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) UdpV4() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"udp-v4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UdpV4 (container): Container of nodes for UDP in IPv4 encapsulation.  When this
// container is used, an IPv4 header with a UDP header is added
// to the encapsulation list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "udp-v4"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) UdpV4() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"udp-v4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UdpV6 (container): Container of nodes for UDP in IPv6 encapsulation.  When this
// container is used, an IPv6 header with a UDP header is added
// to the encapsulation list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "udp-v6"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) UdpV6() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"udp-v6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UdpV6 (container): Container of nodes for UDP in IPv6 encapsulation.  When this
// container is used, an IPv6 header with a UDP header is added
// to the encapsulation list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "udp-v6"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) UdpV6() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"udp-v6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vxlan (container): Container of nodes for VXLAN encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) Vxlan() *NetworkInstance_Afts_NextHop_EncapHeader_VxlanPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_VxlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vxlan (container): Container of nodes for VXLAN encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan"
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) Vxlan() *NetworkInstance_Afts_NextHop_EncapHeader_VxlanPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_VxlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader](
		"NetworkInstance_Afts_NextHop_EncapHeader",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader](
		"NetworkInstance_Afts_NextHop_EncapHeader",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Afts_NextHop_EncapHeader] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Afts_NextHop_EncapHeader](
		"NetworkInstance_Afts_NextHop",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Afts_NextHop_EncapHeader, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop).EncapHeader
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:encap-headers"},
			PostRelPath: []string{"openconfig-network-instance:encap-header"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeaderPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Afts_NextHop_EncapHeader] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Afts_NextHop_EncapHeader](
		"NetworkInstance_Afts_NextHop",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Afts_NextHop_EncapHeader, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop).EncapHeader
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:encap-headers"},
			PostRelPath: []string{"openconfig-network-instance:encap-header"},
		},
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/ttl YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/ttl YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre).Ttl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre).Ttl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_GrePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_GrePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeader_GrePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_GrePathAny struct {
	*ygnmi.NodePath
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_GrePath) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_GrePathAny) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Gre_DstIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): The source IP address for the GRE encapsulation may be expressed
// using this leaf (src-ip) or if may be derived from
// '../../interface-ref/state/subinterface'
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_GrePath) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): The source IP address for the GRE encapsulation may be expressed
// using this leaf (src-ip) or if may be derived from
// '../../interface-ref/state/subinterface'
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_GrePathAny) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Gre_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ttl (leaf): This leaf reflects the configured/default TTL value that is used in the
// outer header during packet encapsulation. When this leaf is not set,
// the TTL value of the inner packet is copied over as the outer packet's
// TTL value during encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_GrePath) Ttl() *NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ttl (leaf): This leaf reflects the configured/default TTL value that is used in the
// outer header during packet encapsulation. When this leaf is not set,
// the TTL value of the inner packet is copied over as the outer packet's
// TTL value during encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/gre/state/ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_GrePathAny) Ttl() *NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Gre_TtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_GrePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre](
		"NetworkInstance_Afts_NextHop_EncapHeader_Gre",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_GrePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Gre](
		"NetworkInstance_Afts_NextHop_EncapHeader_Gre",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv4Path represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4 YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv4Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4 YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4Path) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4PathAny) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_DstIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4Path) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv4/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4PathAny) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv4_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv4](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv6Path represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6 YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv6Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeader_Ipv6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6 YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6Path) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6PathAny) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_DstIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6Path) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/ipv6/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6PathAny) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Ipv6_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Ipv6](
		"NetworkInstance_Afts_NextHop_EncapHeader_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/mpls-label-stack YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/mpls-label-stack YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label-stack"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/mpls-label-stack"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStack_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStack_Union](
		"NetworkInstance_Afts_NextHop_EncapHeader_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label-stack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStack_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls).MplsLabelStack
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label-stack"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/mpls-label-stack"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStack_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStack_Union](
		"NetworkInstance_Afts_NextHop_EncapHeader_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label-stack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStack_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls).MplsLabelStack
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/traffic-class YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/traffic-class YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/traffic-class"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/traffic-class"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_MplsPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_MplsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeader_MplsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_MplsPathAny struct {
	*ygnmi.NodePath
}

// MplsLabelStack (leaf-list): A stack of MPLS label values.  The first entry in the list is the
// label at the bottom of the stack.  The bottom of the stack is adjacent
// to the MPLS payload.
//
// For example, a packet with a label stack of two labels, the bottom
// label being 42 and the top label being 8072 will be represented with
// a leaf-list of [42, 8072].  The resulting packet, starting with the
// beginning of the packet will be '[8072][42][Payload]'.
//
// Note: a swap operation is reflected by entries in the
// popped-mpls-label-stack and the pushed-mpls-label-stack
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label-stack"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/mpls-label-stack"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_MplsPath) MplsLabelStack() *NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabelStack (leaf-list): A stack of MPLS label values.  The first entry in the list is the
// label at the bottom of the stack.  The bottom of the stack is adjacent
// to the MPLS payload.
//
// For example, a packet with a label stack of two labels, the bottom
// label being 42 and the top label being 8072 will be represented with
// a leaf-list of [42, 8072].  The resulting packet, starting with the
// beginning of the packet will be '[8072][42][Payload]'.
//
// Note: a swap operation is reflected by entries in the
// popped-mpls-label-stack and the pushed-mpls-label-stack
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label-stack"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/mpls-label-stack"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_MplsPathAny) MplsLabelStack() *NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Mpls_MplsLabelStackPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits, formerly known as the
// EXP bits.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/traffic-class"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_MplsPath) TrafficClass() *NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits, formerly known as the
// EXP bits.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/mpls/state/traffic-class"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_MplsPathAny) TrafficClass() *NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Mpls_TrafficClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_MplsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls](
		"NetworkInstance_Afts_NextHop_EncapHeader_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_MplsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Mpls](
		"NetworkInstance_Afts_NextHop_EncapHeader_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dscp"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dscp"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-udp-port YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-udp-port YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-udp-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).DstUdpPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-udp-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).DstUdpPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/ip-ttl YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/ip-ttl YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/ip-ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/ip-ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-udp-port YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-udp-port YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-udp-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).SrcUdpPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-udp-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4).SrcUdpPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4 YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4 YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny struct {
	*ygnmi.NodePath
}

// Dscp (leaf): DSCP value to use for the UDP header of the encapsulated
// packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dscp"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path) Dscp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): DSCP value to use for the UDP header of the encapsulated
// packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dscp"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny) Dscp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address for IP/UDP encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address for IP/UDP encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstUdpPort (leaf): Source UDP port number to use for the UDP header of the encapsulated
// packet.
//
// When the payload packet is MPLS, then RFC 7510 - Encapsulating MPLS
// in UDP should be followed.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path) DstUdpPort() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-udp-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstUdpPort (leaf): Source UDP port number to use for the UDP header of the encapsulated
// packet.
//
// When the payload packet is MPLS, then RFC 7510 - Encapsulating MPLS
// in UDP should be followed.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/dst-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny) DstUdpPort() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_DstUdpPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-udp-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpTtl (leaf): This leaf reflects the configured/default IP TTL value that is used
// in the outer header during packet encapsulation. When this leaf is
// not set, the TTL value of the inner packet is copied over as the
// outer packet's IP TTL value during encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/ip-ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path) IpTtl() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpTtl (leaf): This leaf reflects the configured/default IP TTL value that is used
// in the outer header during packet encapsulation. When this leaf is
// not set, the TTL value of the inner packet is copied over as the
// outer packet's IP TTL value during encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/ip-ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny) IpTtl() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_IpTtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): The source IP address for IP/UDP encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): The source IP address for IP/UDP encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcUdpPort (leaf): Source UDP port number to use for the UDP header of the encapsulated
// packet.  The source UDP port should be derived from the payload
// packet entropy.  The exact methodology is implementation dependent,
// but for example, the port could be derived from an entropy hash of
// the payload or the source port (if present) of the payload.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path) SrcUdpPort() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-udp-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcUdpPort (leaf): Source UDP port number to use for the UDP header of the encapsulated
// packet.  The source UDP port should be derived from the payload
// packet entropy.  The exact methodology is implementation dependent,
// but for example, the port could be derived from an entropy hash of
// the payload or the source port (if present) of the payload.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v4/state/src-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny) SrcUdpPort() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV4_SrcUdpPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-udp-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV4PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV4](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dscp"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dscp"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-udp-port YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-udp-port YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-udp-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).DstUdpPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-udp-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).DstUdpPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/ip-ttl YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/ip-ttl YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/ip-ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/ip-ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-udp-port YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-udp-port YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-udp-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).SrcUdpPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-udp-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6).SrcUdpPort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6 YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6 YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny struct {
	*ygnmi.NodePath
}

// Dscp (leaf): DSCP value to use for the UDP header of the encapsulated
// packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dscp"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path) Dscp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): DSCP value to use for the UDP header of the encapsulated
// packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dscp"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny) Dscp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address for IP/UDP encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address for IP/UDP encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny) DstIp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstUdpPort (leaf): Source UDP port number to use for the UDP header of the encapsulated
// packet.
//
// When the payload packet is MPLS, then RFC 7510 - Encapsulating MPLS
// in UDP should be followed.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path) DstUdpPort() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-udp-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstUdpPort (leaf): Source UDP port number to use for the UDP header of the encapsulated
// packet.
//
// When the payload packet is MPLS, then RFC 7510 - Encapsulating MPLS
// in UDP should be followed.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/dst-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny) DstUdpPort() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_DstUdpPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-udp-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpTtl (leaf): This leaf reflects the configured/default IP TTL value that is used
// in the outer header during packet encapsulation. When this leaf is
// not set, the TTL value of the inner packet is copied over as the
// outer packet's IP TTL value during encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/ip-ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path) IpTtl() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpTtl (leaf): This leaf reflects the configured/default IP TTL value that is used
// in the outer header during packet encapsulation. When this leaf is
// not set, the TTL value of the inner packet is copied over as the
// outer packet's IP TTL value during encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/ip-ttl"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny) IpTtl() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_IpTtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): The source IP address for IP/UDP encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): The source IP address for IP/UDP encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny) SrcIp() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcUdpPort (leaf): Source UDP port number to use for the UDP header of the encapsulated
// packet.  The source UDP port should be derived from the payload
// packet entropy.  The exact methodology is implementation dependent,
// but for example, the port could be derived from an entropy hash of
// the payload or the source port (if present) of the payload.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path) SrcUdpPort() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-udp-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcUdpPort (leaf): Source UDP port number to use for the UDP header of the encapsulated
// packet.  The source UDP port should be derived from the payload
// packet entropy.  The exact methodology is implementation dependent,
// but for example, the port could be derived from an entropy hash of
// the payload or the source port (if present) of the payload.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-udp-port"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/udp-v6/state/src-udp-port"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny) SrcUdpPort() *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_UdpV6_SrcUdpPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-udp-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_UdpV6PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_UdpV6](
		"NetworkInstance_Afts_NextHop_EncapHeader_UdpV6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/tunnel-src-ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/tunnel-src-ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-src-ip-address"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/tunnel-src-ip-address"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tunnel-src-ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan).TunnelSrcIpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-src-ip-address"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/tunnel-src-ip-address"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_EncapHeader_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tunnel-src-ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan).TunnelSrcIpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/vni-label YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/vni-label YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-label"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/vni-label"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Afts_NextHop_EncapHeader_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan).VniLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-label"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/vni-label"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Afts_NextHop_EncapHeader_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan).VniLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_EncapHeader_VxlanPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_VxlanPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_EncapHeader_VxlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan YANG schema element.
type NetworkInstance_Afts_NextHop_EncapHeader_VxlanPathAny struct {
	*ygnmi.NodePath
}

// TunnelSrcIpAddress (leaf): Where applicable this represents the vxlan tunnel source ip address.
// For VXLAN this represents the source VTEP ip address
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-src-ip-address"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/tunnel-src-ip-address"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_VxlanPath) TunnelSrcIpAddress() *NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tunnel-src-ip-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TunnelSrcIpAddress (leaf): Where applicable this represents the vxlan tunnel source ip address.
// For VXLAN this represents the source VTEP ip address
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-src-ip-address"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/tunnel-src-ip-address"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_VxlanPathAny) TunnelSrcIpAddress() *NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_TunnelSrcIpAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tunnel-src-ip-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniLabel (leaf): Where applicable, the next hop label representing the virtual
// network identifier (VNI) for the forwarding entry. This leaf is
// applicable only to next-hops which include VXLAN encapsulation
// header information
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-label"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/vni-label"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_VxlanPath) VniLabel() *NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPath {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniLabel (leaf): Where applicable, the next hop label representing the virtual
// network identifier (VNI) for the forwarding entry. This leaf is
// applicable only to next-hops which include VXLAN encapsulation
// header information
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-label"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/encap-headers/encap-header/vxlan/state/vni-label"
func (n *NetworkInstance_Afts_NextHop_EncapHeader_VxlanPathAny) VniLabel() *NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPathAny {
	ps := &NetworkInstance_Afts_NextHop_EncapHeader_Vxlan_VniLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_VxlanPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan](
		"NetworkInstance_Afts_NextHop_EncapHeader_Vxlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_EncapHeader_VxlanPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_EncapHeader_Vxlan](
		"NetworkInstance_Afts_NextHop_EncapHeader_Vxlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_Gre_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_Gre_DstIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_Gre_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_Gre_DstIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_Gre_DstIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Gre).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_Gre_DstIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Gre).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_Gre_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_Gre_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_Gre_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_Gre_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_Gre_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Gre).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_Gre_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Gre).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_Gre_TtlPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre/state/ttl YANG schema element.
type NetworkInstance_Afts_NextHop_Gre_TtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_Gre_TtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre/state/ttl YANG schema element.
type NetworkInstance_Afts_NextHop_Gre_TtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/ttl"
func (n *NetworkInstance_Afts_NextHop_Gre_TtlPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Afts_NextHop_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Gre).Ttl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/ttl"
func (n *NetworkInstance_Afts_NextHop_Gre_TtlPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Afts_NextHop_Gre",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Gre).Ttl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Gre) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_GrePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre YANG schema element.
type NetworkInstance_Afts_NextHop_GrePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_GrePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/gre YANG schema element.
type NetworkInstance_Afts_NextHop_GrePathAny struct {
	*ygnmi.NodePath
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_GrePath) DstIp() *NetworkInstance_Afts_NextHop_Gre_DstIpPath {
	ps := &NetworkInstance_Afts_NextHop_Gre_DstIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_GrePathAny) DstIp() *NetworkInstance_Afts_NextHop_Gre_DstIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_Gre_DstIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): The source IP address for the GRE encapsulation may be expressed
// using this leaf (src-ip) or if may be derived from
// '../../interface-ref/state/subinterface'
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_GrePath) SrcIp() *NetworkInstance_Afts_NextHop_Gre_SrcIpPath {
	ps := &NetworkInstance_Afts_NextHop_Gre_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): The source IP address for the GRE encapsulation may be expressed
// using this leaf (src-ip) or if may be derived from
// '../../interface-ref/state/subinterface'
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_GrePathAny) SrcIp() *NetworkInstance_Afts_NextHop_Gre_SrcIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_Gre_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ttl (leaf): This leaf reflects the configured/default TTL value that is used in the
// outer header during packet encapsulation. When this leaf is not set,
// the TTL value of the inner packet is copied over as the outer packet's
// TTL value during encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/ttl"
func (n *NetworkInstance_Afts_NextHop_GrePath) Ttl() *NetworkInstance_Afts_NextHop_Gre_TtlPath {
	ps := &NetworkInstance_Afts_NextHop_Gre_TtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ttl (leaf): This leaf reflects the configured/default TTL value that is used in the
// outer header during packet encapsulation. When this leaf is not set,
// the TTL value of the inner packet is copied over as the outer packet's
// TTL value during encapsulation.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/gre/state/ttl"
func (n *NetworkInstance_Afts_NextHop_GrePathAny) Ttl() *NetworkInstance_Afts_NextHop_Gre_TtlPathAny {
	ps := &NetworkInstance_Afts_NextHop_Gre_TtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_GrePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_Gre] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_Gre](
		"NetworkInstance_Afts_NextHop_Gre",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_GrePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_Gre] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_Gre](
		"NetworkInstance_Afts_NextHop_Gre",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) Interface() *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) Interface() *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) Subinterface() *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) Subinterface() *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_InterfaceRef](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_InterfaceRef](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_IpInIp_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_DstIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIp_DstIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_IpInIp).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_IpInIp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_IpInIp).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_IpInIp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_IpInIp).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_IpInIp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_IpInIp).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_IpInIp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_IpInIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIpPathAny struct {
	*ygnmi.NodePath
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) DstIp() *NetworkInstance_Afts_NextHop_IpInIp_DstIpPath {
	ps := &NetworkInstance_Afts_NextHop_IpInIp_DstIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) DstIp() *NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) SrcIp() *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath {
	ps := &NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) SrcIp() *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_IpInIp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_IpInIp](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_IpInIp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_IpInIp](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_PolicyForwardingEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry](
		"NetworkInstance_Afts_PolicyForwardingEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry](
		"NetworkInstance_Afts_PolicyForwardingEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).PolicyForwardingEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policy-forwarding"},
			PostRelPath: []string{"openconfig-network-instance:policy-forwarding-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).PolicyForwardingEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policy-forwarding"},
			PostRelPath: []string{"openconfig-network-instance:policy-forwarding-entry"},
		},
	)
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_PolicyForwardingEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_StateSynced_Ipv4UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv4UnicastPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSynced_Ipv4UnicastPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Afts_StateSynced",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_StateSynced).Ipv4Unicast
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_StateSynced) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Afts_StateSynced",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_StateSynced).Ipv4Unicast
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_StateSynced) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_StateSynced_Ipv6UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv6UnicastPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSynced_Ipv6UnicastPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Afts_StateSynced",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_StateSynced).Ipv6Unicast
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_StateSynced) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Afts_StateSynced",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_StateSynced).Ipv6Unicast
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_StateSynced) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_StateSyncedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced YANG schema element.
type NetworkInstance_Afts_StateSyncedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_StateSyncedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced YANG schema element.
type NetworkInstance_Afts_StateSyncedPathAny struct {
	*ygnmi.NodePath
}

// Ipv4Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv4 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv4-unicast AFT entries, are expected to be consistent with
// device snapshot.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSyncedPath) Ipv4Unicast() *NetworkInstance_Afts_StateSynced_Ipv4UnicastPath {
	ps := &NetworkInstance_Afts_StateSynced_Ipv4UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv4 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv4-unicast AFT entries, are expected to be consistent with
// device snapshot.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSyncedPathAny) Ipv4Unicast() *NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny {
	ps := &NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv6 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv6-unicast AFT entries, are expected to be consistent with
// device snapshot.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSyncedPath) Ipv6Unicast() *NetworkInstance_Afts_StateSynced_Ipv6UnicastPath {
	ps := &NetworkInstance_Afts_StateSynced_Ipv6UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv6 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv6-unicast AFT entries, are expected to be consistent with
// device snapshot.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSyncedPathAny) Ipv6Unicast() *NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny {
	ps := &NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_StateSyncedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_StateSynced] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_StateSynced](
		"NetworkInstance_Afts_StateSynced",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_StateSyncedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_StateSynced] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_StateSynced](
		"NetworkInstance_Afts_StateSynced",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_ConnectionPointIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/state/connection-point-id YANG schema element.
type NetworkInstance_ConnectionPoint_ConnectionPointIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/state/connection-point-id YANG schema element.
type NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/state/connection-point-id"
func (n *NetworkInstance_ConnectionPoint_ConnectionPointIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-point-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).ConnectionPointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/state/connection-point-id"
func (n *NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-point-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).ConnectionPointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/config/connection-point-id"
func (n *NetworkInstance_ConnectionPoint_ConnectionPointIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "connection-point-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).ConnectionPointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/config/connection-point-id"
func (n *NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "connection-point-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).ConnectionPointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPointPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPointPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPointPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPathMapAny struct {
	*ygnmi.NodePath
}

// ConnectionPointId (leaf): An identifier for a connection point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/*/connection-point-id"
func (n *NetworkInstance_ConnectionPointPath) ConnectionPointId() *NetworkInstance_ConnectionPoint_ConnectionPointIdPath {
	ps := &NetworkInstance_ConnectionPoint_ConnectionPointIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "connection-point-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionPointId (leaf): An identifier for a connection point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/*/connection-point-id"
func (n *NetworkInstance_ConnectionPointPathAny) ConnectionPointId() *NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny {
	ps := &NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "connection-point-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndpointAny (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
func (n *NetworkInstance_ConnectionPointPath) EndpointAny() *NetworkInstance_ConnectionPoint_EndpointPathAny {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": "*"},
			n,
		),
	}
	return ps
}

// EndpointAny (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
func (n *NetworkInstance_ConnectionPointPathAny) EndpointAny() *NetworkInstance_ConnectionPoint_EndpointPathAny {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": "*"},
			n,
		),
	}
	return ps
}

// Endpoint (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
//
//	EndpointId: string
func (n *NetworkInstance_ConnectionPointPath) Endpoint(EndpointId string) *NetworkInstance_ConnectionPoint_EndpointPath {
	ps := &NetworkInstance_ConnectionPoint_EndpointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": EndpointId},
			n,
		),
	}
	return ps
}

// Endpoint (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
//
//	EndpointId: string
func (n *NetworkInstance_ConnectionPointPathAny) Endpoint(EndpointId string) *NetworkInstance_ConnectionPoint_EndpointPathAny {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": EndpointId},
			n,
		),
	}
	return ps
}

// EndpointMap (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
func (n *NetworkInstance_ConnectionPointPath) EndpointMap() *NetworkInstance_ConnectionPoint_EndpointPathMap {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EndpointMap (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
func (n *NetworkInstance_ConnectionPointPathAny) EndpointMap() *NetworkInstance_ConnectionPoint_EndpointPathMapAny {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance_ConnectionPoint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance_ConnectionPoint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint, bool) {
			ret := gs.(*oc.NetworkInstance).ConnectionPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:connection-points"},
			PostRelPath: []string{"openconfig-network-instance:connection-point"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint, bool) {
			ret := gs.(*oc.NetworkInstance).ConnectionPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:connection-points"},
			PostRelPath: []string{"openconfig-network-instance:connection-point"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint, bool) {
			ret := gs.(*oc.NetworkInstance).ConnectionPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:connection-points"},
			PostRelPath: []string{"openconfig-network-instance:connection-point"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint, bool) {
			ret := gs.(*oc.NetworkInstance).ConnectionPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:connection-points"},
			PostRelPath: []string{"openconfig-network-instance:connection-point"},
		},
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_Endpoint_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "endpoint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).EndpointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "endpoint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).EndpointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "endpoint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).EndpointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "endpoint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).EndpointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence"
func (n *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "precedence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Precedence
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence"
func (n *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "precedence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Precedence
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/precedence"
func (n *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "precedence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Precedence
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/precedence"
func (n *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "precedence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Precedence
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_TypePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENDPOINT_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_TypePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENDPOINT_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_TypePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENDPOINT_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENDPOINT_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_EndpointPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_EndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_EndpointPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_EndpointPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPathMapAny struct {
	*ygnmi.NodePath
}

// Active (leaf): When the backup endpoint is active, the value of this
// parameter is set to true
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Active() *NetworkInstance_ConnectionPoint_Endpoint_ActivePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): When the backup endpoint is active, the value of this
// parameter is set to true
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Active() *NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndpointId (leaf): An identifier for the endpoint
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) EndpointId() *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "endpoint-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndpointId (leaf): An identifier for the endpoint
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) EndpointId() *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "endpoint-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Local (container): Configuration and operational state parameters
// relating to a local interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Local() *NetworkInstance_ConnectionPoint_Endpoint_LocalPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_LocalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"local"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Local (container): Configuration and operational state parameters
// relating to a local interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Local() *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Precedence (leaf): The precedence of the endpoint - the lowest precendence
// viable endpoint will be utilised as the active endpoint
// within a connection
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/precedence"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Precedence() *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "precedence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Precedence (leaf): The precedence of the endpoint - the lowest precendence
// viable endpoint will be utilised as the active endpoint
// within a connection
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/precedence"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Precedence() *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "precedence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Remote (container): Configuration and operational state parameters
// relating to a remote interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "remote"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Remote() *NetworkInstance_ConnectionPoint_Endpoint_RemotePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_RemotePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Remote (container): Configuration and operational state parameters
// relating to a remote interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "remote"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Remote() *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of endpoint that is referred to by the current
// endpoint
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/type"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Type() *NetworkInstance_ConnectionPoint_Endpoint_TypePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of endpoint that is referred to by the current
// endpoint
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/type"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Type() *NetworkInstance_ConnectionPoint_Endpoint_TypePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vxlan (container): Configuration and operational state parameters
// relating to a VXLAN tunnel end-point interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Vxlan() *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_VxlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vxlan (container): Configuration and operational state parameters
// relating to a VXLAN tunnel end-point interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Vxlan() *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).Endpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoints"},
			PostRelPath: []string{"openconfig-network-instance:endpoint"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).Endpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoints"},
			PostRelPath: []string{"openconfig-network-instance:endpoint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).Endpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoints"},
			PostRelPath: []string{"openconfig-network-instance:endpoint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).Endpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoints"},
			PostRelPath: []string{"openconfig-network-instance:endpoint"},
		},
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-label-block-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockOffset
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-label-block-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockOffset
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-label-block-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockOffset
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-label-block-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockOffset
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-label-block-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-label-block-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-label-block-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-label-block-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_LocalPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_LocalPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Interface() *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Interface() *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteId (leaf): The VE ID as defined in RFC4761 (VPLS) or CE ID as defined in
// RFC6624 (l2vpn) to uniquely identify this endpoint (site) as part
// of the BGP discovery of remote endpoints for layer 2 services.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteId (leaf): The VE ID as defined in RFC4761 (VPLS) or CE ID as defined in
// RFC6624 (l2vpn) to uniquely identify this endpoint (site) as part
// of the BGP discovery of remote endpoints for layer 2 services.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteLabelBlockOffset (leaf): The VPLS label block offset that is signaled with the 'site-id'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteLabelBlockOffset() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-label-block-offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteLabelBlockOffset (leaf): The VPLS label block offset that is signaled with the 'site-id'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteLabelBlockOffset() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-label-block-offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteLabelBlockSize (leaf): The VPLS label block size that is signaled with the 'site-id'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteLabelBlockSize() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-label-block-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteLabelBlockSize (leaf): The VPLS label block size that is signaled with the 'site-id'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteLabelBlockSize() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-label-block-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Subinterface() *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Subinterface() *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).RemoteSystem
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).RemoteSystem
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).RemoteSystem
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).RemoteSystem
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-circuit-identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).VirtualCircuitIdentifier
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-circuit-identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).VirtualCircuitIdentifier
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-circuit-identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).VirtualCircuitIdentifier
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-circuit-identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).VirtualCircuitIdentifier
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_RemotePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_RemotePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny struct {
	*ygnmi.NodePath
}

// RemoteSystem (leaf): The IP address of the device which hosts the
// remote end-point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) RemoteSystem() *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-system"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteSystem (leaf): The IP address of the device which hosts the
// remote end-point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) RemoteSystem() *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-system"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteId (leaf): Identifies remote sites. When BGP discovery is used this
// is the customer edge identifier
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteId (leaf): Identifies remote sites. When BGP discovery is used this
// is the customer edge identifier
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualCircuitIdentifier (leaf): The virtual-circuit identifier that identifies the
// connection at the remote end-point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) VirtualCircuitIdentifier() *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-circuit-identifier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualCircuitIdentifier (leaf): The virtual-circuit identifier that identifies the
// connection at the remote end-point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) VirtualCircuitIdentifier() *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-circuit-identifier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).SourceInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).SourceInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).SourceInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).SourceInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_VxlanPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_VxlanPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny struct {
	*ygnmi.NodePath
}

// Description (leaf): Description to identify the VXLAN tunnel endpoint It
// is a unique name identifying the overlay endpoint
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Description() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Description to identify the VXLAN tunnel endpoint It
// is a unique name identifying the overlay endpoint
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Description() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): VXLAN tunnel endpoint administrative state.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Enabled() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): VXLAN tunnel endpoint administrative state.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Enabled() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndpointPeerAny (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeerAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": "*"},
			n,
		),
	}
	return ps
}

// EndpointPeerAny (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeerAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": "*"},
			n,
		),
	}
	return ps
}

// EndpointPeer (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
//
//	PeerAddress: string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeer(PeerAddress string) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": PeerAddress},
			n,
		),
	}
	return ps
}

// EndpointPeer (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
//
//	PeerAddress: string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeer(PeerAddress string) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": PeerAddress},
			n,
		),
	}
	return ps
}

// EndpointPeerMap (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeerMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EndpointPeerMap (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeerMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EndpointVniAny (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
	return ps
}

// EndpointVniAny (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
	return ps
}

// EndpointVni (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
//
//	Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
	return ps
}

// EndpointVni (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
//
//	Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
	return ps
}

// EndpointVniMap (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVniMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EndpointVniMap (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVniMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LocalEndpointVniAny (list): List of L2VNIs and L3VNIs configured on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-endpoint-vnis/local-endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) LocalEndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-endpoint-vnis", "local-endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
	return ps
}

// LocalEndpointVniAny (list): List of L2VNIs and L3VNIs configured on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-endpoint-vnis/local-endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) LocalEndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-endpoint-vnis", "local-endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
	return ps
}

// LocalEndpointVni (list): List of L2VNIs and L3VNIs configured on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-endpoint-vnis/local-endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni"
//
//	Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) LocalEndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-endpoint-vnis", "local-endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
	return ps
}

// LocalEndpointVni (list): List of L2VNIs and L3VNIs configured on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-endpoint-vnis/local-endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni"
//
//	Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) LocalEndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-endpoint-vnis", "local-endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
	return ps
}

// LocalEndpointVniMap (list): List of L2VNIs and L3VNIs configured on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-endpoint-vnis/local-endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) LocalEndpointVniMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMap {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-endpoint-vnis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LocalEndpointVniMap (list): List of L2VNIs and L3VNIs configured on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-endpoint-vnis/local-endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) LocalEndpointVniMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMapAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-endpoint-vnis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SourceInterface (leaf): Source loopback interface name
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) SourceInterface() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceInterface (leaf): Source loopback interface name
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) SourceInterface() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-plane-vnis"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).ControlPlaneVnis
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-plane-vnis"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).ControlPlaneVnis
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-address"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-address"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peer-address"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peer-address"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath) State() ygnmi.SingletonQuery[oc.E_EndpointPeer_PeerState] {
	return ygnmi.NewSingletonQuery[oc.E_EndpointPeer_PeerState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointPeer_PeerState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny) State() ygnmi.WildcardQuery[oc.E_EndpointPeer_PeerState] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointPeer_PeerState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointPeer_PeerState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).RouterMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).RouterMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/uptime"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uptime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).Uptime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/uptime"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uptime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).Uptime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny struct {
	*ygnmi.NodePath
}

// ControlPlaneVnis (leaf-list): The control-plane VNIs are all of the VNIs that are discovered by the
// control-plane behind this peer VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-plane-vnis"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) ControlPlaneVnis() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ControlPlaneVnis (leaf-list): The control-plane VNIs are all of the VNIs that are discovered by the
// control-plane behind this peer VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-plane-vnis"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) ControlPlaneVnis() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): Operational state regarding encapsulated traffic.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) Counters() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Operational state regarding encapsulated traffic.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) Counters() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PeerAddress (leaf): IP address of the remote VXLAN Tunnel Endpoint peer
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-address"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/*/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) PeerAddress() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerAddress (leaf): IP address of the remote VXLAN Tunnel Endpoint peer
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-address"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/*/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) PeerAddress() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerState (leaf): State parameters related to the remote VTEP peer state
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) PeerState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerState (leaf): State parameters related to the remote VTEP peer state
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) PeerState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterMac (leaf): MAC address of the remote VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterMac (leaf): MAC address of the remote VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Uptime (leaf): This timestamp indicates the time elapsed relative to the moment that
// the remote VTEP peer was discovered.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/uptime"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) Uptime() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uptime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Uptime (leaf): This timestamp indicates the time elapsed relative to the moment that
// the remote VTEP peer was discovered.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/uptime"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) Uptime() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uptime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniPeerGroupAny (list): List of VNI peer groups
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni-peer-groups/vni-peer-group"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) VniPeerGroupAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vni-peer-groups", "vni-peer-group"},
			map[string]interface{}{"cp-vni": "*", "egress-vni": "*"},
			n,
		),
	}
	return ps
}

// VniPeerGroupAny (list): List of VNI peer groups
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni-peer-groups/vni-peer-group"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) VniPeerGroupAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vni-peer-groups", "vni-peer-group"},
			map[string]interface{}{"cp-vni": "*", "egress-vni": "*"},
			n,
		),
	}
	return ps
}

// WithCpVni sets NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny's key "cp-vni" to the specified value.
// CpVni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny) WithCpVni(CpVni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny {
	ygnmi.ModifyKey(n.NodePath, "cp-vni", CpVni)
	return n
}

// WithEgressVni sets NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny's key "egress-vni" to the specified value.
// EgressVni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny) WithEgressVni(EgressVni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny {
	ygnmi.ModifyKey(n.NodePath, "egress-vni", EgressVni)
	return n
}

// VniPeerGroup (list): List of VNI peer groups
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni-peer-groups/vni-peer-group"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group"
//
//	CpVni: uint32
//	EgressVni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) VniPeerGroup(CpVni uint32, EgressVni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vni-peer-groups", "vni-peer-group"},
			map[string]interface{}{"cp-vni": CpVni, "egress-vni": EgressVni},
			n,
		),
	}
	return ps
}

// VniPeerGroup (list): List of VNI peer groups
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni-peer-groups/vni-peer-group"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group"
//
//	CpVni: uint32
//	EgressVni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) VniPeerGroup(CpVni uint32, EgressVni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vni-peer-groups", "vni-peer-group"},
			map[string]interface{}{"cp-vni": CpVni, "egress-vni": EgressVni},
			n,
		),
	}
	return ps
}

// VniPeerGroupMap (list): List of VNI peer groups
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni-peer-groups/vni-peer-group"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) VniPeerGroupMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMap {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"vni-peer-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VniPeerGroupMap (list): List of VNI peer groups
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni-peer-groups/vni-peer-group"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) VniPeerGroupMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMapAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vni-peer-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).EndpointPeer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoint-peers"},
			PostRelPath: []string{"openconfig-network-instance:endpoint-peer"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).EndpointPeer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoint-peers"},
			PostRelPath: []string{"openconfig-network-instance:endpoint-peer"},
		},
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-ir-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-ir-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).BumDecapIrPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).BumDecapIrPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-multicast-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-multicast-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).BumDecapMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).BumDecapMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).BumDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).BumDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).BumEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).BumEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/drop-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/drop-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).DropDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).DropDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/except-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/except-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).ExceptDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).ExceptDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).TotalDecapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).TotalDecapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).TotalDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).TotalDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).TotalEncapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).TotalEncapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).TotalEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).TotalEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/unicast-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/unicast-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).UnicastDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters).UnicastDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny struct {
	*ygnmi.NodePath
}

// BumDecapIrPkts (leaf): The number of decapsulated BUM packets received via underlay ingress replication.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) BumDecapIrPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapIrPkts (leaf): The number of decapsulated BUM packets received via underlay ingress replication.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) BumDecapIrPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapIrPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapMulticastPkts (leaf): The number of decapsulated BUM packets received via underlay multicast.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) BumDecapMulticastPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapMulticastPkts (leaf): The number of decapsulated BUM packets received via underlay multicast.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) BumDecapMulticastPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapPkts (leaf): The total number of decapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) BumDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapPkts (leaf): The total number of decapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) BumDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumEncapPkts (leaf): The total number of encapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) BumEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumEncapPkts (leaf): The total number of encapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) BumEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_BumEncapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DropDecapPkts (leaf): The total number of decapsulated packets that have been dropped locally.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) DropDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DropDecapPkts (leaf): The total number of decapsulated packets that have been dropped locally.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) DropDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_DropDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceptDecapPkts (leaf): The total number of decapsulated packets that hit an exceptional condition.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) ExceptDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceptDecapPkts (leaf): The total number of decapsulated packets that hit an exceptional condition.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) ExceptDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_ExceptDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapBytes (leaf): The total number of decapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) TotalDecapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapBytes (leaf): The total number of decapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) TotalDecapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapPkts (leaf): The total number of decapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) TotalDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapPkts (leaf): The total number of decapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) TotalDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapBytes (leaf): The total number of encapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) TotalEncapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapBytes (leaf): The total number of encapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) TotalEncapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapPkts (leaf): The total number of encapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) TotalEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapPkts (leaf): The total number of encapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) TotalEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_TotalEncapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastDecapPkts (leaf): The total number of decapsulated unicast packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) UnicastDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastDecapPkts (leaf): The total number of decapsulated unicast packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) UnicastDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters_UnicastDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/cp-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/cp-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cp-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/cp-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cp-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).CpVni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cp-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/cp-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cp-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).CpVni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "cp-vni"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"cp-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).CpVni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "cp-vni"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"cp-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).CpVni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/egress-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/egress-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/egress-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/egress-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "egress-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).EgressVni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/egress-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/egress-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "egress-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).EgressVni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "egress-vni"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"egress-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).EgressVni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "egress-vni"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"egress-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).EgressVni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).RouterMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup).RouterMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMapAny struct {
	*ygnmi.NodePath
}

// CpVni (leaf): The control-plane VNI discovered behind this peer VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cp-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/*/cp-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPath) CpVni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cp-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CpVni (leaf): The control-plane VNI discovered behind this peer VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cp-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/*/cp-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny) CpVni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_CpVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cp-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressVni (leaf): Egress VNI associated with the remote VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/egress-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/*/egress-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPath) EgressVni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "egress-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressVni (leaf): Egress VNI associated with the remote VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/egress-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/*/egress-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny) EgressVni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_EgressVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "egress-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterMac (leaf): MAC address of the remote VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPath) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterMac (leaf): MAC address of the remote VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/vni-peer-groups/vni-peer-group/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_RouterMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_Key]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_Key]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_Key]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).VniPeerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:vni-peer-groups"},
			PostRelPath: []string{"openconfig-network-instance:vni-peer-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroupPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_Key]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_Key]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup_Key]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_VniPeerGroup, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).VniPeerGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:vni-peer-groups"},
			PostRelPath: []string{"openconfig-network-instance:vni-peer-group"},
		},
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).BridgeDomain
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).BridgeDomain
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).L3VrfName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).L3VrfName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/learning-mode"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath) State() ygnmi.SingletonQuery[oc.E_EvpnTypes_LearningMode] {
	return ygnmi.NewSingletonQuery[oc.E_EvpnTypes_LearningMode](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learning-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_LearningMode, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).LearningMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/learning-mode"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny) State() ygnmi.WildcardQuery[oc.E_EvpnTypes_LearningMode] {
	return ygnmi.NewWildcardQuery[oc.E_EvpnTypes_LearningMode](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learning-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_LearningMode, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).LearningMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multidestination-traffic"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).MultidestinationTraffic
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multidestination-traffic"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).MultidestinationTraffic
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/svi-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath) State() ygnmi.SingletonQuery[oc.E_EndpointVni_SviState] {
	return ygnmi.NewSingletonQuery[oc.E_EndpointVni_SviState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "svi-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_SviState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).SviState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/svi-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny) State() ygnmi.WildcardQuery[oc.E_EndpointVni_SviState] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointVni_SviState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "svi-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_SviState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).SviState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath) State() ygnmi.SingletonQuery[oc.E_EndpointVni_VniState] {
	return ygnmi.NewSingletonQuery[oc.E_EndpointVni_VniState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).VniState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny) State() ygnmi.WildcardQuery[oc.E_EndpointVni_VniState] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointVni_VniState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).VniState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath) State() ygnmi.SingletonQuery[oc.E_EndpointVni_VniType] {
	return ygnmi.NewSingletonQuery[oc.E_EndpointVni_VniType](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniType, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).VniType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny) State() ygnmi.WildcardQuery[oc.E_EndpointVni_VniType] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointVni_VniType](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniType, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).VniType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny struct {
	*ygnmi.NodePath
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4 (container): Parameters for the IPv4 address family.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) Ipv4() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4Path {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Parameters for the IPv4 address family.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) Ipv4() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4PathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Parameters for the IPv6 address family.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) Ipv6() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6Path {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Parameters for the IPv6 address family.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) Ipv6() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6PathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearningMode (leaf): Indicates whether the learning mode for this VNI is either
// control-plane or data-plane
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/learning-mode"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) LearningMode() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "learning-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearningMode (leaf): Indicates whether the learning mode for this VNI is either
// control-plane or data-plane
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/learning-mode"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) LearningMode() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "learning-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultidestinationTraffic (leaf): The data plane for overlays needs to handle the transport of
// multidestination traffic. Multidestination traffic is typically
// referred to as (BUM) which stands for broadcast, unknown unicast,
// or multicast. The two most common methods that can accommodate this
// replication and transport in the underlay are IP multicast and
// ingress replication
// (also called head-end replication or unicast mode).
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multidestination-traffic"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) MultidestinationTraffic() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultidestinationTraffic (leaf): The data plane for overlays needs to handle the transport of
// multidestination traffic. Multidestination traffic is typically
// referred to as (BUM) which stands for broadcast, unknown unicast,
// or multicast. The two most common methods that can accommodate this
// replication and transport in the underlay are IP multicast and
// ingress replication
// (also called head-end replication or unicast mode).
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multidestination-traffic"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) MultidestinationTraffic() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SviState (leaf): Operational status of the SVI mapped to the L3VNI that is used for
// routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/svi-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) SviState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "svi-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SviState (leaf): Operational status of the SVI mapped to the L3VNI that is used for
// routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/svi-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) SviState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "svi-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): L2VNI or L3VNI Identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/*/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): L2VNI or L3VNI Identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/*/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniState (leaf): Operational state of the L2VNI or L3VNI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) VniState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniState (leaf): Operational state of the L2VNI or L3VNI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) VniState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniType (leaf): The type of virtual network identfier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniType (leaf): The type of virtual network identfier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).EndpointVni
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoint-vnis"},
			PostRelPath: []string{"openconfig-network-instance:endpoint-vni"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).EndpointVni
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoint-vnis"},
			PostRelPath: []string{"openconfig-network-instance:endpoint-vni"},
		},
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4Path represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4 YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4 YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// Counters (container): Operational state regarding encapsulated traffic.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4Path) Counters() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Operational state regarding encapsulated traffic.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4PathAny) Counters() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-ir-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-ir-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).BumDecapIrPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).BumDecapIrPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-multicast-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-multicast-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).BumDecapMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).BumDecapMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).BumDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).BumDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).BumEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).BumEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/drop-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/drop-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).DropDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).DropDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/except-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/except-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).ExceptDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).ExceptDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).TotalDecapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).TotalDecapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).TotalDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).TotalDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).TotalEncapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).TotalEncapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).TotalEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).TotalEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/unicast-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/unicast-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).UnicastDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters).UnicastDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny struct {
	*ygnmi.NodePath
}

// BumDecapIrPkts (leaf): The number of decapsulated BUM packets received via underlay ingress replication.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) BumDecapIrPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapIrPkts (leaf): The number of decapsulated BUM packets received via underlay ingress replication.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) BumDecapIrPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapIrPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapMulticastPkts (leaf): The number of decapsulated BUM packets received via underlay multicast.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) BumDecapMulticastPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapMulticastPkts (leaf): The number of decapsulated BUM packets received via underlay multicast.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) BumDecapMulticastPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapPkts (leaf): The total number of decapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) BumDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapPkts (leaf): The total number of decapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) BumDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumEncapPkts (leaf): The total number of encapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) BumEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumEncapPkts (leaf): The total number of encapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) BumEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_BumEncapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DropDecapPkts (leaf): The total number of decapsulated packets that have been dropped locally.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) DropDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DropDecapPkts (leaf): The total number of decapsulated packets that have been dropped locally.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) DropDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_DropDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceptDecapPkts (leaf): The total number of decapsulated packets that hit an exceptional condition.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) ExceptDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceptDecapPkts (leaf): The total number of decapsulated packets that hit an exceptional condition.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) ExceptDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_ExceptDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapBytes (leaf): The total number of decapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) TotalDecapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapBytes (leaf): The total number of decapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) TotalDecapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapPkts (leaf): The total number of decapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) TotalDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapPkts (leaf): The total number of decapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) TotalDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapBytes (leaf): The total number of encapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) TotalEncapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapBytes (leaf): The total number of encapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) TotalEncapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapPkts (leaf): The total number of encapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) TotalEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapPkts (leaf): The total number of encapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) TotalEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_TotalEncapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastDecapPkts (leaf): The total number of decapsulated unicast packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) UnicastDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastDecapPkts (leaf): The total number of decapsulated unicast packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv4/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) UnicastDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters_UnicastDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv4_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6Path represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6 YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6 YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// Counters (container): Operational state regarding encapsulated traffic.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6Path) Counters() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Operational state regarding encapsulated traffic.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6PathAny) Counters() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
