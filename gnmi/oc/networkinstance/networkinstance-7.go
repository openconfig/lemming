/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/maximum-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/maximum-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).MaximumGroups
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).MaximumGroups
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/config/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).MaximumGroups
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/config/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).MaximumGroups
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_NeighborCountPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count YANG schema element.
type NetworkInstance_Protocol_Pim_Global_NeighborCountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_NeighborCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count YANG schema element.
type NetworkInstance_Protocol_Pim_Global_NeighborCountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-count"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count"
func (n *NetworkInstance_Protocol_Pim_Global_NeighborCountPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).NeighborCount
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-count"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count"
func (n *NetworkInstance_Protocol_Pim_Global_NeighborCountPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).NeighborCount
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global YANG schema element.
type NetworkInstance_Protocol_Pim_GlobalPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global YANG schema element.
type NetworkInstance_Protocol_Pim_GlobalPathAny struct {
	*ygnmi.NodePath
}

// Counters (container): Global PIM counters.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) Counters() *NetworkInstance_Protocol_Pim_Global_CountersPath {
	ps := &NetworkInstance_Protocol_Pim_Global_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Global PIM counters.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) Counters() *NetworkInstance_Protocol_Pim_Global_CountersPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaximumGroups (leaf): Limit the number of accepted (S, G) and (*, G)
// PIM join states on the network-instance.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/*/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) MaximumGroups() *NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath {
	ps := &NetworkInstance_Protocol_Pim_Global_MaximumGroupsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-groups"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaximumGroups (leaf): Limit the number of accepted (S, G) and (*, G)
// PIM join states on the network-instance.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/*/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) MaximumGroups() *NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_MaximumGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-groups"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborCount (leaf): Number of adjacent PIM neighbors.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-count"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) NeighborCount() *NetworkInstance_Protocol_Pim_Global_NeighborCountPath {
	ps := &NetworkInstance_Protocol_Pim_Global_NeighborCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborCount (leaf): Number of adjacent PIM neighbors.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-count"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/neighbor-count"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) NeighborCount() *NetworkInstance_Protocol_Pim_Global_NeighborCountPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_NeighborCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RendezvousPointAny (list): Defines a rendezvous point (RP) for sparse mode multicast.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rendezvous-points/rendezvous-point"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) RendezvousPointAny() *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rendezvous-points", "rendezvous-point"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// RendezvousPointAny (list): Defines a rendezvous point (RP) for sparse mode multicast.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rendezvous-points/rendezvous-point"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) RendezvousPointAny() *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rendezvous-points", "rendezvous-point"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// RendezvousPoint (list): Defines a rendezvous point (RP) for sparse mode multicast.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rendezvous-points/rendezvous-point"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
//
//	Address: string
func (n *NetworkInstance_Protocol_Pim_GlobalPath) RendezvousPoint(Address string) *NetworkInstance_Protocol_Pim_Global_RendezvousPointPath {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rendezvous-points", "rendezvous-point"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// RendezvousPoint (list): Defines a rendezvous point (RP) for sparse mode multicast.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rendezvous-points/rendezvous-point"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
//
//	Address: string
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) RendezvousPoint(Address string) *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rendezvous-points", "rendezvous-point"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// RendezvousPointMap (list): Defines a rendezvous point (RP) for sparse mode multicast.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rendezvous-points/rendezvous-point"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) RendezvousPointMap() *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMap {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"rendezvous-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RendezvousPointMap (list): Defines a rendezvous point (RP) for sparse mode multicast.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rendezvous-points/rendezvous-point"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) RendezvousPointMap() *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMapAny {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rendezvous-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SourceAny (list): A multicast source that has been joined.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sources-joined/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) SourceAny() *NetworkInstance_Protocol_Pim_Global_SourcePathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sources-joined", "source"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// SourceAny (list): A multicast source that has been joined.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sources-joined/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) SourceAny() *NetworkInstance_Protocol_Pim_Global_SourcePathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sources-joined", "source"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// Source (list): A multicast source that has been joined.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sources-joined/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
//
//	Address: string
func (n *NetworkInstance_Protocol_Pim_GlobalPath) Source(Address string) *NetworkInstance_Protocol_Pim_Global_SourcePath {
	ps := &NetworkInstance_Protocol_Pim_Global_SourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sources-joined", "source"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// Source (list): A multicast source that has been joined.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sources-joined/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
//
//	Address: string
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) Source(Address string) *NetworkInstance_Protocol_Pim_Global_SourcePathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sources-joined", "source"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// SourceMap (list): A multicast source that has been joined.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sources-joined/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) SourceMap() *NetworkInstance_Protocol_Pim_Global_SourcePathMap {
	ps := &NetworkInstance_Protocol_Pim_Global_SourcePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"sources-joined"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SourceMap (list): A multicast source that has been joined.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sources-joined/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) SourceMap() *NetworkInstance_Protocol_Pim_Global_SourcePathMapAny {
	ps := &NetworkInstance_Protocol_Pim_Global_SourcePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sources-joined"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ssm (container): Source specific multicast (SSM).
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ssm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/ssm"
func (n *NetworkInstance_Protocol_Pim_GlobalPath) Ssm() *NetworkInstance_Protocol_Pim_Global_SsmPath {
	ps := &NetworkInstance_Protocol_Pim_Global_SsmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ssm"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ssm (container): Source specific multicast (SSM).
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ssm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/ssm"
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) Ssm() *NetworkInstance_Protocol_Pim_Global_SsmPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_SsmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ssm"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_GlobalPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_GlobalPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Pim_Global] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Pim_Global](
		"NetworkInstance_Protocol_Pim_Global",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_GlobalPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global](
		"NetworkInstance_Protocol_Pim_Global",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bootstrap-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootstrap-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Counters).BootstrapMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bootstrap-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootstrap-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Counters).BootstrapMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"hello-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Counters).HelloMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"hello-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Counters).HelloMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "join-prune-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"join-prune-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Counters).JoinPruneMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "join-prune-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Global_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"join-prune-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Counters).JoinPruneMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Global_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Global_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Global_CountersPathAny struct {
	*ygnmi.NodePath
}

// BootstrapMessages (leaf): Number of bootstrap router messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bootstrap-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPath) BootstrapMessages() *NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPath {
	ps := &NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootstrap-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootstrapMessages (leaf): Number of bootstrap router messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bootstrap-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPathAny) BootstrapMessages() *NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_Counters_BootstrapMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootstrap-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloMessages (leaf): Number of hello messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPath) HelloMessages() *NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPath {
	ps := &NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloMessages (leaf): Number of hello messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPathAny) HelloMessages() *NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_Counters_HelloMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// JoinPruneMessages (leaf): Number of join/prune messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "join-prune-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPath) JoinPruneMessages() *NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPath {
	ps := &NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"join-prune-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// JoinPruneMessages (leaf): Number of join/prune messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "join-prune-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Global_CountersPathAny) JoinPruneMessages() *NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_Counters_JoinPruneMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"join-prune-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global_Counters](
		"NetworkInstance_Protocol_Pim_Global_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_Counters](
		"NetworkInstance_Protocol_Pim_Global_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/state/address YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/state/address YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/state/address"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/state/address"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/address"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/address"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/state/multicast-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/state/multicast-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/state/multicast-groups"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint).MulticastGroups
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/state/multicast-groups"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint).MulticastGroups
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/multicast-groups"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint).MulticastGroups
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/config/multicast-groups"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint).MulticastGroups
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPointPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPointPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): IPv4 address of rendezvous point.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/*/address"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPath) Address() *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): IPv4 address of rendezvous point.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/*/address"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny) Address() *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPoint_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastGroups (leaf): List of multicast groups (multicast IP address ranges) for which
// this entry will be used as a rendezvous point. When not
// present the default is equivalent to all valid IP multicast
// addresses.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/*/multicast-groups"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPath) MulticastGroups() *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-groups"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastGroups (leaf): List of multicast groups (multicast IP address ranges) for which
// this entry will be used as a rendezvous point. When not
// present the default is equivalent to all valid IP multicast
// addresses.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point/*/multicast-groups"
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny) MulticastGroups() *NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_RendezvousPoint_MulticastGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-groups"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint](
		"NetworkInstance_Protocol_Pim_Global_RendezvousPoint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).RendezvousPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rendezvous-points"},
			PostRelPath: []string{"openconfig-network-instance:rendezvous-point"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).RendezvousPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rendezvous-points"},
			PostRelPath: []string{"openconfig-network-instance:rendezvous-point"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint](
		"NetworkInstance_Protocol_Pim_Global",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).RendezvousPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rendezvous-points"},
			PostRelPath: []string{"openconfig-network-instance:rendezvous-point"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_RendezvousPointPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint](
		"NetworkInstance_Protocol_Pim_Global",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Global_RendezvousPoint, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).RendezvousPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rendezvous-points"},
			PostRelPath: []string{"openconfig-network-instance:rendezvous-point"},
		},
	)
}

// NetworkInstance_Protocol_Pim_Global_Source_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/address YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/address YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/address"
func (n *NetworkInstance_Protocol_Pim_Global_Source_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Source",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Source).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Source) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/address"
func (n *NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Source",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Source).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Source) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Pim_Global_Source_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Source",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Source).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Source) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Source",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Source).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Source) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_Source_GroupPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_GroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_Source_GroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_GroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group"
func (n *NetworkInstance_Protocol_Pim_Global_Source_GroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Source",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Source).Group
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Source) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group"
func (n *NetworkInstance_Protocol_Pim_Global_Source_GroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Source",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Source).Group
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Source) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/upstream-interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id"
func (n *NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Source",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "upstream-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Source).UpstreamInterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Source) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/upstream-interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id"
func (n *NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Source",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "upstream-interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Source).UpstreamInterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Source) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SourcePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Global_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SourcePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Global_SourcePathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SourcePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Global_SourcePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SourcePathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): Source address of multicast.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/*/address"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePath) Address() *NetworkInstance_Protocol_Pim_Global_Source_AddressPath {
	ps := &NetworkInstance_Protocol_Pim_Global_Source_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): Source address of multicast.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/*/address"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePathAny) Address() *NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_Source_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Group (leaf): Multicast address.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePath) Group() *NetworkInstance_Protocol_Pim_Global_Source_GroupPath {
	ps := &NetworkInstance_Protocol_Pim_Global_Source_GroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Group (leaf): Multicast address.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/group"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePathAny) Group() *NetworkInstance_Protocol_Pim_Global_Source_GroupPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_Source_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpstreamInterfaceId (leaf): The upstream interface for this multicast source.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/upstream-interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePath) UpstreamInterfaceId() *NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPath {
	ps := &NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "upstream-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpstreamInterfaceId (leaf): The upstream interface for this multicast source.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/upstream-interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source/state/upstream-interface-id"
func (n *NetworkInstance_Protocol_Pim_Global_SourcePathAny) UpstreamInterfaceId() *NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_Source_UpstreamInterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "upstream-interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_SourcePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global_Source] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global_Source](
		"NetworkInstance_Protocol_Pim_Global_Source",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_SourcePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_Source] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_Source](
		"NetworkInstance_Protocol_Pim_Global_Source",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_SourcePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_Source] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_Source](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Global_Source, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).Source
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sources-joined"},
			PostRelPath: []string{"openconfig-network-instance:source"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_SourcePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_Source] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Global_Source](
		"NetworkInstance_Protocol_Pim_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Global_Source, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global).Source
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sources-joined"},
			PostRelPath: []string{"openconfig-network-instance:source"},
		},
	)
}

// NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm/state/ssm-ranges YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm/state/ssm-ranges YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/ssm/state/ssm-ranges"
func (n *NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Ssm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssm-ranges"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Ssm).SsmRanges
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Ssm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/ssm/state/ssm-ranges"
func (n *NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Ssm",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssm-ranges"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Ssm).SsmRanges
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Ssm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/ssm/config/ssm-ranges"
func (n *NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Ssm",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ssm-ranges"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Ssm).SsmRanges
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Ssm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/ssm/config/ssm-ranges"
func (n *NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Global_Ssm",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ssm-ranges"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Global_Ssm).SsmRanges
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Global_Ssm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Global_SsmPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SsmPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Global_SsmPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm YANG schema element.
type NetworkInstance_Protocol_Pim_Global_SsmPathAny struct {
	*ygnmi.NodePath
}

// SsmRanges (leaf): List of accepted source specific multicast (SSM) address
// ranges.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/ssm/*/ssm-ranges"
func (n *NetworkInstance_Protocol_Pim_Global_SsmPath) SsmRanges() *NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath {
	ps := &NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ssm-ranges"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SsmRanges (leaf): List of accepted source specific multicast (SSM) address
// ranges.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/global/ssm/*/ssm-ranges"
func (n *NetworkInstance_Protocol_Pim_Global_SsmPathAny) SsmRanges() *NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny {
	ps := &NetworkInstance_Protocol_Pim_Global_Ssm_SsmRangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ssm-ranges"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_SsmPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global_Ssm] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Global_Ssm](
		"NetworkInstance_Protocol_Pim_Global_Ssm",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_SsmPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_Ssm] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_Ssm](
		"NetworkInstance_Protocol_Pim_Global_Ssm",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_SsmPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Pim_Global_Ssm] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Pim_Global_Ssm](
		"NetworkInstance_Protocol_Pim_Global_Ssm",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Global_SsmPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_Ssm] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Global_Ssm](
		"NetworkInstance_Protocol_Pim_Global_Ssm",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_BorderRouterPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/border-router YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_BorderRouterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/border-router YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/border-router"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/border-router"
func (n *NetworkInstance_Protocol_Pim_Interface_BorderRouterPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "border-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).BorderRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/border-router"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/border-router"
func (n *NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "border-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).BorderRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/border-router"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/border-router"
func (n *NetworkInstance_Protocol_Pim_Interface_BorderRouterPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "border-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).BorderRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/border-router"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/border-router"
func (n *NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "border-router"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).BorderRouter
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_BsrBorderPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/bsr-border YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_BsrBorderPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/bsr-border YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bsr-border"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/bsr-border"
func (n *NetworkInstance_Protocol_Pim_Interface_BsrBorderPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bsr-border"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).BsrBorder
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bsr-border"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/bsr-border"
func (n *NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bsr-border"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).BsrBorder
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bsr-border"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/bsr-border"
func (n *NetworkInstance_Protocol_Pim_Interface_BsrBorderPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bsr-border"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).BsrBorder
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bsr-border"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/bsr-border"
func (n *NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bsr-border"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).BsrBorder
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_DeadTimerPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/dead-timer YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_DeadTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/dead-timer YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dead-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/dead-timer"
func (n *NetworkInstance_Protocol_Pim_Interface_DeadTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dead-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).DeadTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dead-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/dead-timer"
func (n *NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dead-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).DeadTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dead-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dead-timer"
func (n *NetworkInstance_Protocol_Pim_Interface_DeadTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dead-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).DeadTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dead-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dead-timer"
func (n *NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dead-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).DeadTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_DrPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/dr-priority YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_DrPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/dr-priority YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dr-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/dr-priority"
func (n *NetworkInstance_Protocol_Pim_Interface_DrPriorityPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dr-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).DrPriority
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dr-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/dr-priority"
func (n *NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dr-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).DrPriority
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dr-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dr-priority"
func (n *NetworkInstance_Protocol_Pim_Interface_DrPriorityPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dr-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).DrPriority
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dr-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/dr-priority"
func (n *NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dr-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).DrPriority
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/enabled YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/enabled YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/hello-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/hello-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/hello-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).HelloInterval
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/hello-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).HelloInterval
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/hello-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).HelloInterval
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/hello-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).HelloInterval
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/join-prune-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/join-prune-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/join-prune-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/join-prune-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "join-prune-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).JoinPruneInterval
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/join-prune-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/join-prune-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "join-prune-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).JoinPruneInterval
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/join-prune-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/join-prune-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "join-prune-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).JoinPruneInterval
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/join-prune-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/join-prune-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "join-prune-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).JoinPruneInterval
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/maximum-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/maximum-groups YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).MaximumGroups
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).MaximumGroups
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).MaximumGroups
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-groups"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).MaximumGroups
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_ModePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/mode YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_ModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/mode YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_ModePath) State() ygnmi.SingletonQuery[oc.E_PimTypes_PIM_MODE] {
	return ygnmi.NewSingletonQuery[oc.E_PimTypes_PIM_MODE](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PimTypes_PIM_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_ModePathAny) State() ygnmi.WildcardQuery[oc.E_PimTypes_PIM_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_PimTypes_PIM_MODE](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PimTypes_PIM_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_ModePath) Config() ygnmi.ConfigQuery[oc.E_PimTypes_PIM_MODE] {
	return ygnmi.NewConfigQuery[oc.E_PimTypes_PIM_MODE](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PimTypes_PIM_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/config/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_PimTypes_PIM_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_PimTypes_PIM_MODE](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PimTypes_PIM_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Pim_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Pim_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Pim_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Pim_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// BorderRouter (leaf): When set to true the interface is set as MBR (multicast border
// router) and allows multicast traffic from sources that are
// outside of the PIM domain.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/border-router"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/border-router"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) BorderRouter() *NetworkInstance_Protocol_Pim_Interface_BorderRouterPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_BorderRouterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "border-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BorderRouter (leaf): When set to true the interface is set as MBR (multicast border
// router) and allows multicast traffic from sources that are
// outside of the PIM domain.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/border-router"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/border-router"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) BorderRouter() *NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_BorderRouterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "border-router"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BsrBorder (leaf): When set to true the device will not send bootstrap router
// messages over this interface. By default these are transmitted
// over all PIM sparse mode (PIM-SM) enabled interfaces.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bsr-border"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/bsr-border"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) BsrBorder() *NetworkInstance_Protocol_Pim_Interface_BsrBorderPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_BsrBorderPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bsr-border"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BsrBorder (leaf): When set to true the device will not send bootstrap router
// messages over this interface. By default these are transmitted
// over all PIM sparse mode (PIM-SM) enabled interfaces.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bsr-border"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/bsr-border"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) BsrBorder() *NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_BsrBorderPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bsr-border"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): PIM counters for each interface.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) Counters() *NetworkInstance_Protocol_Pim_Interface_CountersPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): PIM counters for each interface.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) Counters() *NetworkInstance_Protocol_Pim_Interface_CountersPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DeadTimer (leaf): Number of missed hello messages after which a neighbor is
// expired.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dead-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/dead-timer"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) DeadTimer() *NetworkInstance_Protocol_Pim_Interface_DeadTimerPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_DeadTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dead-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DeadTimer (leaf): Number of missed hello messages after which a neighbor is
// expired.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dead-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/dead-timer"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) DeadTimer() *NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_DeadTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dead-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DrPriority (leaf): The designated router priority of this interface. Larger always
// preferred.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dr-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/dr-priority"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) DrPriority() *NetworkInstance_Protocol_Pim_Interface_DrPriorityPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_DrPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dr-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DrPriority (leaf): The designated router priority of this interface. Larger always
// preferred.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dr-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/dr-priority"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) DrPriority() *NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_DrPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dr-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "enable-bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) EnableBfd() *NetworkInstance_Protocol_Pim_Interface_EnableBfdPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "enable-bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) EnableBfd() *NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this
// leaf is defined is enabled, when set to false it is
// explicitly disabled.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/enabled"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) Enabled() *NetworkInstance_Protocol_Pim_Interface_EnabledPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this
// leaf is defined is enabled, when set to false it is
// explicitly disabled.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/enabled"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) Enabled() *NetworkInstance_Protocol_Pim_Interface_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Interval at which the router sends the PIM hello messages.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/hello-interval"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) HelloInterval() *NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_HelloIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Interval at which the router sends the PIM hello messages.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/hello-interval"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) HelloInterval() *NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_HelloIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Reference to an interface on which PIM is enabled.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) InterfaceId() *NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Reference to an interface on which PIM is enabled.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) InterfaceId() *NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) InterfaceRef() *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) InterfaceRef() *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// JoinPruneInterval (leaf): Interval at which the router sends the PIM join/prune messages
// toward the upstream RPF neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/join-prune-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/join-prune-interval"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) JoinPruneInterval() *NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "join-prune-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// JoinPruneInterval (leaf): Interval at which the router sends the PIM join/prune messages
// toward the upstream RPF neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/join-prune-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/join-prune-interval"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) JoinPruneInterval() *NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_JoinPruneIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "join-prune-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaximumGroups (leaf): Limit the number of (S, G) and (*, G) PIM
// entries accepted on the interface.
// This feature depends on hardware implementation.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) MaximumGroups() *NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-groups"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaximumGroups (leaf): Limit the number of (S, G) and (*, G) PIM
// entries accepted on the interface.
// This feature depends on hardware implementation.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/maximum-groups"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) MaximumGroups() *NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_MaximumGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-groups"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): PIM mode to use when delivering multicast traffic via this
// interface.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/mode"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) Mode() *NetworkInstance_Protocol_Pim_Interface_ModePath {
	ps := &NetworkInstance_Protocol_Pim_Interface_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): PIM mode to use when delivering multicast traffic via this
// interface.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/*/mode"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) Mode() *NetworkInstance_Protocol_Pim_Interface_ModePathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAny (list): Details about a specific PIM neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) NeighborAny() *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): Details about a specific PIM neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) NeighborAny() *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): Details about a specific PIM neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
//
//	NeighborAddress: string
func (n *NetworkInstance_Protocol_Pim_InterfacePath) Neighbor(NeighborAddress string) *NetworkInstance_Protocol_Pim_Interface_NeighborPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": NeighborAddress},
			n,
		),
	}
	return ps
}

// Neighbor (list): Details about a specific PIM neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
//
//	NeighborAddress: string
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) Neighbor(NeighborAddress string) *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"neighbor-address": NeighborAddress},
			n,
		),
	}
	return ps
}

// NeighborMap (list): Details about a specific PIM neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Pim_InterfacePath) NeighborMap() *NetworkInstance_Protocol_Pim_Interface_NeighborPathMap {
	ps := &NetworkInstance_Protocol_Pim_Interface_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): Details about a specific PIM neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) NeighborMap() *NetworkInstance_Protocol_Pim_Interface_NeighborPathMapAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Pim_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Pim_Interface](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface](
		"NetworkInstance_Protocol_Pim_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface](
		"NetworkInstance_Protocol_Pim",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface](
		"NetworkInstance_Protocol_Pim",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface](
		"NetworkInstance_Protocol_Pim",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface](
		"NetworkInstance_Protocol_Pim",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bootstrap-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootstrap-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Counters).BootstrapMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bootstrap-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bootstrap-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Counters).BootstrapMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"hello-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Counters).HelloMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"hello-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Counters).HelloMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "join-prune-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"join-prune-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Counters).JoinPruneMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "join-prune-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"join-prune-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Counters).JoinPruneMessages
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// BootstrapMessages (leaf): Number of bootstrap router messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bootstrap-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPath) BootstrapMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootstrap-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootstrapMessages (leaf): Number of bootstrap router messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bootstrap-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/bootstrap-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPathAny) BootstrapMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_Counters_BootstrapMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootstrap-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloMessages (leaf): Number of hello messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPath) HelloMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloMessages (leaf): Number of hello messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/hello-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPathAny) HelloMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_Counters_HelloMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// JoinPruneMessages (leaf): Number of join/prune messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "join-prune-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPath) JoinPruneMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"join-prune-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// JoinPruneMessages (leaf): Number of join/prune messages received.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "join-prune-messages"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters/join-prune-messages"
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPathAny) JoinPruneMessages() *NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_Counters_JoinPruneMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"join-prune-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface_Counters](
		"NetworkInstance_Protocol_Pim_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_Counters](
		"NetworkInstance_Protocol_Pim_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/desired-minimum-tx-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/desired-minimum-tx-interval YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/detection-multiplier YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/detection-multiplier YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/detection-multiplier"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/detection-multiplier"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/detection-multiplier"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/detection-multiplier"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/enabled YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/enabled YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/required-minimum-receive YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/required-minimum-receive YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/required-minimum-receive"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/state/required-minimum-receive"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/required-minimum-receive"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/config/required-minimum-receive"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny struct {
	*ygnmi.NodePath
}

// DesiredMinimumTxInterval (leaf): The minimum interval between transmission of BFD control
// packets that the operator desires. This value is advertised to
// the peer, however the actual interval used is specified by
// taking the maximum of desired-minimum-tx-interval and the
// value of the remote required-minimum-receive interval value.
// This value is specified as an integer number of microseconds.
// The value 0 is reserved and cannot be used.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/*/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPath) DesiredMinimumTxInterval() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "desired-minimum-tx-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DesiredMinimumTxInterval (leaf): The minimum interval between transmission of BFD control
// packets that the operator desires. This value is advertised to
// the peer, however the actual interval used is specified by
// taking the maximum of desired-minimum-tx-interval and the
// value of the remote required-minimum-receive interval value.
// This value is specified as an integer number of microseconds.
// The value 0 is reserved and cannot be used.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/*/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny) DesiredMinimumTxInterval() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "desired-minimum-tx-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectionMultiplier (leaf): The number of packets that must be missed to declare this
// session as down. The detection interval for the BFD session
// is calculated by multiplying the value of the negotiated
// transmission interval by this value.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/*/detection-multiplier"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPath) DetectionMultiplier() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detection-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectionMultiplier (leaf): The number of packets that must be missed to declare this
// session as down. The detection interval for the BFD session
// is calculated by multiplying the value of the negotiated
// transmission interval by this value.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/*/detection-multiplier"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny) DetectionMultiplier() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfd_DetectionMultiplierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detection-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/*/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPath) Enabled() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/*/enabled"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny) Enabled() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfd_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequiredMinimumReceive (leaf): The minimum interval between received BFD control packets that
// this system should support. This value is advertised to the
// remote peer to indicate the maximum frequency (i.e., minimum
// inter-packet interval) between BFD control packets that is
// acceptable to the local system.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/*/required-minimum-receive"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPath) RequiredMinimumReceive() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePath {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "required-minimum-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequiredMinimumReceive (leaf): The minimum interval between received BFD control packets that
// this system should support. This value is advertised to the
// remote peer to indicate the maximum frequency (i.e., minimum
// inter-packet interval) between BFD control packets that is
// acceptable to the local system.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd/*/required-minimum-receive"
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny) RequiredMinimumReceive() *NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_EnableBfd_RequiredMinimumReceivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "required-minimum-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_EnableBfdPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_EnableBfd](
		"NetworkInstance_Protocol_Pim_Interface_EnableBfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath) Interface() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Pim_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dr-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dr-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).DrAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dr-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dr-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).DrAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePath) State() ygnmi.SingletonQuery[oc.E_PimTypes_PIM_MODE] {
	return ygnmi.NewSingletonQuery[oc.E_PimTypes_PIM_MODE](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PimTypes_PIM_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePathAny) State() ygnmi.WildcardQuery[oc.E_PimTypes_PIM_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_PimTypes_PIM_MODE](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PimTypes_PIM_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-address YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-address YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-address"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).NeighborAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-address"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).NeighborAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbor-address"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"neighbor-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).NeighborAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbor-address"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"neighbor-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).NeighborAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-established"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-established"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).NeighborEstablished
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-established"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-established"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).NeighborEstablished
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-expires"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-expires"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).NeighborExpires
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-expires"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires"
func (n *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-expires"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor).NeighborExpires
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Pim_Interface_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_NeighborPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_NeighborPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_NeighborPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_NeighborPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Pim_Interface_NeighborPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// DrAddress (leaf): IPv4 address of designated router.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dr-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) DrAddress() *NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dr-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DrAddress (leaf): IPv4 address of designated router.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dr-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/dr-address"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) DrAddress() *NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_DrAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dr-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): PIM mode in use when delivering multicast traffic
// via this neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) Mode() *NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePath {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): PIM mode in use when delivering multicast traffic
// via this neighbor.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/mode"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) Mode() *NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAddress (leaf): IPv4 address of neighbor router.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/*/neighbor-address"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) NeighborAddress() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborAddress (leaf): IPv4 address of neighbor router.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/*/neighbor-address"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) NeighborAddress() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborEstablished (leaf): This timestamp indicates the time that the
// PIM neighbor adjacency established. It is expressed
// relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// The PIM session uptime can be computed by clients
// as the difference between this value and the
// current time in UTC.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-established"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) NeighborEstablished() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-established"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborEstablished (leaf): This timestamp indicates the time that the
// PIM neighbor adjacency established. It is expressed
// relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// The PIM session uptime can be computed by clients
// as the difference between this value and the
// current time in UTC.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-established"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-established"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) NeighborEstablished() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborEstablishedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-established"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborExpires (leaf): This timestamp indicates the time that the
// PIM neighbor adjacency will expire should hello
// messages fail to arrive from the neighbor. The value
// is expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-expires"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) NeighborExpires() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPath {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-expires"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborExpires (leaf): This timestamp indicates the time that the
// PIM neighbor adjacency will expire should hello
// messages fail to arrive from the neighbor. The value
// is expressed relative to the Unix Epoch (Jan 1, 1970
// 00:00:00 UTC).
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-expires"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor/state/neighbor-expires"
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) NeighborExpires() *NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPathAny {
	ps := &NetworkInstance_Protocol_Pim_Interface_Neighbor_NeighborExpiresPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-expires"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor](
		"NetworkInstance_Protocol_Pim_Interface_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Pim_Interface_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor](
		"NetworkInstance_Protocol_Pim_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Pim_Interface_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Pim_Interface).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Pim_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// NetworkInstance_Protocol_Static_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/state/description YANG schema element.
type NetworkInstance_Protocol_Static_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/state/description YANG schema element.
type NetworkInstance_Protocol_Static_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/state/description"
func (n *NetworkInstance_Protocol_Static_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/state/description"
func (n *NetworkInstance_Protocol_Static_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/config/description"
func (n *NetworkInstance_Protocol_Static_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/config/description"
func (n *NetworkInstance_Protocol_Static_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/state/prefix YANG schema element.
type NetworkInstance_Protocol_Static_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/state/prefix YANG schema element.
type NetworkInstance_Protocol_Static_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/state/prefix"
func (n *NetworkInstance_Protocol_Static_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/state/prefix"
func (n *NetworkInstance_Protocol_Static_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/config/prefix"
func (n *NetworkInstance_Protocol_Static_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/config/prefix"
func (n *NetworkInstance_Protocol_Static_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_SetTagPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/state/set-tag YANG schema element.
type NetworkInstance_Protocol_Static_SetTagPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_SetTagPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/state/set-tag YANG schema element.
type NetworkInstance_Protocol_Static_SetTagPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/state/set-tag"
func (n *NetworkInstance_Protocol_Static_SetTagPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Static_SetTag_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Static_SetTag_Union](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Static_SetTag_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).SetTag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/state/set-tag"
func (n *NetworkInstance_Protocol_Static_SetTagPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Static_SetTag_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Static_SetTag_Union](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Static_SetTag_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).SetTag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag"
func (n *NetworkInstance_Protocol_Static_SetTagPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Protocol_Static_SetTag_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Protocol_Static_SetTag_Union](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Static_SetTag_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).SetTag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag"
func (n *NetworkInstance_Protocol_Static_SetTagPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Static_SetTag_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Static_SetTag_Union](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Static_SetTag_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).SetTag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_StaticPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static YANG schema element.
type NetworkInstance_Protocol_StaticPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_StaticPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static YANG schema element.
type NetworkInstance_Protocol_StaticPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_StaticPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static YANG schema element.
type NetworkInstance_Protocol_StaticPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_StaticPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static YANG schema element.
type NetworkInstance_Protocol_StaticPathMapAny struct {
	*ygnmi.NodePath
}

// Description (leaf): An optional textual description for the route.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/*/description"
func (n *NetworkInstance_Protocol_StaticPath) Description() *NetworkInstance_Protocol_Static_DescriptionPath {
	ps := &NetworkInstance_Protocol_Static_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): An optional textual description for the route.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/*/description"
func (n *NetworkInstance_Protocol_StaticPathAny) Description() *NetworkInstance_Protocol_Static_DescriptionPathAny {
	ps := &NetworkInstance_Protocol_Static_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopAny (list): A list of next-hops to be utilised for the static
// route being specified.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
func (n *NetworkInstance_Protocol_StaticPath) NextHopAny() *NetworkInstance_Protocol_Static_NextHopPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): A list of next-hops to be utilised for the static
// route being specified.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
func (n *NetworkInstance_Protocol_StaticPathAny) NextHopAny() *NetworkInstance_Protocol_Static_NextHopPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): A list of next-hops to be utilised for the static
// route being specified.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
//
//	Index: string
func (n *NetworkInstance_Protocol_StaticPath) NextHop(Index string) *NetworkInstance_Protocol_Static_NextHopPath {
	ps := &NetworkInstance_Protocol_Static_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): A list of next-hops to be utilised for the static
// route being specified.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
//
//	Index: string
func (n *NetworkInstance_Protocol_StaticPathAny) NextHop(Index string) *NetworkInstance_Protocol_Static_NextHopPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): A list of next-hops to be utilised for the static
// route being specified.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
func (n *NetworkInstance_Protocol_StaticPath) NextHopMap() *NetworkInstance_Protocol_Static_NextHopPathMap {
	ps := &NetworkInstance_Protocol_Static_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): A list of next-hops to be utilised for the static
// route being specified.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop"
func (n *NetworkInstance_Protocol_StaticPathAny) NextHopMap() *NetworkInstance_Protocol_Static_NextHopPathMapAny {
	ps := &NetworkInstance_Protocol_Static_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Prefix (leaf): Destination prefix for the static route, either IPv4 or
// IPv6.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/*/prefix"
func (n *NetworkInstance_Protocol_StaticPath) Prefix() *NetworkInstance_Protocol_Static_PrefixPath {
	ps := &NetworkInstance_Protocol_Static_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): Destination prefix for the static route, either IPv4 or
// IPv6.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/*/prefix"
func (n *NetworkInstance_Protocol_StaticPathAny) Prefix() *NetworkInstance_Protocol_Static_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Static_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetTag (leaf): Set a generic tag value on the route. This tag can be
// used for filtering routes that are distributed to other
// routing protocols.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/*/set-tag"
func (n *NetworkInstance_Protocol_StaticPath) SetTag() *NetworkInstance_Protocol_Static_SetTagPath {
	ps := &NetworkInstance_Protocol_Static_SetTagPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-tag"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetTag (leaf): Set a generic tag value on the route. This tag can be
// used for filtering routes that are distributed to other
// routing protocols.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/*/set-tag"
func (n *NetworkInstance_Protocol_StaticPathAny) SetTag() *NetworkInstance_Protocol_Static_SetTagPathAny {
	ps := &NetworkInstance_Protocol_Static_SetTagPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-tag"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_StaticPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Static] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Static](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_StaticPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Static] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Static](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_StaticPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Static] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Static](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_StaticPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Static] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Static](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_StaticPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Static] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Static](
		"NetworkInstance_Protocol",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Static, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Static
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-routes"},
			PostRelPath: []string{"openconfig-network-instance:static"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_StaticPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Static] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Static](
		"NetworkInstance_Protocol",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Static, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Static
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-routes"},
			PostRelPath: []string{"openconfig-network-instance:static"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_StaticPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Static] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Static](
		"NetworkInstance_Protocol",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Static, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Static
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-routes"},
			PostRelPath: []string{"openconfig-network-instance:static"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_StaticPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Static] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Static](
		"NetworkInstance_Protocol",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Static, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Static
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-routes"},
			PostRelPath: []string{"openconfig-network-instance:static"},
		},
	)
}

// NetworkInstance_Protocol_Static_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/index"
func (n *NetworkInstance_Protocol_Static_NextHop_IndexPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Index
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/index"
func (n *NetworkInstance_Protocol_Static_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Index
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/index"
func (n *NetworkInstance_Protocol_Static_NextHop_IndexPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Index
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/index"
func (n *NetworkInstance_Protocol_Static_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Index
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/metric YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/metric YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/metric"
func (n *NetworkInstance_Protocol_Static_NextHop_MetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/metric"
func (n *NetworkInstance_Protocol_Static_NextHop_MetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/metric"
func (n *NetworkInstance_Protocol_Static_NextHop_MetricPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/metric"
func (n *NetworkInstance_Protocol_Static_NextHop_MetricPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/next-hop"
func (n *NetworkInstance_Protocol_Static_NextHop_NextHopPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).NextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/next-hop"
func (n *NetworkInstance_Protocol_Static_NextHop_NextHopPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).NextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop"
func (n *NetworkInstance_Protocol_Static_NextHop_NextHopPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).NextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop"
func (n *NetworkInstance_Protocol_Static_NextHop_NextHopPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Static_NextHop_NextHop_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).NextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/preference YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_PreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/preference YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_PreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/preference"
func (n *NetworkInstance_Protocol_Static_NextHop_PreferencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/preference"
func (n *NetworkInstance_Protocol_Static_NextHop_PreferencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/preference"
func (n *NetworkInstance_Protocol_Static_NextHop_PreferencePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/preference"
func (n *NetworkInstance_Protocol_Static_NextHop_PreferencePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_RecursePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/recurse YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_RecursePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_RecursePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/recurse YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_RecursePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/recurse"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/recurse"
func (n *NetworkInstance_Protocol_Static_NextHop_RecursePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "recurse"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Recurse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/recurse"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/state/recurse"
func (n *NetworkInstance_Protocol_Static_NextHop_RecursePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "recurse"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Recurse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/recurse"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/recurse"
func (n *NetworkInstance_Protocol_Static_NextHop_RecursePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "recurse"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Recurse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/recurse"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/recurse"
func (n *NetworkInstance_Protocol_Static_NextHop_RecursePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "recurse"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop).Recurse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Static_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Static_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Static_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "enable-bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd"
func (n *NetworkInstance_Protocol_Static_NextHopPath) EnableBfd() *NetworkInstance_Protocol_Static_NextHop_EnableBfdPath {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "enable-bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) EnableBfd() *NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Index (leaf): An user-specified identifier utilised to uniquely reference
// the next-hop entry in the next-hop list. The value of this
// index has no semantic meaning other than for referencing
// the entry.  It is observed that implementations typically
// only support a numeric value for this string.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/index"
func (n *NetworkInstance_Protocol_Static_NextHopPath) Index() *NetworkInstance_Protocol_Static_NextHop_IndexPath {
	ps := &NetworkInstance_Protocol_Static_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): An user-specified identifier utilised to uniquely reference
// the next-hop entry in the next-hop list. The value of this
// index has no semantic meaning other than for referencing
// the entry.  It is observed that implementations typically
// only support a numeric value for this string.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/index"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) Index() *NetworkInstance_Protocol_Static_NextHop_IndexPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_Protocol_Static_NextHopPath) InterfaceRef() *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath {
	ps := &NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) InterfaceRef() *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Metric (leaf): A metric (or cost) which is utilized to specify the order of
// selection of the next-hop entry.  The lower the metric, the more
// preferable the prefix entry is.  When this value is not
// specified, the metric is inherited from the default metric of
// the implementation for static route entries.  When multiple
// next-hops are specified for a static route, the metric is
// utilized to determine which of the next-hops to be installed in
// the RIB.  When multiple next-hops have the same metric (be it
// specified, or simply the default) then these next-hops should
// all be installed in the RIB.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/metric"
func (n *NetworkInstance_Protocol_Static_NextHopPath) Metric() *NetworkInstance_Protocol_Static_NextHop_MetricPath {
	ps := &NetworkInstance_Protocol_Static_NextHop_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): A metric (or cost) which is utilized to specify the order of
// selection of the next-hop entry.  The lower the metric, the more
// preferable the prefix entry is.  When this value is not
// specified, the metric is inherited from the default metric of
// the implementation for static route entries.  When multiple
// next-hops are specified for a static route, the metric is
// utilized to determine which of the next-hops to be installed in
// the RIB.  When multiple next-hops have the same metric (be it
// specified, or simply the default) then these next-hops should
// all be installed in the RIB.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/metric"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) Metric() *NetworkInstance_Protocol_Static_NextHop_MetricPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): The next-hop that is to be used for the static route
// - this may be specified as an IP address, an interface
// or a pre-defined next-hop type - for instance, DROP or
// LOCAL_LINK. When this leaf is not set, and the interface-ref
// value is specified for the next-hop, then the system should
// treat the prefix as though it is directly connected to the
// interface.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/next-hop"
func (n *NetworkInstance_Protocol_Static_NextHopPath) NextHop() *NetworkInstance_Protocol_Static_NextHop_NextHopPath {
	ps := &NetworkInstance_Protocol_Static_NextHop_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): The next-hop that is to be used for the static route
// - this may be specified as an IP address, an interface
// or a pre-defined next-hop type - for instance, DROP or
// LOCAL_LINK. When this leaf is not set, and the interface-ref
// value is specified for the next-hop, then the system should
// treat the prefix as though it is directly connected to the
// interface.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/next-hop"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) NextHop() *NetworkInstance_Protocol_Static_NextHop_NextHopPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Administrative Distance (preference) of the entry.  The
// preference defines the order of selection when multiple
// sources (protocols, static, etc.) contribute to the same
// prefix entry.  The lower the preference, the more preferable the
// prefix is.  When this value is not specified, the preference is
// inherited from the default preference of the implementation for
// static routes.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/preference"
func (n *NetworkInstance_Protocol_Static_NextHopPath) Preference() *NetworkInstance_Protocol_Static_NextHop_PreferencePath {
	ps := &NetworkInstance_Protocol_Static_NextHop_PreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Administrative Distance (preference) of the entry.  The
// preference defines the order of selection when multiple
// sources (protocols, static, etc.) contribute to the same
// prefix entry.  The lower the preference, the more preferable the
// prefix is.  When this value is not specified, the preference is
// inherited from the default preference of the implementation for
// static routes.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/preference"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) Preference() *NetworkInstance_Protocol_Static_NextHop_PreferencePathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_PreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Recurse (leaf): Determines whether the next-hop should be allowed to
// be looked up recursively - i.e., via a RIB entry which has
// been installed by a routing protocol, or another static route
// - rather than needing to be connected directly to an
// interface of the local system within the current network
// instance. When the interface reference specified within the
// next-hop entry is set (i.e., is not null) then forwarding is
// restricted to being via the interface specified - and
// recursion is hence disabled.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/recurse"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/recurse"
func (n *NetworkInstance_Protocol_Static_NextHopPath) Recurse() *NetworkInstance_Protocol_Static_NextHop_RecursePath {
	ps := &NetworkInstance_Protocol_Static_NextHop_RecursePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "recurse"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Recurse (leaf): Determines whether the next-hop should be allowed to
// be looked up recursively - i.e., via a RIB entry which has
// been installed by a routing protocol, or another static route
// - rather than needing to be connected directly to an
// interface of the local system within the current network
// instance. When the interface reference specified within the
// next-hop entry is set (i.e., is not null) then forwarding is
// restricted to being via the interface specified - and
// recursion is hence disabled.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/recurse"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/*/recurse"
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) Recurse() *NetworkInstance_Protocol_Static_NextHop_RecursePathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_RecursePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "recurse"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Static_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Static_NextHop](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop](
		"NetworkInstance_Protocol_Static_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHopPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Static_NextHop] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Static_NextHop](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHopPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop](
		"NetworkInstance_Protocol_Static_NextHop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHopPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Static_NextHop] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Static_NextHop](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Static_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Static_NextHop] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Static_NextHop](
		"NetworkInstance_Protocol_Static",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Static_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHopPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Static_NextHop] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Static_NextHop](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Static_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHopPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Static_NextHop] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Static_NextHop](
		"NetworkInstance_Protocol_Static",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Static_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/desired-minimum-tx-interval YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/desired-minimum-tx-interval YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/detection-multiplier YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/detection-multiplier YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/detection-multiplier"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/detection-multiplier"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/detection-multiplier"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/detection-multiplier"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/enabled YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/enabled YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/enabled"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/enabled"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/required-minimum-receive YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/required-minimum-receive YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/required-minimum-receive"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/state/required-minimum-receive"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/required-minimum-receive"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/config/required-minimum-receive"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny struct {
	*ygnmi.NodePath
}

// DesiredMinimumTxInterval (leaf): The minimum interval between transmission of BFD control
// packets that the operator desires. This value is advertised to
// the peer, however the actual interval used is specified by
// taking the maximum of desired-minimum-tx-interval and the
// value of the remote required-minimum-receive interval value.
// This value is specified as an integer number of microseconds.
// The value 0 is reserved and cannot be used.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/*/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPath) DesiredMinimumTxInterval() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPath {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "desired-minimum-tx-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DesiredMinimumTxInterval (leaf): The minimum interval between transmission of BFD control
// packets that the operator desires. This value is advertised to
// the peer, however the actual interval used is specified by
// taking the maximum of desired-minimum-tx-interval and the
// value of the remote required-minimum-receive interval value.
// This value is specified as an integer number of microseconds.
// The value 0 is reserved and cannot be used.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/*/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny) DesiredMinimumTxInterval() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfd_DesiredMinimumTxIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "desired-minimum-tx-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectionMultiplier (leaf): The number of packets that must be missed to declare this
// session as down. The detection interval for the BFD session
// is calculated by multiplying the value of the negotiated
// transmission interval by this value.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/*/detection-multiplier"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPath) DetectionMultiplier() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPath {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detection-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectionMultiplier (leaf): The number of packets that must be missed to declare this
// session as down. The detection interval for the BFD session
// is calculated by multiplying the value of the negotiated
// transmission interval by this value.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/*/detection-multiplier"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny) DetectionMultiplier() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfd_DetectionMultiplierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detection-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/*/enabled"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPath) Enabled() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/*/enabled"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny) Enabled() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfd_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequiredMinimumReceive (leaf): The minimum interval between received BFD control packets that
// this system should support. This value is advertised to the
// remote peer to indicate the maximum frequency (i.e., minimum
// inter-packet interval) between BFD control packets that is
// acceptable to the local system.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/*/required-minimum-receive"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPath) RequiredMinimumReceive() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePath {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "required-minimum-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequiredMinimumReceive (leaf): The minimum interval between received BFD control packets that
// this system should support. This value is advertised to the
// remote peer to indicate the maximum frequency (i.e., minimum
// inter-packet interval) between BFD control packets that is
// acceptable to the local system.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd/*/required-minimum-receive"
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny) RequiredMinimumReceive() *NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_EnableBfd_RequiredMinimumReceivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "required-minimum-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHop_EnableBfdPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop_EnableBfd](
		"NetworkInstance_Protocol_Static_NextHop_EnableBfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/*/interface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath) Interface() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/*/interface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny) Interface() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/*/subinterface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath) Subinterface() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref/*/subinterface"
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny) Subinterface() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Protocol_Static_NextHop_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Static_NextHop_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Static_NextHop_InterfaceRef](
		"NetworkInstance_Protocol_Static_NextHop_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouteLimit_AfiPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/afi YANG schema element.
type NetworkInstance_RouteLimit_AfiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouteLimit_AfiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/afi YANG schema element.
type NetworkInstance_RouteLimit_AfiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/afi"
func (n *NetworkInstance_RouteLimit_AfiPath) State() ygnmi.SingletonQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewSingletonQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).Afi
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/afi"
func (n *NetworkInstance_RouteLimit_AfiPathAny) State() ygnmi.WildcardQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).Afi
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/config/afi"
func (n *NetworkInstance_RouteLimit_AfiPath) Config() ygnmi.ConfigQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewConfigQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_RouteLimit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).Afi
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/config/afi"
func (n *NetworkInstance_RouteLimit_AfiPathAny) Config() ygnmi.WildcardQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_RouteLimit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).Afi
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouteLimit_AlarmThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/alarm-threshold YANG schema element.
type NetworkInstance_RouteLimit_AlarmThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouteLimit_AlarmThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/alarm-threshold YANG schema element.
type NetworkInstance_RouteLimit_AlarmThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/alarm-threshold"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/alarm-threshold"
func (n *NetworkInstance_RouteLimit_AlarmThresholdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alarm-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).AlarmThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/alarm-threshold"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/alarm-threshold"
func (n *NetworkInstance_RouteLimit_AlarmThresholdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alarm-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).AlarmThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/alarm-threshold"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/config/alarm-threshold"
func (n *NetworkInstance_RouteLimit_AlarmThresholdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_RouteLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alarm-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).AlarmThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/alarm-threshold"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/config/alarm-threshold"
func (n *NetworkInstance_RouteLimit_AlarmThresholdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_RouteLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alarm-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).AlarmThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouteLimit_InstalledRoutesPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/installed-routes YANG schema element.
type NetworkInstance_RouteLimit_InstalledRoutesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouteLimit_InstalledRoutesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/installed-routes YANG schema element.
type NetworkInstance_RouteLimit_InstalledRoutesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/installed-routes"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/installed-routes"
func (n *NetworkInstance_RouteLimit_InstalledRoutesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "installed-routes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).InstalledRoutes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/installed-routes"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/installed-routes"
func (n *NetworkInstance_RouteLimit_InstalledRoutesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "installed-routes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).InstalledRoutes
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouteLimit_MaximumPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/maximum YANG schema element.
type NetworkInstance_RouteLimit_MaximumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouteLimit_MaximumPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/maximum YANG schema element.
type NetworkInstance_RouteLimit_MaximumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/maximum"
func (n *NetworkInstance_RouteLimit_MaximumPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).Maximum
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/maximum"
func (n *NetworkInstance_RouteLimit_MaximumPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).Maximum
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/config/maximum"
func (n *NetworkInstance_RouteLimit_MaximumPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_RouteLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).Maximum
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/config/maximum"
func (n *NetworkInstance_RouteLimit_MaximumPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_RouteLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).Maximum
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouteLimit_ThresholdExceededPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded YANG schema element.
type NetworkInstance_RouteLimit_ThresholdExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouteLimit_ThresholdExceededPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded YANG schema element.
type NetworkInstance_RouteLimit_ThresholdExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-exceeded"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded"
func (n *NetworkInstance_RouteLimit_ThresholdExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).ThresholdExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-exceeded"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded"
func (n *NetworkInstance_RouteLimit_ThresholdExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).ThresholdExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouteLimit_WarningOnlyPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/warning-only YANG schema element.
type NetworkInstance_RouteLimit_WarningOnlyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouteLimit_WarningOnlyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit/state/warning-only YANG schema element.
type NetworkInstance_RouteLimit_WarningOnlyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-only"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/warning-only"
func (n *NetworkInstance_RouteLimit_WarningOnlyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).WarningOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/warning-only"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/warning-only"
func (n *NetworkInstance_RouteLimit_WarningOnlyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_RouteLimit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "warning-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).WarningOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-only"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/config/warning-only"
func (n *NetworkInstance_RouteLimit_WarningOnlyPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_RouteLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).WarningOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/warning-only"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/config/warning-only"
func (n *NetworkInstance_RouteLimit_WarningOnlyPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_RouteLimit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "warning-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_RouteLimit).WarningOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_RouteLimit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouteLimitPath represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit YANG schema element.
type NetworkInstance_RouteLimitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_RouteLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit YANG schema element.
type NetworkInstance_RouteLimitPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_RouteLimitPathMap represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit YANG schema element.
type NetworkInstance_RouteLimitPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_RouteLimitPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit YANG schema element.
type NetworkInstance_RouteLimitPathMapAny struct {
	*ygnmi.NodePath
}

// Afi (leaf): The address family for which the route limit applies.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/*/afi"
func (n *NetworkInstance_RouteLimitPath) Afi() *NetworkInstance_RouteLimit_AfiPath {
	ps := &NetworkInstance_RouteLimit_AfiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Afi (leaf): The address family for which the route limit applies.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/*/afi"
func (n *NetworkInstance_RouteLimitPathAny) Afi() *NetworkInstance_RouteLimit_AfiPathAny {
	ps := &NetworkInstance_RouteLimit_AfiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmThreshold (leaf): When specified, an alarm should be generated when the threshold
// number of installed routes is reached.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/alarm-threshold"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/*/alarm-threshold"
func (n *NetworkInstance_RouteLimitPath) AlarmThreshold() *NetworkInstance_RouteLimit_AlarmThresholdPath {
	ps := &NetworkInstance_RouteLimit_AlarmThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alarm-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmThreshold (leaf): When specified, an alarm should be generated when the threshold
// number of installed routes is reached.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/alarm-threshold"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/*/alarm-threshold"
func (n *NetworkInstance_RouteLimitPathAny) AlarmThreshold() *NetworkInstance_RouteLimit_AlarmThresholdPathAny {
	ps := &NetworkInstance_RouteLimit_AlarmThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alarm-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstalledRoutes (leaf): The current number of routes installed for the address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/installed-routes"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/installed-routes"
func (n *NetworkInstance_RouteLimitPath) InstalledRoutes() *NetworkInstance_RouteLimit_InstalledRoutesPath {
	ps := &NetworkInstance_RouteLimit_InstalledRoutesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "installed-routes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstalledRoutes (leaf): The current number of routes installed for the address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/installed-routes"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/installed-routes"
func (n *NetworkInstance_RouteLimitPathAny) InstalledRoutes() *NetworkInstance_RouteLimit_InstalledRoutesPathAny {
	ps := &NetworkInstance_RouteLimit_InstalledRoutesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "installed-routes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Maximum (leaf): The maximum number of routes for the address family. The
// system should not install more than maximum number of
// prefixes into the RIB unless the warning-only leaf is specified.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/*/maximum"
func (n *NetworkInstance_RouteLimitPath) Maximum() *NetworkInstance_RouteLimit_MaximumPath {
	ps := &NetworkInstance_RouteLimit_MaximumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Maximum (leaf): The maximum number of routes for the address family. The
// system should not install more than maximum number of
// prefixes into the RIB unless the warning-only leaf is specified.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/*/maximum"
func (n *NetworkInstance_RouteLimitPathAny) Maximum() *NetworkInstance_RouteLimit_MaximumPathAny {
	ps := &NetworkInstance_RouteLimit_MaximumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdExceeded (leaf): This leaf should be set to true in the case that the threshold
// number of routes has been exceeded.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-exceeded"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded"
func (n *NetworkInstance_RouteLimitPath) ThresholdExceeded() *NetworkInstance_RouteLimit_ThresholdExceededPath {
	ps := &NetworkInstance_RouteLimit_ThresholdExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdExceeded (leaf): This leaf should be set to true in the case that the threshold
// number of routes has been exceeded.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-exceeded"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/state/threshold-exceeded"
func (n *NetworkInstance_RouteLimitPathAny) ThresholdExceeded() *NetworkInstance_RouteLimit_ThresholdExceededPathAny {
	ps := &NetworkInstance_RouteLimit_ThresholdExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningOnly (leaf): When specified, the route limit specified is considered only as
// a warning - and routes should continue to be installed into the
// RIB over the limit specified in the maximum leaf.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-only"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/*/warning-only"
func (n *NetworkInstance_RouteLimitPath) WarningOnly() *NetworkInstance_RouteLimit_WarningOnlyPath {
	ps := &NetworkInstance_RouteLimit_WarningOnlyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WarningOnly (leaf): When specified, the route limit specified is considered only as
// a warning - and routes should continue to be installed into the
// RIB over the limit specified in the maximum leaf.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/warning-only"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit/*/warning-only"
func (n *NetworkInstance_RouteLimitPathAny) WarningOnly() *NetworkInstance_RouteLimit_WarningOnlyPathAny {
	ps := &NetworkInstance_RouteLimit_WarningOnlyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "warning-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_RouteLimitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_RouteLimit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_RouteLimit](
		"NetworkInstance_RouteLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_RouteLimitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_RouteLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_RouteLimit](
		"NetworkInstance_RouteLimit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_RouteLimitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_RouteLimit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_RouteLimit](
		"NetworkInstance_RouteLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_RouteLimitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_RouteLimit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_RouteLimit](
		"NetworkInstance_RouteLimit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_RouteLimitPathMap) State() ygnmi.SingletonQuery[map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit] {
	return ygnmi.NewSingletonQuery[map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit, bool) {
			ret := gs.(*oc.NetworkInstance).RouteLimit
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:route-limits"},
			PostRelPath: []string{"openconfig-network-instance:route-limit"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_RouteLimitPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit] {
	return ygnmi.NewWildcardQuery[map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit, bool) {
			ret := gs.(*oc.NetworkInstance).RouteLimit
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:route-limits"},
			PostRelPath: []string{"openconfig-network-instance:route-limit"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_RouteLimitPathMap) Config() ygnmi.ConfigQuery[map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit] {
	return ygnmi.NewConfigQuery[map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit, bool) {
			ret := gs.(*oc.NetworkInstance).RouteLimit
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:route-limits"},
			PostRelPath: []string{"openconfig-network-instance:route-limit"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_RouteLimitPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit] {
	return ygnmi.NewWildcardQuery[map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Types_ADDRESS_FAMILY]*oc.NetworkInstance_RouteLimit, bool) {
			ret := gs.(*oc.NetworkInstance).RouteLimit
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:route-limits"},
			PostRelPath: []string{"openconfig-network-instance:route-limit"},
		},
	)
}

// NetworkInstance_SegmentRoutingPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing YANG schema element.
type NetworkInstance_SegmentRoutingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRoutingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing YANG schema element.
type NetworkInstance_SegmentRoutingPathAny struct {
	*ygnmi.NodePath
}

// SrgbAny (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgbs/srgb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb"
func (n *NetworkInstance_SegmentRoutingPath) SrgbAny() *NetworkInstance_SegmentRouting_SrgbPathAny {
	ps := &NetworkInstance_SegmentRouting_SrgbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgbs", "srgb"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
	return ps
}

// SrgbAny (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgbs/srgb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb"
func (n *NetworkInstance_SegmentRoutingPathAny) SrgbAny() *NetworkInstance_SegmentRouting_SrgbPathAny {
	ps := &NetworkInstance_SegmentRouting_SrgbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgbs", "srgb"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
	return ps
}

// Srgb (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgbs/srgb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb"
//
//	LocalId: string
func (n *NetworkInstance_SegmentRoutingPath) Srgb(LocalId string) *NetworkInstance_SegmentRouting_SrgbPath {
	ps := &NetworkInstance_SegmentRouting_SrgbPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgbs", "srgb"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
	return ps
}

// Srgb (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgbs/srgb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb"
//
//	LocalId: string
func (n *NetworkInstance_SegmentRoutingPathAny) Srgb(LocalId string) *NetworkInstance_SegmentRouting_SrgbPathAny {
	ps := &NetworkInstance_SegmentRouting_SrgbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgbs", "srgb"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
	return ps
}

// SrgbMap (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgbs/srgb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb"
func (n *NetworkInstance_SegmentRoutingPath) SrgbMap() *NetworkInstance_SegmentRouting_SrgbPathMap {
	ps := &NetworkInstance_SegmentRouting_SrgbPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgbs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrgbMap (list): A single definition of an SRGB which may comprise of multiple
// sets of dataplane addresses (IPv6 addresses, or MPLS labels).
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgbs/srgb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb"
func (n *NetworkInstance_SegmentRoutingPathAny) SrgbMap() *NetworkInstance_SegmentRouting_SrgbPathMapAny {
	ps := &NetworkInstance_SegmentRouting_SrgbPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgbs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrlbAny (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlbs/srlb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb"
func (n *NetworkInstance_SegmentRoutingPath) SrlbAny() *NetworkInstance_SegmentRouting_SrlbPathAny {
	ps := &NetworkInstance_SegmentRouting_SrlbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlbs", "srlb"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
	return ps
}

// SrlbAny (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlbs/srlb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb"
func (n *NetworkInstance_SegmentRoutingPathAny) SrlbAny() *NetworkInstance_SegmentRouting_SrlbPathAny {
	ps := &NetworkInstance_SegmentRouting_SrlbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlbs", "srlb"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
	return ps
}

// Srlb (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlbs/srlb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb"
//
//	LocalId: string
func (n *NetworkInstance_SegmentRoutingPath) Srlb(LocalId string) *NetworkInstance_SegmentRouting_SrlbPath {
	ps := &NetworkInstance_SegmentRouting_SrlbPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlbs", "srlb"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
	return ps
}

// Srlb (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlbs/srlb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb"
//
//	LocalId: string
func (n *NetworkInstance_SegmentRoutingPathAny) Srlb(LocalId string) *NetworkInstance_SegmentRouting_SrlbPathAny {
	ps := &NetworkInstance_SegmentRouting_SrlbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlbs", "srlb"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
	return ps
}

// SrlbMap (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlbs/srlb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb"
func (n *NetworkInstance_SegmentRoutingPath) SrlbMap() *NetworkInstance_SegmentRouting_SrlbPathMap {
	ps := &NetworkInstance_SegmentRouting_SrlbPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlbs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrlbMap (list): A definition of a Segment Routing Local Block, defined to be
// a set of Segment Identifiers (specified as MPLS labels or
// IPv6 addreses) that are defined for local allocation by the
// system. A block may optionally be advertised into an IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlbs/srlb"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb"
func (n *NetworkInstance_SegmentRoutingPathAny) SrlbMap() *NetworkInstance_SegmentRouting_SrlbPathMapAny {
	ps := &NetworkInstance_SegmentRouting_SrlbPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlbs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TePolicyAny (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-policies/te-policy"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy"
func (n *NetworkInstance_SegmentRoutingPath) TePolicyAny() *NetworkInstance_SegmentRouting_TePolicyPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": "*", "endpoint": "*"},
			n,
		),
	}
	return ps
}

// TePolicyAny (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-policies/te-policy"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy"
func (n *NetworkInstance_SegmentRoutingPathAny) TePolicyAny() *NetworkInstance_SegmentRouting_TePolicyPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": "*", "endpoint": "*"},
			n,
		),
	}
	return ps
}

// WithColor sets NetworkInstance_SegmentRouting_TePolicyPathAny's key "color" to the specified value.
// Color: uint32
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) WithColor(Color uint32) *NetworkInstance_SegmentRouting_TePolicyPathAny {
	ygnmi.ModifyKey(n.NodePath, "color", Color)
	return n
}

// WithEndpoint sets NetworkInstance_SegmentRouting_TePolicyPathAny's key "endpoint" to the specified value.
// Endpoint: string
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) WithEndpoint(Endpoint string) *NetworkInstance_SegmentRouting_TePolicyPathAny {
	ygnmi.ModifyKey(n.NodePath, "endpoint", Endpoint)
	return n
}

// TePolicy (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-policies/te-policy"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy"
//
//	Color: uint32
//	Endpoint: string
func (n *NetworkInstance_SegmentRoutingPath) TePolicy(Color uint32, Endpoint string) *NetworkInstance_SegmentRouting_TePolicyPath {
	ps := &NetworkInstance_SegmentRouting_TePolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": Color, "endpoint": Endpoint},
			n,
		),
	}
	return ps
}

// TePolicy (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-policies/te-policy"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy"
//
//	Color: uint32
//	Endpoint: string
func (n *NetworkInstance_SegmentRoutingPathAny) TePolicy(Color uint32, Endpoint string) *NetworkInstance_SegmentRouting_TePolicyPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-policies", "te-policy"},
			map[string]interface{}{"color": Color, "endpoint": Endpoint},
			n,
		),
	}
	return ps
}

// TePolicyMap (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-policies/te-policy"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy"
func (n *NetworkInstance_SegmentRoutingPath) TePolicyMap() *NetworkInstance_SegmentRouting_TePolicyPathMap {
	ps := &NetworkInstance_SegmentRouting_TePolicyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TePolicyMap (list): An individual SR-TE policy is identified by a combination
// of color and endpoint.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-policies/te-policy"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy"
func (n *NetworkInstance_SegmentRoutingPathAny) TePolicyMap() *NetworkInstance_SegmentRouting_TePolicyPathMapAny {
	ps := &NetworkInstance_SegmentRouting_TePolicyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRoutingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting](
		"NetworkInstance_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRoutingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting](
		"NetworkInstance_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRoutingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_SegmentRouting] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_SegmentRouting](
		"NetworkInstance_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRoutingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting](
		"NetworkInstance_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/dataplane-type YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/dataplane-type YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/dataplane-type"
func (n *NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath) State() ygnmi.SingletonQuery[oc.E_SegmentRoutingTypes_SrDataplaneType] {
	return ygnmi.NewSingletonQuery[oc.E_SegmentRoutingTypes_SrDataplaneType](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dataplane-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrDataplaneType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).DataplaneType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/dataplane-type"
func (n *NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny) State() ygnmi.WildcardQuery[oc.E_SegmentRoutingTypes_SrDataplaneType] {
	return ygnmi.NewWildcardQuery[oc.E_SegmentRoutingTypes_SrDataplaneType](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dataplane-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrDataplaneType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).DataplaneType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/config/dataplane-type"
func (n *NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath) Config() ygnmi.ConfigQuery[oc.E_SegmentRoutingTypes_SrDataplaneType] {
	return ygnmi.NewConfigQuery[oc.E_SegmentRoutingTypes_SrDataplaneType](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dataplane-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrDataplaneType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).DataplaneType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/config/dataplane-type"
func (n *NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny) Config() ygnmi.WildcardQuery[oc.E_SegmentRoutingTypes_SrDataplaneType] {
	return ygnmi.NewWildcardQuery[oc.E_SegmentRoutingTypes_SrDataplaneType](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dataplane-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrDataplaneType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).DataplaneType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/ipv6-prefixes YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/ipv6-prefixes YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-prefixes"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/ipv6-prefixes"
func (n *NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).Ipv6Prefixes
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-prefixes"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/ipv6-prefixes"
func (n *NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).Ipv6Prefixes
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ipv6-prefixes"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/config/ipv6-prefixes"
func (n *NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).Ipv6Prefixes
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ipv6-prefixes"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/config/ipv6-prefixes"
func (n *NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).Ipv6Prefixes
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_Srgb_LocalIdPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/local-id YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_LocalIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/local-id YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/local-id"
func (n *NetworkInstance_SegmentRouting_Srgb_LocalIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/local-id"
func (n *NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/config/local-id"
func (n *NetworkInstance_SegmentRouting_Srgb_LocalIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/config/local-id"
func (n *NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/mpls-label-blocks YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/mpls-label-blocks YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label-blocks"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/mpls-label-blocks"
func (n *NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).MplsLabelBlocks
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label-blocks"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/mpls-label-blocks"
func (n *NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).MplsLabelBlocks
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-label-blocks"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/config/mpls-label-blocks"
func (n *NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-label-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).MplsLabelBlocks
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-label-blocks"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/config/mpls-label-blocks"
func (n *NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-label-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).MplsLabelBlocks
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_Srgb_SizePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/size YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_SizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srgb_SizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/size YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_SizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/size"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/size"
func (n *NetworkInstance_SegmentRouting_Srgb_SizePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).Size
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/size"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/size"
func (n *NetworkInstance_SegmentRouting_Srgb_SizePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).Size
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_Srgb_UsedPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/used YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_UsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srgb_UsedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb/state/used YANG schema element.
type NetworkInstance_SegmentRouting_Srgb_UsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/used"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/used"
func (n *NetworkInstance_SegmentRouting_Srgb_UsedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).Used
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/used"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/used"
func (n *NetworkInstance_SegmentRouting_Srgb_UsedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srgb).Used
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srgb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_SrgbPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb YANG schema element.
type NetworkInstance_SegmentRouting_SrgbPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_SrgbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb YANG schema element.
type NetworkInstance_SegmentRouting_SrgbPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_SrgbPathMap represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb YANG schema element.
type NetworkInstance_SegmentRouting_SrgbPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_SrgbPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb YANG schema element.
type NetworkInstance_SegmentRouting_SrgbPathMapAny struct {
	*ygnmi.NodePath
}

// DataplaneType (leaf): The dataplane being used to instantiate the SRGB. When MPLS is specified
// the set of MPLS label blocks that are defined in the mpls-label-blocks
// list are used to make up the SRGB. When IPv6 is specified, the set of IPv6
// prefixes specified in the ipv6-prefixes list are used.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/*/dataplane-type"
func (n *NetworkInstance_SegmentRouting_SrgbPath) DataplaneType() *NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath {
	ps := &NetworkInstance_SegmentRouting_Srgb_DataplaneTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dataplane-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataplaneType (leaf): The dataplane being used to instantiate the SRGB. When MPLS is specified
// the set of MPLS label blocks that are defined in the mpls-label-blocks
// list are used to make up the SRGB. When IPv6 is specified, the set of IPv6
// prefixes specified in the ipv6-prefixes list are used.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/*/dataplane-type"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) DataplaneType() *NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny {
	ps := &NetworkInstance_SegmentRouting_Srgb_DataplaneTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dataplane-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Prefixes (leaf-list): A list of IPv6 prefixes which are to be used for segment routing using
// the IPv6 dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ipv6-prefixes"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/*/ipv6-prefixes"
func (n *NetworkInstance_SegmentRouting_SrgbPath) Ipv6Prefixes() *NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath {
	ps := &NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Prefixes (leaf-list): A list of IPv6 prefixes which are to be used for segment routing using
// the IPv6 dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ipv6-prefixes"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/*/ipv6-prefixes"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) Ipv6Prefixes() *NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny {
	ps := &NetworkInstance_SegmentRouting_Srgb_Ipv6PrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalId (leaf): Unique identifier for the segment routing global block on
// the local system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/*/local-id"
func (n *NetworkInstance_SegmentRouting_SrgbPath) LocalId() *NetworkInstance_SegmentRouting_Srgb_LocalIdPath {
	ps := &NetworkInstance_SegmentRouting_Srgb_LocalIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalId (leaf): Unique identifier for the segment routing global block on
// the local system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/*/local-id"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) LocalId() *NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny {
	ps := &NetworkInstance_SegmentRouting_Srgb_LocalIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabelBlocks (leaf-list): A list of refences to the label blocks that are used to make
// up the SRGB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label-blocks"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/*/mpls-label-blocks"
func (n *NetworkInstance_SegmentRouting_SrgbPath) MplsLabelBlocks() *NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath {
	ps := &NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabelBlocks (leaf-list): A list of refences to the label blocks that are used to make
// up the SRGB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label-blocks"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/*/mpls-label-blocks"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) MplsLabelBlocks() *NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny {
	ps := &NetworkInstance_SegmentRouting_Srgb_MplsLabelBlocksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The total number of SRGB entries that are available within the SRGB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/size"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/size"
func (n *NetworkInstance_SegmentRouting_SrgbPath) Size() *NetworkInstance_SegmentRouting_Srgb_SizePath {
	ps := &NetworkInstance_SegmentRouting_Srgb_SizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The total number of SRGB entries that are available within the SRGB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/size"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/size"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) Size() *NetworkInstance_SegmentRouting_Srgb_SizePathAny {
	ps := &NetworkInstance_SegmentRouting_Srgb_SizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): The total number of SRGB entries that have already been alocated by
// protocols referencing the SRGB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/used"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/used"
func (n *NetworkInstance_SegmentRouting_SrgbPath) Used() *NetworkInstance_SegmentRouting_Srgb_UsedPath {
	ps := &NetworkInstance_SegmentRouting_Srgb_UsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): The total number of SRGB entries that have already been alocated by
// protocols referencing the SRGB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/used"
//	Path from root:       "/network-instances/network-instance/segment-routing/srgbs/srgb/state/used"
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) Used() *NetworkInstance_SegmentRouting_Srgb_UsedPathAny {
	ps := &NetworkInstance_SegmentRouting_Srgb_UsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrgbPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_Srgb] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_Srgb](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_Srgb] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_Srgb](
		"NetworkInstance_SegmentRouting_Srgb",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrgbPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_SegmentRouting_Srgb] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_SegmentRouting_Srgb](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrgbPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_Srgb] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_Srgb](
		"NetworkInstance_SegmentRouting_Srgb",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrgbPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srgb] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srgb](
		"NetworkInstance_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_SegmentRouting_Srgb, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).Srgb
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srgbs"},
			PostRelPath: []string{"openconfig-network-instance:srgb"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrgbPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srgb] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srgb](
		"NetworkInstance_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_SegmentRouting_Srgb, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).Srgb
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srgbs"},
			PostRelPath: []string{"openconfig-network-instance:srgb"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrgbPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srgb] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srgb](
		"NetworkInstance_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_SegmentRouting_Srgb, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).Srgb
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srgbs"},
			PostRelPath: []string{"openconfig-network-instance:srgb"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrgbPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srgb] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srgb](
		"NetworkInstance_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_SegmentRouting_Srgb, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).Srgb
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srgbs"},
			PostRelPath: []string{"openconfig-network-instance:srgb"},
		},
	)
}

// NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/state/dataplane-type YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/state/dataplane-type YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/state/dataplane-type"
func (n *NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath) State() ygnmi.SingletonQuery[oc.E_SegmentRoutingTypes_SrDataplaneType] {
	return ygnmi.NewSingletonQuery[oc.E_SegmentRoutingTypes_SrDataplaneType](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dataplane-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrDataplaneType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).DataplaneType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/state/dataplane-type"
func (n *NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny) State() ygnmi.WildcardQuery[oc.E_SegmentRoutingTypes_SrDataplaneType] {
	return ygnmi.NewWildcardQuery[oc.E_SegmentRoutingTypes_SrDataplaneType](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dataplane-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrDataplaneType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).DataplaneType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/config/dataplane-type"
func (n *NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath) Config() ygnmi.ConfigQuery[oc.E_SegmentRoutingTypes_SrDataplaneType] {
	return ygnmi.NewConfigQuery[oc.E_SegmentRoutingTypes_SrDataplaneType](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dataplane-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrDataplaneType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).DataplaneType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/config/dataplane-type"
func (n *NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny) Config() ygnmi.WildcardQuery[oc.E_SegmentRoutingTypes_SrDataplaneType] {
	return ygnmi.NewWildcardQuery[oc.E_SegmentRoutingTypes_SrDataplaneType](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dataplane-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrDataplaneType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).DataplaneType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/state/ipv6-prefix YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/state/ipv6-prefix YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-prefix"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/state/ipv6-prefix"
func (n *NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).Ipv6Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-prefix"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/state/ipv6-prefix"
func (n *NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).Ipv6Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ipv6-prefix"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/config/ipv6-prefix"
func (n *NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).Ipv6Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ipv6-prefix"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/config/ipv6-prefix"
func (n *NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).Ipv6Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_Srlb_LocalIdPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/state/local-id YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_LocalIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/state/local-id YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/state/local-id"
func (n *NetworkInstance_SegmentRouting_Srlb_LocalIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/state/local-id"
func (n *NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/config/local-id"
func (n *NetworkInstance_SegmentRouting_Srlb_LocalIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/config/local-id"
func (n *NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/state/mpls-label-block YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb/state/mpls-label-block YANG schema element.
type NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label-block"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/state/mpls-label-block"
func (n *NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label-block"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).MplsLabelBlock
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label-block"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/state/mpls-label-block"
func (n *NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label-block"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).MplsLabelBlock
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-label-block"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/config/mpls-label-block"
func (n *NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-label-block"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).MplsLabelBlock
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-label-block"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/config/mpls-label-block"
func (n *NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-label-block"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_Srlb).MplsLabelBlock
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_Srlb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_SrlbPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb YANG schema element.
type NetworkInstance_SegmentRouting_SrlbPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_SrlbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb YANG schema element.
type NetworkInstance_SegmentRouting_SrlbPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_SrlbPathMap represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb YANG schema element.
type NetworkInstance_SegmentRouting_SrlbPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_SrlbPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb YANG schema element.
type NetworkInstance_SegmentRouting_SrlbPathMapAny struct {
	*ygnmi.NodePath
}

// DataplaneType (leaf): The dataplane that is to be used for the Segment Routing Local Block.
// When MPLS is specified, the local block corresponds to a block of MPLS
// labels; when IPv6 is specified it corresponds to an IPv6 prefix.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/*/dataplane-type"
func (n *NetworkInstance_SegmentRouting_SrlbPath) DataplaneType() *NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath {
	ps := &NetworkInstance_SegmentRouting_Srlb_DataplaneTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dataplane-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataplaneType (leaf): The dataplane that is to be used for the Segment Routing Local Block.
// When MPLS is specified, the local block corresponds to a block of MPLS
// labels; when IPv6 is specified it corresponds to an IPv6 prefix.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dataplane-type"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/*/dataplane-type"
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) DataplaneType() *NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny {
	ps := &NetworkInstance_SegmentRouting_Srlb_DataplaneTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dataplane-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Prefix (leaf): The IPv6 prefix that is used for the SRLB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ipv6-prefix"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/*/ipv6-prefix"
func (n *NetworkInstance_SegmentRouting_SrlbPath) Ipv6Prefix() *NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath {
	ps := &NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Prefix (leaf): The IPv6 prefix that is used for the SRLB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ipv6-prefix"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/*/ipv6-prefix"
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) Ipv6Prefix() *NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny {
	ps := &NetworkInstance_SegmentRouting_Srlb_Ipv6PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalId (leaf): A unique local identifier used for the Segment Routing Local Block.
// The identifier is used when referencing the SRLB within other
// contexts.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/*/local-id"
func (n *NetworkInstance_SegmentRouting_SrlbPath) LocalId() *NetworkInstance_SegmentRouting_Srlb_LocalIdPath {
	ps := &NetworkInstance_SegmentRouting_Srlb_LocalIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalId (leaf): A unique local identifier used for the Segment Routing Local Block.
// The identifier is used when referencing the SRLB within other
// contexts.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-id"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/*/local-id"
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) LocalId() *NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny {
	ps := &NetworkInstance_SegmentRouting_Srlb_LocalIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabelBlock (leaf): A reference to the MPLS label block that is used to contain the
// SIDs of the SRLB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label-block"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/*/mpls-label-block"
func (n *NetworkInstance_SegmentRouting_SrlbPath) MplsLabelBlock() *NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath {
	ps := &NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label-block"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabelBlock (leaf): A reference to the MPLS label block that is used to contain the
// SIDs of the SRLB.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label-block"
//	Path from root:       "/network-instances/network-instance/segment-routing/srlbs/srlb/*/mpls-label-block"
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) MplsLabelBlock() *NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny {
	ps := &NetworkInstance_SegmentRouting_Srlb_MplsLabelBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label-block"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrlbPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_Srlb] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_Srlb](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_Srlb] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_Srlb](
		"NetworkInstance_SegmentRouting_Srlb",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrlbPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_SegmentRouting_Srlb] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_SegmentRouting_Srlb](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrlbPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_Srlb] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_Srlb](
		"NetworkInstance_SegmentRouting_Srlb",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrlbPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srlb] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srlb](
		"NetworkInstance_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_SegmentRouting_Srlb, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).Srlb
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlbs"},
			PostRelPath: []string{"openconfig-network-instance:srlb"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrlbPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srlb] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srlb](
		"NetworkInstance_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_SegmentRouting_Srlb, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).Srlb
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlbs"},
			PostRelPath: []string{"openconfig-network-instance:srlb"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrlbPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srlb] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srlb](
		"NetworkInstance_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_SegmentRouting_Srlb, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).Srlb
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlbs"},
			PostRelPath: []string{"openconfig-network-instance:srlb"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_SrlbPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srlb] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_SegmentRouting_Srlb](
		"NetworkInstance_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_SegmentRouting_Srlb, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).Srlb
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlbs"},
			PostRelPath: []string{"openconfig-network-instance:srlb"},
		},
	)
}

// NetworkInstance_SegmentRouting_TePolicy_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicy_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicy_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_ActiveSincePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActiveSincePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_ActiveSincePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActiveSincePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-since"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicy_ActiveSincePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-since"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).ActiveSince
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-since"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicy_ActiveSincePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-since"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).ActiveSince
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-transitions"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).ActiveTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-transitions"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).ActiveTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_BsidPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_BsidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_BsidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_BsidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bsid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid"
func (n *NetworkInstance_SegmentRouting_TePolicy_BsidPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_SegmentRouting_TePolicy_Bsid_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_SegmentRouting_TePolicy_Bsid_Union](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bsid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_SegmentRouting_TePolicy_Bsid_Union, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Bsid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bsid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid"
func (n *NetworkInstance_SegmentRouting_TePolicy_BsidPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_SegmentRouting_TePolicy_Bsid_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_SegmentRouting_TePolicy_Bsid_Union](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bsid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_SegmentRouting_TePolicy_Bsid_Union, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Bsid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_ColorPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/color YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ColorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_ColorPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/color YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_ColorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/color"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/color"
func (n *NetworkInstance_SegmentRouting_TePolicy_ColorPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "color"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Color
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/color"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/color"
func (n *NetworkInstance_SegmentRouting_TePolicy_ColorPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "color"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Color
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "color"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_ColorPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"color"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Color
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "color"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_ColorPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"color"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Color
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_EndpointPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/endpoint YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_EndpointPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/endpoint YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/endpoint"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/endpoint"
func (n *NetworkInstance_SegmentRouting_TePolicy_EndpointPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Endpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/endpoint"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/endpoint"
func (n *NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Endpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_EndpointPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Endpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Endpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_NamePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicy_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicy_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicyPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy YANG schema element.
type NetworkInstance_SegmentRouting_TePolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy YANG schema element.
type NetworkInstance_SegmentRouting_TePolicyPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicyPathMap represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy YANG schema element.
type NetworkInstance_SegmentRouting_TePolicyPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicyPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy YANG schema element.
type NetworkInstance_SegmentRouting_TePolicyPathMapAny struct {
	*ygnmi.NodePath
}

// Active (leaf): A SR-TE policy is marked as active when at least one of its
// candidate paths is valid/active and the policy has been
// instantiated in the forwarding plane.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Active() *NetworkInstance_SegmentRouting_TePolicy_ActivePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): A SR-TE policy is marked as active when at least one of its
// candidate paths is valid/active and the policy has been
// instantiated in the forwarding plane.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Active() *NetworkInstance_SegmentRouting_TePolicy_ActivePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveSince (leaf): Indication of the time the policy transitioned to the active
// state.
//
// The value is the timestamp in nanoseconds relative to the Unix
// Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-since"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) ActiveSince() *NetworkInstance_SegmentRouting_TePolicy_ActiveSincePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_ActiveSincePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-since"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveSince (leaf): Indication of the time the policy transitioned to the active
// state.
//
// The value is the timestamp in nanoseconds relative to the Unix
// Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-since"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) ActiveSince() *NetworkInstance_SegmentRouting_TePolicy_ActiveSincePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_ActiveSincePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-since"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTransitions (leaf): The number of transitions to active state for the policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-transitions"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) ActiveTransitions() *NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTransitions (leaf): The number of transitions to active state for the policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-transitions"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) ActiveTransitions() *NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_ActiveTransitionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bsid (leaf): The Binding SID (BSID) assigned to the SR-TE policy,
// expressed as an MPLS label or IPv6 address. Packets that are
// ingress to the system with active segment matching the SID
// value specified in this leaf should be forwarded according
// to the policy. The specified Binding SID must be removed
// from the segment list by the system.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bsid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Bsid() *NetworkInstance_SegmentRouting_TePolicy_BsidPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_BsidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bsid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bsid (leaf): The Binding SID (BSID) assigned to the SR-TE policy,
// expressed as an MPLS label or IPv6 address. Packets that are
// ingress to the system with active segment matching the SID
// value specified in this leaf should be forwarded according
// to the policy. The specified Binding SID must be removed
// from the segment list by the system.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bsid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/bsid"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Bsid() *NetworkInstance_SegmentRouting_TePolicy_BsidPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_BsidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bsid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CandidatePathAny (list): An individual candidate path within the list of candidate
// paths associated with this SR-TE policy. It is uniquely
// identified by the combination of protocol-origin,
// originator and discriminator
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-paths/candidate-path"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) CandidatePathAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-paths", "candidate-path"},
			map[string]interface{}{"protocol-origin": "*", "originator-asn": "*", "originator-addr": "*", "discriminator": "*"},
			n,
		),
	}
	return ps
}

// CandidatePathAny (list): An individual candidate path within the list of candidate
// paths associated with this SR-TE policy. It is uniquely
// identified by the combination of protocol-origin,
// originator and discriminator
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-paths/candidate-path"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) CandidatePathAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-paths", "candidate-path"},
			map[string]interface{}{"protocol-origin": "*", "originator-asn": "*", "originator-addr": "*", "discriminator": "*"},
			n,
		),
	}
	return ps
}

// WithProtocolOrigin sets NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny's key "protocol-origin" to the specified value.
// ProtocolOrigin: oc.E_SegmentRoutingTypes_SrteProtocolType
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) WithProtocolOrigin(ProtocolOrigin oc.E_SegmentRoutingTypes_SrteProtocolType) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ygnmi.ModifyKey(n.NodePath, "protocol-origin", ProtocolOrigin)
	return n
}

// WithOriginatorAsn sets NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny's key "originator-asn" to the specified value.
// OriginatorAsn: uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) WithOriginatorAsn(OriginatorAsn uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ygnmi.ModifyKey(n.NodePath, "originator-asn", OriginatorAsn)
	return n
}

// WithOriginatorAddr sets NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny's key "originator-addr" to the specified value.
// OriginatorAddr: string
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) WithOriginatorAddr(OriginatorAddr string) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ygnmi.ModifyKey(n.NodePath, "originator-addr", OriginatorAddr)
	return n
}

// WithDiscriminator sets NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny's key "discriminator" to the specified value.
// Discriminator: uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) WithDiscriminator(Discriminator uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ygnmi.ModifyKey(n.NodePath, "discriminator", Discriminator)
	return n
}

// CandidatePath (list): An individual candidate path within the list of candidate
// paths associated with this SR-TE policy. It is uniquely
// identified by the combination of protocol-origin,
// originator and discriminator
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-paths/candidate-path"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path"
//
//	ProtocolOrigin: oc.E_SegmentRoutingTypes_SrteProtocolType
//	OriginatorAsn: uint32
//	OriginatorAddr: string
//	Discriminator: uint32
func (n *NetworkInstance_SegmentRouting_TePolicyPath) CandidatePath(ProtocolOrigin oc.E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-paths", "candidate-path"},
			map[string]interface{}{"protocol-origin": ProtocolOrigin, "originator-asn": OriginatorAsn, "originator-addr": OriginatorAddr, "discriminator": Discriminator},
			n,
		),
	}
	return ps
}

// CandidatePath (list): An individual candidate path within the list of candidate
// paths associated with this SR-TE policy. It is uniquely
// identified by the combination of protocol-origin,
// originator and discriminator
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-paths/candidate-path"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path"
//
//	ProtocolOrigin: oc.E_SegmentRoutingTypes_SrteProtocolType
//	OriginatorAsn: uint32
//	OriginatorAddr: string
//	Discriminator: uint32
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) CandidatePath(ProtocolOrigin oc.E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-paths", "candidate-path"},
			map[string]interface{}{"protocol-origin": ProtocolOrigin, "originator-asn": OriginatorAsn, "originator-addr": OriginatorAddr, "discriminator": Discriminator},
			n,
		),
	}
	return ps
}

// CandidatePathMap (list): An individual candidate path within the list of candidate
// paths associated with this SR-TE policy. It is uniquely
// identified by the combination of protocol-origin,
// originator and discriminator
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-paths/candidate-path"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) CandidatePathMap() *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMap {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CandidatePathMap (list): An individual candidate path within the list of candidate
// paths associated with this SR-TE policy. It is uniquely
// identified by the combination of protocol-origin,
// originator and discriminator
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-paths/candidate-path"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) CandidatePathMap() *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMapAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Color (leaf): When the policy is used for RIB resolution to a specific
// Segment Routing Traffic Engineering path, the policy is used
// when the color required in the policy (which may be specified
// based on the value of a BGP extended colour community) matches
// the value of this leaf. The color being set to 0 indicates
// that the colour is a wildcard in the policy resolution.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/color"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/*/color"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Color() *NetworkInstance_SegmentRouting_TePolicy_ColorPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_ColorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "color"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Color (leaf): When the policy is used for RIB resolution to a specific
// Segment Routing Traffic Engineering path, the policy is used
// when the color required in the policy (which may be specified
// based on the value of a BGP extended colour community) matches
// the value of this leaf. The color being set to 0 indicates
// that the colour is a wildcard in the policy resolution.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/color"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/*/color"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Color() *NetworkInstance_SegmentRouting_TePolicy_ColorPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_ColorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "color"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Counters (container): A collection of counters on the policy level. They
// count the total traffic forwarded by the policy,
// regardless of its installation source. The counters
// should be persistent across policy state changes and
// switches between active protocols.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Counters() *NetworkInstance_SegmentRouting_TePolicy_CountersPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of counters on the policy level. They
// count the total traffic forwarded by the policy,
// regardless of its installation source. The counters
// should be persistent across policy state changes and
// switches between active protocols.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Counters() *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Endpoint (leaf): When the policy is used for RIB resolution to a Segment
// Routing Traffic Engineering path, the policy is used when the
// required endpoint (which may be the protocol next-hop) matches
// the endpoint address specified in this leaf. When the leaf is
// set to all zeros (0.0.0.0 or ::), the endpoint acts as a
// wildcard in the policy resolution.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/endpoint"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/*/endpoint"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Endpoint() *NetworkInstance_SegmentRouting_TePolicy_EndpointPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_EndpointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "endpoint"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Endpoint (leaf): When the policy is used for RIB resolution to a Segment
// Routing Traffic Engineering path, the policy is used when the
// required endpoint (which may be the protocol next-hop) matches
// the endpoint address specified in this leaf. When the leaf is
// set to all zeros (0.0.0.0 or ::), the endpoint acts as a
// wildcard in the policy resolution.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/endpoint"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/*/endpoint"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Endpoint() *NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_EndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "endpoint"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The user friendly SR-TE policy name.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicyPath) Name() *NetworkInstance_SegmentRouting_TePolicy_NamePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The user friendly SR-TE policy name.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) Name() *NetworkInstance_SegmentRouting_TePolicy_NamePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicyPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_SegmentRouting_TePolicy_Key]*oc.NetworkInstance_SegmentRouting_TePolicy] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_SegmentRouting_TePolicy_Key]*oc.NetworkInstance_SegmentRouting_TePolicy](
		"NetworkInstance_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_SegmentRouting_TePolicy_Key]*oc.NetworkInstance_SegmentRouting_TePolicy, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).TePolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-policies"},
			PostRelPath: []string{"openconfig-network-instance:te-policy"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicyPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_SegmentRouting_TePolicy_Key]*oc.NetworkInstance_SegmentRouting_TePolicy] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_SegmentRouting_TePolicy_Key]*oc.NetworkInstance_SegmentRouting_TePolicy](
		"NetworkInstance_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_SegmentRouting_TePolicy_Key]*oc.NetworkInstance_SegmentRouting_TePolicy, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting).TePolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-policies"},
			PostRelPath: []string{"openconfig-network-instance:te-policy"},
		},
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-since"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-since"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).ActiveSince
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-since"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-since"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).ActiveSince
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-transitions"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).ActiveTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-transitions"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-transitions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).ActiveTransitions
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/discriminator YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/discriminator YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/discriminator"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/discriminator"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "discriminator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Discriminator
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/discriminator"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/discriminator"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "discriminator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Discriminator
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "discriminator"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"discriminator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Discriminator
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "discriminator"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"discriminator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Discriminator
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enlp"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPath) State() ygnmi.SingletonQuery[oc.E_SegmentRoutingTypes_EnlpType] {
	return ygnmi.NewSingletonQuery[oc.E_SegmentRoutingTypes_EnlpType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enlp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_EnlpType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Enlp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enlp"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPathAny) State() ygnmi.WildcardQuery[oc.E_SegmentRoutingTypes_EnlpType] {
	return ygnmi.NewWildcardQuery[oc.E_SegmentRoutingTypes_EnlpType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enlp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_EnlpType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Enlp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-addr YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-addr YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/originator-addr"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-addr"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "originator-addr"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).OriginatorAddr
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/originator-addr"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-addr"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "originator-addr"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).OriginatorAddr
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "originator-addr"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"originator-addr"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).OriginatorAddr
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "originator-addr"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"originator-addr"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).OriginatorAddr
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-asn YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-asn YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/originator-asn"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-asn"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "originator-asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).OriginatorAsn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/originator-asn"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/originator-asn"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "originator-asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).OriginatorAsn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "originator-asn"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"originator-asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).OriginatorAsn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "originator-asn"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"originator-asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).OriginatorAsn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/protocol-origin YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/protocol-origin YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol-origin"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/protocol-origin"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath) State() ygnmi.SingletonQuery[oc.E_SegmentRoutingTypes_SrteProtocolType] {
	return ygnmi.NewSingletonQuery[oc.E_SegmentRoutingTypes_SrteProtocolType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrteProtocolType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).ProtocolOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol-origin"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/protocol-origin"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny) State() ygnmi.WildcardQuery[oc.E_SegmentRoutingTypes_SrteProtocolType] {
	return ygnmi.NewWildcardQuery[oc.E_SegmentRoutingTypes_SrteProtocolType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrteProtocolType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).ProtocolOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocol-origin"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath) Config() ygnmi.ConfigQuery[oc.E_SegmentRoutingTypes_SrteProtocolType] {
	return ygnmi.NewConfigQuery[oc.E_SegmentRoutingTypes_SrteProtocolType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"protocol-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrteProtocolType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).ProtocolOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocol-origin"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny) Config() ygnmi.WildcardQuery[oc.E_SegmentRoutingTypes_SrteProtocolType] {
	return ygnmi.NewWildcardQuery[oc.E_SegmentRoutingTypes_SrteProtocolType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"protocol-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrteProtocolType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).ProtocolOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/valid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/valid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMap represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMapAny struct {
	*ygnmi.NodePath
}

// Active (leaf): A candidate path is active when it is valid and it is
// determined to be the best path of the SR-TE Policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Active() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): A candidate path is active when it is valid and it is
// determined to be the best path of the SR-TE Policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Active() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveSince (leaf): Indication of the time the path transitioned to the active
// state.
//
// The value is the timestamp in nanoseconds relative to the
// Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-since"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) ActiveSince() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-since"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveSince (leaf): Indication of the time the path transitioned to the active
// state.
//
// The value is the timestamp in nanoseconds relative to the
// Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-since"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-since"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) ActiveSince() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveSincePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-since"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTransitions (leaf): The number of transitions to active state for the candidate
// path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-transitions"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) ActiveTransitions() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveTransitions (leaf): The number of transitions to active state for the candidate
// path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-transitions"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/active-transitions"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) ActiveTransitions() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ActiveTransitionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-transitions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Discriminator (leaf): A 32 bit value uniquely identifying the path within the
// context of a policy learnt from a protocol.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/discriminator"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/*/discriminator"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Discriminator() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "discriminator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Discriminator (leaf): A 32 bit value uniquely identifying the path within the
// context of a policy learnt from a protocol.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/discriminator"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/*/discriminator"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Discriminator() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_DiscriminatorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "discriminator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enlp (leaf): ENLP (Explicit NULL Label Policy) indicates whether Explicit
// NULL labels are to be pushed on unlabeled IP packets that are
// being steered into a given SR policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enlp"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Enlp() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enlp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enlp (leaf): ENLP (Explicit NULL Label Policy) indicates whether Explicit
// NULL labels are to be pushed on unlabeled IP packets that are
// being steered into a given SR policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enlp"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/enlp"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Enlp() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_EnlpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enlp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The user friendly SR-TE candidate path name.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Name() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The user friendly SR-TE candidate path name.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/name"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Name() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginatorAddr (leaf): The address of the node originating the candidate path.
// Address in IPv4 can be represented as IPv6-encoded-IPv4 e.g.
// ::FFFF:192.168.1.2 or a normal IPv6 address with the lowest
// 32 bits carrying the actual IPv4 address.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/originator-addr"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/*/originator-addr"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) OriginatorAddr() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "originator-addr"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginatorAddr (leaf): The address of the node originating the candidate path.
// Address in IPv4 can be represented as IPv6-encoded-IPv4 e.g.
// ::FFFF:192.168.1.2 or a normal IPv6 address with the lowest
// 32 bits carrying the actual IPv4 address.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/originator-addr"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/*/originator-addr"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) OriginatorAddr() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAddrPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "originator-addr"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginatorAsn (leaf): The autonomous system that node originating the candidate
// path locates.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/originator-asn"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/*/originator-asn"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) OriginatorAsn() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "originator-asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginatorAsn (leaf): The autonomous system that node originating the candidate
// path locates.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/originator-asn"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/*/originator-asn"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) OriginatorAsn() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_OriginatorAsnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "originator-asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): When there are multiple candidate paths specified a
// particular SR-TE policy. The preference is used to resolve
// between them. And the one with higher preference is
// preferred.
// These paths may be learnt from a dynamic routing protocol,
// or interface to the device, or from other static entries
// configured on the system.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Preference() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): When there are multiple candidate paths specified a
// particular SR-TE policy. The preference is used to resolve
// between them. And the one with higher preference is
// preferred.
// These paths may be learnt from a dynamic routing protocol,
// or interface to the device, or from other static entries
// configured on the system.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/preference"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Preference() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_PreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolOrigin (leaf): The component or protocol that originates or signals the
// candidate path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol-origin"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/*/protocol-origin"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) ProtocolOrigin() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol-origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtocolOrigin (leaf): The component or protocol that originates or signals the
// candidate path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol-origin"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/*/protocol-origin"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) ProtocolOrigin() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ProtocolOriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol-origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SegmentListAny (list): An individual segment list within the list of segment
// lists associated with this candidate path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-lists/segment-list"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) SegmentListAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-lists", "segment-list"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// SegmentListAny (list): An individual segment list within the list of segment
// lists associated with this candidate path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-lists/segment-list"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) SegmentListAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-lists", "segment-list"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// SegmentList (list): An individual segment list within the list of segment
// lists associated with this candidate path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-lists/segment-list"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
//
//	Id: uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) SegmentList(Id uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-lists", "segment-list"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// SegmentList (list): An individual segment list within the list of segment
// lists associated with this candidate path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-lists/segment-list"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
//
//	Id: uint32
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) SegmentList(Id uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-lists", "segment-list"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// SegmentListMap (list): An individual segment list within the list of segment
// lists associated with this candidate path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-lists/segment-list"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) SegmentListMap() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMap {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentListMap (list): An individual segment list within the list of segment
// lists associated with this candidate path.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-lists/segment-list"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) SegmentListMap() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMapAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Valid (leaf): A path should be marked as valid when it is usable e.g. the
// at least one segment-list is valid even though the path may
// not be the best.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/valid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) Valid() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Valid (leaf): A path should be marked as valid when it is usable e.g. the
// at least one segment-list is valid even though the path may
// not be the best.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/valid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) Valid() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_ValidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).CandidatePath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePathPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath](
		"NetworkInstance_SegmentRouting_TePolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy).CandidatePath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-path"},
		},
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/id YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/id YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/id"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/id"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Id
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/invalid-reason"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPath) State() ygnmi.SingletonQuery[oc.E_SegmentRoutingTypes_SrteInvalidSlReason] {
	return ygnmi.NewSingletonQuery[oc.E_SegmentRoutingTypes_SrteInvalidSlReason](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "invalid-reason"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrteInvalidSlReason, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).InvalidReason
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/invalid-reason"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPathAny) State() ygnmi.WildcardQuery[oc.E_SegmentRoutingTypes_SrteInvalidSlReason] {
	return ygnmi.NewWildcardQuery[oc.E_SegmentRoutingTypes_SrteInvalidSlReason](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "invalid-reason"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SegmentRoutingTypes_SrteInvalidSlReason, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).InvalidReason
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/valid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/valid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Weight
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMap represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): The counters of traffic steered to the segment-list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Counters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): The counters of traffic steered to the segment-list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Counters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Id (leaf): A unique id identifying the segment-list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/*/id"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Id() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique id identifying the segment-list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/*/id"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Id() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidReason (leaf): If a segment-list is marked as invalid, this leaf should
// indicate the reason.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/invalid-reason"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) InvalidReason() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "invalid-reason"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidReason (leaf): If a segment-list is marked as invalid, this leaf should
// indicate the reason.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/invalid-reason"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/invalid-reason"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) InvalidReason() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_InvalidReasonPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "invalid-reason"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopAny (list): A next-hop the segment list is resolved to.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) NextHopAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): A next-hop the segment list is resolved to.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) NextHopAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): A next-hop the segment list is resolved to.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) NextHop(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): A next-hop the segment list is resolved to.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) NextHop(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): A next-hop the segment list is resolved to.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) NextHopMap() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMap {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): A next-hop the segment list is resolved to.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) NextHopMap() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMapAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SidAny (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sids/sid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) SidAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sids", "sid"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// SidAny (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sids/sid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) SidAny() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sids", "sid"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Sid (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sids/sid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
//
//	Index: uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Sid(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sids", "sid"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Sid (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sids/sid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
//
//	Index: uint64
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Sid(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sids", "sid"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// SidMap (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sids/sid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) SidMap() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMap {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SidMap (list): List of SIDs that make up the segment list. The segment
// list is formed by ordering the set of SIDs that are
// specified by their index in ascending numerical order.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sids/sid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) SidMap() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMapAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Valid (leaf): The validity of a segment-list should marked as true
// when it is usable.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/valid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Valid() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Valid (leaf): The validity of a segment-list should marked as true
// when it is usable.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/valid"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/valid"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Valid() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_ValidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The weight of the segment list within the set of
// segment lists specified for the candidate path. The
// traffic that is forwarded according to the policy is
// distributed across the set of segment-lists such that
// each list receives weight/(sum of all weights) traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) Weight() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The weight of the segment list within the set of
// segment lists specified for the candidate path. The
// traffic that is forwarded according to the policy is
// distributed across the set of segment-lists such that
// each list receives weight/(sum of all weights) traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/weight"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) Weight() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_WeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).SegmentList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:segment-lists"},
			PostRelPath: []string{"openconfig-network-instance:segment-list"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentListPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath).SegmentList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:segment-lists"},
			PostRelPath: []string{"openconfig-network-instance:segment-list"},
		},
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters).OutLabeledOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters).OutLabeledOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters).OutLabeledPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters).OutLabeledPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny struct {
	*ygnmi.NodePath
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the segment list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the segment list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the segment list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the segment list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutLabeledPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes steered
// to the segment list. The counter includes both labeled and
// unlabeled steerted traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes steered
// to the segment list. The counter includes both labeled and
// unlabeled steerted traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the outgoing packets steered to the
// segment list. The counter includes both labeled and unlabeled
// steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the outgoing packets steered to the
// segment list. The counter includes both labeled and unlabeled
// steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-header"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPath) State() ygnmi.SingletonQuery[oc.E_AftTypes_EncapsulationHeaderType] {
	return ygnmi.NewSingletonQuery[oc.E_AftTypes_EncapsulationHeaderType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-header"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AftTypes_EncapsulationHeaderType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).DecapsulateHeader
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-header"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPathAny) State() ygnmi.WildcardQuery[oc.E_AftTypes_EncapsulationHeaderType] {
	return ygnmi.NewWildcardQuery[oc.E_AftTypes_EncapsulationHeaderType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-header"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AftTypes_EncapsulationHeaderType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).DecapsulateHeader
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulate-header"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPath) State() ygnmi.SingletonQuery[oc.E_AftTypes_EncapsulationHeaderType] {
	return ygnmi.NewSingletonQuery[oc.E_AftTypes_EncapsulationHeaderType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulate-header"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AftTypes_EncapsulationHeaderType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).EncapsulateHeader
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulate-header"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPathAny) State() ygnmi.WildcardQuery[oc.E_AftTypes_EncapsulationHeaderType] {
	return ygnmi.NewWildcardQuery[oc.E_AftTypes_EncapsulationHeaderType](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulate-header"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AftTypes_EncapsulationHeaderType, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).EncapsulateHeader
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/origin-protocol"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/origin-protocol"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "origin-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).OriginProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pop-top-label"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pop-top-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).PopTopLabel
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pop-top-label"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pop-top-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).PopTopLabel
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/programmed-index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "programmed-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).ProgrammedIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/programmed-index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "programmed-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).ProgrammedIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pushed-mpls-label-stack"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).PushedMplsLabelStack
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pushed-mpls-label-stack"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop).PushedMplsLabelStack
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): The counters of traffic steered to the segment-list on
// per next-hop basis.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) Counters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): The counters of traffic steered to the segment-list on
// per next-hop basis.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) Counters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-header"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) DecapsulateHeader() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-header"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) DecapsulateHeader() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_DecapsulateHeaderPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulateHeader (leaf): When forwarding a packet to the specified next-hop the local
// system performs an encapsulation of the packet - adding the
// specified header type.
//
// This node must be supported in addition to the
// encap-headers/encap-header tree.  A future release of OpenConfig
// will deprecate this node in favor of the
// encap-headers/encap-header subtree.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulate-header"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) EncapsulateHeader() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "encapsulate-header"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulateHeader (leaf): When forwarding a packet to the specified next-hop the local
// system performs an encapsulation of the packet - adding the
// specified header type.
//
// This node must be supported in addition to the
// encap-headers/encap-header tree.  A future release of OpenConfig
// will deprecate this node in favor of the
// encap-headers/encap-header subtree.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulate-header"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) EncapsulateHeader() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_EncapsulateHeaderPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "encapsulate-header"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/*/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) Index() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/*/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) Index() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) InterfaceRef() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) InterfaceRef() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IpAddress (leaf): The IP address of the next-hop system.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) IpAddress() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpAddress (leaf): The IP address of the next-hop system.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) IpAddress() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_IpAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): The MAC address of the next-hop if resolved by the local
// network instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) MacAddress() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): The MAC address of the next-hop if resolved by the local
// network instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) MacAddress() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/origin-protocol"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) OriginProtocol() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/origin-protocol"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) OriginProtocol() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_OriginProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PopTopLabel (leaf): Flag that controls pop action, i.e., the top-most MPLS label
// should be popped from the packet when switched by the system.
//
// The top-most MPLS label associated with pop action is equal to
// the label key used in 'mpls' AFT 'label-entry' list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pop-top-label"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) PopTopLabel() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pop-top-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PopTopLabel (leaf): Flag that controls pop action, i.e., the top-most MPLS label
// should be popped from the packet when switched by the system.
//
// The top-most MPLS label associated with pop action is equal to
// the label key used in 'mpls' AFT 'label-entry' list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pop-top-label"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) PopTopLabel() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PopTopLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pop-top-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProgrammedIndex (leaf): In some routing protocols, or route injection mechanisms it
// is possible to set the index of the next-hop via configuration
// or the protocol itself. In some systems it may not be possible
// to maintain the index provided by an external client when
// advertising the same entry via telemetry.
//
// This leaf reflects the configured or client-supplied index of
// the next-hop. This allows a client to create an assocation or
// mapping back to the original index pushed by the client, and
// the ID used as a key in the next-hop AFT list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/programmed-index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) ProgrammedIndex() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "programmed-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProgrammedIndex (leaf): In some routing protocols, or route injection mechanisms it
// is possible to set the index of the next-hop via configuration
// or the protocol itself. In some systems it may not be possible
// to maintain the index provided by an external client when
// advertising the same entry via telemetry.
//
// This leaf reflects the configured or client-supplied index of
// the next-hop. This allows a client to create an assocation or
// mapping back to the original index pushed by the client, and
// the ID used as a key in the next-hop AFT list.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/programmed-index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) ProgrammedIndex() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_ProgrammedIndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "programmed-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushedMplsLabelStack (leaf-list): The MPLS label stack imposed when forwarding packets to the
// next-hop
//   - the stack is encoded as a leaf list whereby the order of the
//     entries is such that the first entry in the list is the
//     label at the bottom of the stack to be pushed.
//
// To this end, a packet which is to forwarded to a device using
// a service label of 42, and a transport label of 8072 will be
// represented with a label stack list of [42, 8072].
//
// The MPLS label stack list is ordered by the user, such that no
// system re-ordering of leaves is permitted by the system.
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
//
// This node must be supported in addition to the
// encap-headers/encap-header tree.  A future release of OpenConfig
// will deprecate this node in favor of the
// encap-headers/encap-header subtree.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pushed-mpls-label-stack"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) PushedMplsLabelStack() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushedMplsLabelStack (leaf-list): The MPLS label stack imposed when forwarding packets to the
// next-hop
//   - the stack is encoded as a leaf list whereby the order of the
//     entries is such that the first entry in the list is the
//     label at the bottom of the stack to be pushed.
//
// To this end, a packet which is to forwarded to a device using
// a service label of 42, and a transport label of 8072 will be
// represented with a label stack list of [42, 8072].
//
// The MPLS label stack list is ordered by the user, such that no
// system re-ordering of leaves is permitted by the system.
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
//
// This node must be supported in addition to the
// encap-headers/encap-header tree.  A future release of OpenConfig
// will deprecate this node in favor of the
// encap-headers/encap-header subtree.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pushed-mpls-label-stack"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) PushedMplsLabelStack() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStackPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters).OutLabeledOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters).OutLabeledOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters).OutLabeledPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters).OutLabeledPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny struct {
	*ygnmi.NodePath
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the segment list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the segment list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the segment list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the segment list.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutLabeledPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes steered
// to the segment list. The counter includes both labeled and
// unlabeled steerted traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes steered
// to the segment list. The counter includes both labeled and
// unlabeled steerted traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the outgoing packets steered to the
// segment list. The counter includes both labeled and unlabeled
// steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the outgoing packets steered to the
// segment list. The counter includes both labeled and unlabeled
// steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath) Interface() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny) Interface() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath) Subinterface() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny) Subinterface() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/index YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-tc"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).MplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-tc"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-tc"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).MplsTc
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-ttl"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).MplsTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-ttl"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).MplsTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePath) State() ygnmi.SingletonQuery[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMap represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMapAny struct {
	*ygnmi.NodePath
}

// Index (leaf): The index of the SID within the segment list. The segment list is
// applied by ordering the SID entries in ascending numerical order
// beginning at 0.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/*/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath) Index() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): The index of the SID within the segment list. The segment list is
// applied by ordering the SID entries in ascending numerical order
// beginning at 0.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/*/index"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny) Index() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsTc (leaf): The value of the MPLS Traffic Class (TC) bits to be used if the
// value of the SID is an MPLS label. In the case that the value is
// set to 0, then the local implementation should choose the value.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-tc"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath) MplsTc() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsTc (leaf): The value of the MPLS Traffic Class (TC) bits to be used if the
// value of the SID is an MPLS label. In the case that the value is
// set to 0, then the local implementation should choose the value.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-tc"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-tc"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny) MplsTc() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTcPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mpls-tc"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsTtl (leaf): The TTL to be set if the type of the SID is an MPLS label. If the
// value of the TTL is set to be 0, the value is picked by the local
// implementation.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-ttl"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath) MplsTtl() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mpls-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsTtl (leaf): The TTL to be set if the type of the SID is an MPLS label. If the
// value of the TTL is set to be 0, the value is picked by the local
// implementation.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-ttl"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/mpls-ttl"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny) MplsTtl() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_MplsTtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mpls-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): The value of the SID that is to be used. Specified as an MPLS
// label or IPv6 address.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath) Value() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): The value of the SID that is to be used. Specified as an MPLS
// label or IPv6 address.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid/state/value"
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny) Value() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Sid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sids"},
			PostRelPath: []string{"openconfig-network-instance:sid"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_SidPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid](
		"NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList).Sid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sids"},
			PostRelPath: []string{"openconfig-network-instance:sid"},
		},
	)
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-labeled-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).InLabeledOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-labeled-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).InLabeledOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-labeled-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).InLabeledPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-labeled-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).InLabeledPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).OutLabeledOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).OutLabeledOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).OutLabeledPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).OutLabeledPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_SegmentRouting_TePolicy_Counters).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_SegmentRouting_TePolicy_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_SegmentRouting_TePolicy_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_SegmentRouting_TePolicy_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CountersPathAny struct {
	*ygnmi.NodePath
}

// InLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the SR-TE policy. Labeled traffic carries
// an active SID (top-most SID in the stack) that matches the
// BSID associated to this policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) InLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-labeled-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLabeledOctets (leaf): A cumulative counter of the total bytes of incoming labeled
// traffic steered to the SR-TE policy. Labeled traffic carries
// an active SID (top-most SID in the stack) that matches the
// BSID associated to this policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) InLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-labeled-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the SR-TE policy. Labeled packets carries an active SID
// (top-most SID in the stack) that matches the BSID associated
// to this policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) InLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLabeledPkts (leaf): A cumulative counter of the incoming labeled packets steered
// to the SR-TE policy. Labeled packets carries an active SID
// (top-most SID in the stack) that matches the BSID associated
// to this policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) InLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_InLabeledPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total incoming bytes steered
// to the SR-TE policy. It includes both labeled and unlabeled
// steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) InOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total incoming bytes steered
// to the SR-TE policy. It includes both labeled and unlabeled
// steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) InOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the incoming packets steered to
// the SR-TE policy. It includes both labeled and unlabeled
// steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) InPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the incoming packets steered to
// the SR-TE policy. It includes both labeled and unlabeled
// steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/in-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) InPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of outgoing labeled
// traffic after being steered to the SR-TE policy. Labeled
// traffic carries an active SID (top-most SID in the stack) that
// matches the BSID associated to this policy. The counter should
// include the segments pushed to packets.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledOctets (leaf): A cumulative counter of the total bytes of outgoing labeled
// traffic after being steered to the SR-TE policy. Labeled
// traffic carries an active SID (top-most SID in the stack) that
// matches the BSID associated to this policy. The counter should
// include the segments pushed to packets.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) OutLabeledOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledPkts (leaf): A cumulative counter of the outgoing labeled packets after
// being steered to the SR-TE policy. Labeled packets carries
// an active SID (top-most SID in the stack) that matches the
// BSID associated to this policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLabeledPkts (leaf): A cumulative counter of the outgoing labeled packets after
// being steered to the SR-TE policy. Labeled packets carries
// an active SID (top-most SID in the stack) that matches the
// BSID associated to this policy.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-labeled-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-labeled-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) OutLabeledPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_OutLabeledPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-labeled-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes after
// being steered to the SR-TE policy. It includes both labeled
// and unlabeled steered traffic. The counter should include the
// segments pushed to packets.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): The cumulative counter of the total outgoing bytes after
// being steered to the SR-TE policy. It includes both labeled
// and unlabeled steered traffic. The counter should include the
// segments pushed to packets.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-octets"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-octets"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) OutOctets() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the outgoing packets after being
// steered to the SR-TE policy. It includes both labeled and
// unlabeled steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPath {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the outgoing packets after being
// steered to the SR-TE policy. It includes both labeled and
// unlabeled steered traffic.
//
//	Defining module:      "openconfig-srte-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-pkts"
//	Path from root:       "/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters/out-pkts"
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) OutPkts() *NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPathAny {
	ps := &NetworkInstance_SegmentRouting_TePolicy_Counters_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_Counters](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_SegmentRouting_TePolicy_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_SegmentRouting_TePolicy_Counters](
		"NetworkInstance_SegmentRouting_TePolicy_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Table_AddressFamilyPath represents the /openconfig-network-instance/network-instances/network-instance/tables/table/state/address-family YANG schema element.
type NetworkInstance_Table_AddressFamilyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Table_AddressFamilyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/tables/table/state/address-family YANG schema element.
type NetworkInstance_Table_AddressFamilyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address-family"
//	Path from root:       "/network-instances/network-instance/tables/table/state/address-family"
func (n *NetworkInstance_Table_AddressFamilyPath) State() ygnmi.SingletonQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewSingletonQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Table",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address-family"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Table).AddressFamily
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Table) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address-family"
//	Path from root:       "/network-instances/network-instance/tables/table/state/address-family"
func (n *NetworkInstance_Table_AddressFamilyPathAny) State() ygnmi.WildcardQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Table",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address-family"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Table).AddressFamily
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Table) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address-family"
//	Path from root:       "/network-instances/network-instance/tables/table/config/address-family"
func (n *NetworkInstance_Table_AddressFamilyPath) Config() ygnmi.ConfigQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewConfigQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Table",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address-family"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Table).AddressFamily
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Table) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address-family"
//	Path from root:       "/network-instances/network-instance/tables/table/config/address-family"
func (n *NetworkInstance_Table_AddressFamilyPathAny) Config() ygnmi.WildcardQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Table",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address-family"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Table).AddressFamily
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Table) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Table_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/tables/table/state/protocol YANG schema element.
type NetworkInstance_Table_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Table_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/tables/table/state/protocol YANG schema element.
type NetworkInstance_Table_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/tables/table/state/protocol"
func (n *NetworkInstance_Table_ProtocolPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Table",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Table).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Table) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/tables/table/state/protocol"
func (n *NetworkInstance_Table_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Table",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Table).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Table) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/tables/table/config/protocol"
func (n *NetworkInstance_Table_ProtocolPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Table",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Table).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Table) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/tables/table/config/protocol"
func (n *NetworkInstance_Table_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Table",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Table).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Table) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_TablePath represents the /openconfig-network-instance/network-instances/network-instance/tables/table YANG schema element.
type NetworkInstance_TablePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_TablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/tables/table YANG schema element.
type NetworkInstance_TablePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_TablePathMap represents the /openconfig-network-instance/network-instances/network-instance/tables/table YANG schema element.
type NetworkInstance_TablePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_TablePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/tables/table YANG schema element.
type NetworkInstance_TablePathMapAny struct {
	*ygnmi.NodePath
}

// AddressFamily (leaf): The address family (IPv4, IPv6) of the table's entries
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address-family"
//	Path from root:       "/network-instances/network-instance/tables/table/*/address-family"
func (n *NetworkInstance_TablePath) AddressFamily() *NetworkInstance_Table_AddressFamilyPath {
	ps := &NetworkInstance_Table_AddressFamilyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address-family"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AddressFamily (leaf): The address family (IPv4, IPv6) of the table's entries
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address-family"
//	Path from root:       "/network-instances/network-instance/tables/table/*/address-family"
func (n *NetworkInstance_TablePathAny) AddressFamily() *NetworkInstance_Table_AddressFamilyPathAny {
	ps := &NetworkInstance_Table_AddressFamilyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address-family"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): Reference to the protocol that the table is associated with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/tables/table/*/protocol"
func (n *NetworkInstance_TablePath) Protocol() *NetworkInstance_Table_ProtocolPath {
	ps := &NetworkInstance_Table_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): Reference to the protocol that the table is associated with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/tables/table/*/protocol"
func (n *NetworkInstance_TablePathAny) Protocol() *NetworkInstance_Table_ProtocolPathAny {
	ps := &NetworkInstance_Table_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TablePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Table] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Table](
		"NetworkInstance_Table",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TablePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Table] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Table](
		"NetworkInstance_Table",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TablePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Table] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Table](
		"NetworkInstance_Table",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TablePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Table] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Table](
		"NetworkInstance_Table",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TablePathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table, bool) {
			ret := gs.(*oc.NetworkInstance).Table
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tables"},
			PostRelPath: []string{"openconfig-network-instance:table"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TablePathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table, bool) {
			ret := gs.(*oc.NetworkInstance).Table
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tables"},
			PostRelPath: []string{"openconfig-network-instance:table"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TablePathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table, bool) {
			ret := gs.(*oc.NetworkInstance).Table
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tables"},
			PostRelPath: []string{"openconfig-network-instance:table"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TablePathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Table_Key]*oc.NetworkInstance_Table, bool) {
			ret := gs.(*oc.NetworkInstance).Table
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tables"},
			PostRelPath: []string{"openconfig-network-instance:table"},
		},
	)
}

// NetworkInstance_TableConnection_AddressFamilyPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/address-family YANG schema element.
type NetworkInstance_TableConnection_AddressFamilyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_TableConnection_AddressFamilyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/address-family YANG schema element.
type NetworkInstance_TableConnection_AddressFamilyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address-family"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/address-family"
func (n *NetworkInstance_TableConnection_AddressFamilyPath) State() ygnmi.SingletonQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewSingletonQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address-family"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).AddressFamily
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address-family"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/address-family"
func (n *NetworkInstance_TableConnection_AddressFamilyPathAny) State() ygnmi.WildcardQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address-family"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).AddressFamily
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address-family"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/address-family"
func (n *NetworkInstance_TableConnection_AddressFamilyPath) Config() ygnmi.ConfigQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewConfigQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address-family"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).AddressFamily
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address-family"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/address-family"
func (n *NetworkInstance_TableConnection_AddressFamilyPathAny) Config() ygnmi.WildcardQuery[oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address-family"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).AddressFamily
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_TableConnection_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/default-import-policy YANG schema element.
type NetworkInstance_TableConnection_DefaultImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_TableConnection_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/default-import-policy YANG schema element.
type NetworkInstance_TableConnection_DefaultImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/default-import-policy"
func (n *NetworkInstance_TableConnection_DefaultImportPolicyPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/default-import-policy"
func (n *NetworkInstance_TableConnection_DefaultImportPolicyPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/default-import-policy"
func (n *NetworkInstance_TableConnection_DefaultImportPolicyPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/default-import-policy"
func (n *NetworkInstance_TableConnection_DefaultImportPolicyPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_TableConnection_DisableMetricPropagationPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/disable-metric-propagation YANG schema element.
type NetworkInstance_TableConnection_DisableMetricPropagationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_TableConnection_DisableMetricPropagationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/disable-metric-propagation YANG schema element.
type NetworkInstance_TableConnection_DisableMetricPropagationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-metric-propagation"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/disable-metric-propagation"
func (n *NetworkInstance_TableConnection_DisableMetricPropagationPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-metric-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DisableMetricPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-metric-propagation"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/disable-metric-propagation"
func (n *NetworkInstance_TableConnection_DisableMetricPropagationPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-metric-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DisableMetricPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-metric-propagation"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/disable-metric-propagation"
func (n *NetworkInstance_TableConnection_DisableMetricPropagationPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-metric-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DisableMetricPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-metric-propagation"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/disable-metric-propagation"
func (n *NetworkInstance_TableConnection_DisableMetricPropagationPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-metric-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DisableMetricPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_TableConnection_DstProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/dst-protocol YANG schema element.
type NetworkInstance_TableConnection_DstProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_TableConnection_DstProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/dst-protocol YANG schema element.
type NetworkInstance_TableConnection_DstProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/dst-protocol"
func (n *NetworkInstance_TableConnection_DstProtocolPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DstProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/dst-protocol"
func (n *NetworkInstance_TableConnection_DstProtocolPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DstProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dst-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/dst-protocol"
func (n *NetworkInstance_TableConnection_DstProtocolPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dst-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DstProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dst-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/dst-protocol"
func (n *NetworkInstance_TableConnection_DstProtocolPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dst-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).DstProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_TableConnection_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/import-policy YANG schema element.
type NetworkInstance_TableConnection_ImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_TableConnection_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/import-policy YANG schema element.
type NetworkInstance_TableConnection_ImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/import-policy"
func (n *NetworkInstance_TableConnection_ImportPolicyPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/import-policy"
func (n *NetworkInstance_TableConnection_ImportPolicyPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/import-policy"
func (n *NetworkInstance_TableConnection_ImportPolicyPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/import-policy"
func (n *NetworkInstance_TableConnection_ImportPolicyPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_TableConnection_SrcProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/src-protocol YANG schema element.
type NetworkInstance_TableConnection_SrcProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_TableConnection_SrcProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection/state/src-protocol YANG schema element.
type NetworkInstance_TableConnection_SrcProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/src-protocol"
func (n *NetworkInstance_TableConnection_SrcProtocolPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).SrcProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/state/src-protocol"
func (n *NetworkInstance_TableConnection_SrcProtocolPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_TableConnection",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).SrcProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/src-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/src-protocol"
func (n *NetworkInstance_TableConnection_SrcProtocolPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "src-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).SrcProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/src-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/config/src-protocol"
func (n *NetworkInstance_TableConnection_SrcProtocolPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_TableConnection",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "src-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_TableConnection).SrcProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_TableConnection) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_TableConnectionPath represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection YANG schema element.
type NetworkInstance_TableConnectionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_TableConnectionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection YANG schema element.
type NetworkInstance_TableConnectionPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_TableConnectionPathMap represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection YANG schema element.
type NetworkInstance_TableConnectionPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_TableConnectionPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection YANG schema element.
type NetworkInstance_TableConnectionPathMapAny struct {
	*ygnmi.NodePath
}

// AddressFamily (leaf): The address family associated with the connection. This
// must be defined for the source protocol. The target
// address family is implicitly defined by the address family
// specified for the source protocol.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address-family"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/address-family"
func (n *NetworkInstance_TableConnectionPath) AddressFamily() *NetworkInstance_TableConnection_AddressFamilyPath {
	ps := &NetworkInstance_TableConnection_AddressFamilyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address-family"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AddressFamily (leaf): The address family associated with the connection. This
// must be defined for the source protocol. The target
// address family is implicitly defined by the address family
// specified for the source protocol.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address-family"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/address-family"
func (n *NetworkInstance_TableConnectionPathAny) AddressFamily() *NetworkInstance_TableConnection_AddressFamilyPathAny {
	ps := &NetworkInstance_TableConnection_AddressFamilyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address-family"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/default-import-policy"
func (n *NetworkInstance_TableConnectionPath) DefaultImportPolicy() *NetworkInstance_TableConnection_DefaultImportPolicyPath {
	ps := &NetworkInstance_TableConnection_DefaultImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/default-import-policy"
func (n *NetworkInstance_TableConnectionPathAny) DefaultImportPolicy() *NetworkInstance_TableConnection_DefaultImportPolicyPathAny {
	ps := &NetworkInstance_TableConnection_DefaultImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableMetricPropagation (leaf): By default a system may reflect the metric specified in
// the destination protocol according to that which is set in
// the source protocol. For example:
// - IS-IS metric may be reflected in BGP MED (and vice versa)
// - OSPF metric may be reflected in the BGP MED (and vice versa)
// When this leaf is set to true, this reflection behaviour MUST be
// disabled, and rather the metric must be set to '0' or explicitly
// set by policy.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-metric-propagation"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/disable-metric-propagation"
func (n *NetworkInstance_TableConnectionPath) DisableMetricPropagation() *NetworkInstance_TableConnection_DisableMetricPropagationPath {
	ps := &NetworkInstance_TableConnection_DisableMetricPropagationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-metric-propagation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableMetricPropagation (leaf): By default a system may reflect the metric specified in
// the destination protocol according to that which is set in
// the source protocol. For example:
// - IS-IS metric may be reflected in BGP MED (and vice versa)
// - OSPF metric may be reflected in the BGP MED (and vice versa)
// When this leaf is set to true, this reflection behaviour MUST be
// disabled, and rather the metric must be set to '0' or explicitly
// set by policy.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-metric-propagation"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/disable-metric-propagation"
func (n *NetworkInstance_TableConnectionPathAny) DisableMetricPropagation() *NetworkInstance_TableConnection_DisableMetricPropagationPathAny {
	ps := &NetworkInstance_TableConnection_DisableMetricPropagationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-metric-propagation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstProtocol (leaf): The destination protocol for the table connection
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dst-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/dst-protocol"
func (n *NetworkInstance_TableConnectionPath) DstProtocol() *NetworkInstance_TableConnection_DstProtocolPath {
	ps := &NetworkInstance_TableConnection_DstProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstProtocol (leaf): The destination protocol for the table connection
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dst-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/dst-protocol"
func (n *NetworkInstance_TableConnectionPathAny) DstProtocol() *NetworkInstance_TableConnection_DstProtocolPathAny {
	ps := &NetworkInstance_TableConnection_DstProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/import-policy"
func (n *NetworkInstance_TableConnectionPath) ImportPolicy() *NetworkInstance_TableConnection_ImportPolicyPath {
	ps := &NetworkInstance_TableConnection_ImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/import-policy"
func (n *NetworkInstance_TableConnectionPathAny) ImportPolicy() *NetworkInstance_TableConnection_ImportPolicyPathAny {
	ps := &NetworkInstance_TableConnection_ImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcProtocol (leaf): The source protocol for the table connection
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/src-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/src-protocol"
func (n *NetworkInstance_TableConnectionPath) SrcProtocol() *NetworkInstance_TableConnection_SrcProtocolPath {
	ps := &NetworkInstance_TableConnection_SrcProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcProtocol (leaf): The source protocol for the table connection
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/src-protocol"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection/*/src-protocol"
func (n *NetworkInstance_TableConnectionPathAny) SrcProtocol() *NetworkInstance_TableConnection_SrcProtocolPathAny {
	ps := &NetworkInstance_TableConnection_SrcProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TableConnectionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_TableConnection] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_TableConnection](
		"NetworkInstance_TableConnection",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TableConnectionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_TableConnection] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_TableConnection](
		"NetworkInstance_TableConnection",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TableConnectionPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_TableConnection] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_TableConnection](
		"NetworkInstance_TableConnection",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TableConnectionPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_TableConnection] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_TableConnection](
		"NetworkInstance_TableConnection",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TableConnectionPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection, bool) {
			ret := gs.(*oc.NetworkInstance).TableConnection
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:table-connections"},
			PostRelPath: []string{"openconfig-network-instance:table-connection"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TableConnectionPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection, bool) {
			ret := gs.(*oc.NetworkInstance).TableConnection
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:table-connections"},
			PostRelPath: []string{"openconfig-network-instance:table-connection"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TableConnectionPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection, bool) {
			ret := gs.(*oc.NetworkInstance).TableConnection
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:table-connections"},
			PostRelPath: []string{"openconfig-network-instance:table-connection"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_TableConnectionPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_TableConnection_Key]*oc.NetworkInstance_TableConnection, bool) {
			ret := gs.(*oc.NetworkInstance).TableConnection
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:table-connections"},
			PostRelPath: []string{"openconfig-network-instance:table-connection"},
		},
	)
}

// NetworkInstance_Vlan_NamePath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/state/name YANG schema element.
type NetworkInstance_Vlan_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Vlan_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/state/name YANG schema element.
type NetworkInstance_Vlan_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/state/name"
func (n *NetworkInstance_Vlan_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Vlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/state/name"
func (n *NetworkInstance_Vlan_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Vlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/config/name"
func (n *NetworkInstance_Vlan_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Vlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/config/name"
func (n *NetworkInstance_Vlan_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Vlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Vlan_StatusPath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/state/status YANG schema element.
type NetworkInstance_Vlan_StatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Vlan_StatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/state/status YANG schema element.
type NetworkInstance_Vlan_StatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/state/status"
func (n *NetworkInstance_Vlan_StatusPath) State() ygnmi.SingletonQuery[oc.E_Vlan_Status] {
	return ygnmi.NewSingletonQuery[oc.E_Vlan_Status](
		"NetworkInstance_Vlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_Status, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/state/status"
func (n *NetworkInstance_Vlan_StatusPathAny) State() ygnmi.WildcardQuery[oc.E_Vlan_Status] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_Status](
		"NetworkInstance_Vlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_Status, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/status"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/config/status"
func (n *NetworkInstance_Vlan_StatusPath) Config() ygnmi.ConfigQuery[oc.E_Vlan_Status] {
	return ygnmi.NewConfigQuery[oc.E_Vlan_Status](
		"NetworkInstance_Vlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_Status, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/status"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/config/status"
func (n *NetworkInstance_Vlan_StatusPathAny) Config() ygnmi.WildcardQuery[oc.E_Vlan_Status] {
	return ygnmi.NewWildcardQuery[oc.E_Vlan_Status](
		"NetworkInstance_Vlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Vlan_Status, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Vlan_VlanIdPath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/state/vlan-id YANG schema element.
type NetworkInstance_Vlan_VlanIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Vlan_VlanIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/state/vlan-id YANG schema element.
type NetworkInstance_Vlan_VlanIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/state/vlan-id"
func (n *NetworkInstance_Vlan_VlanIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Vlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan-id"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/state/vlan-id"
func (n *NetworkInstance_Vlan_VlanIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Vlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/config/vlan-id"
func (n *NetworkInstance_Vlan_VlanIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Vlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vlan-id"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/config/vlan-id"
func (n *NetworkInstance_Vlan_VlanIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Vlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Vlan).VlanId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Vlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type NetworkInstance_VlanPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type NetworkInstance_VlanPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_VlanPathMap represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type NetworkInstance_VlanPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_VlanPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type NetworkInstance_VlanPathMapAny struct {
	*ygnmi.NodePath
}

// MemberAny (list): List of references to interfaces / subinterfaces
// associated with the VLAN.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "members/member"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/members/member"
func (n *NetworkInstance_VlanPath) MemberAny() *NetworkInstance_Vlan_MemberPathAny {
	ps := &NetworkInstance_Vlan_MemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MemberAny (list): List of references to interfaces / subinterfaces
// associated with the VLAN.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "members/member"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/members/member"
func (n *NetworkInstance_VlanPathAny) MemberAny() *NetworkInstance_Vlan_MemberPathAny {
	ps := &NetworkInstance_Vlan_MemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): Interface VLAN name.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/*/name"
func (n *NetworkInstance_VlanPath) Name() *NetworkInstance_Vlan_NamePath {
	ps := &NetworkInstance_Vlan_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Interface VLAN name.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/*/name"
func (n *NetworkInstance_VlanPathAny) Name() *NetworkInstance_Vlan_NamePathAny {
	ps := &NetworkInstance_Vlan_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): Admin state of the VLAN
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/status"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/*/status"
func (n *NetworkInstance_VlanPath) Status() *NetworkInstance_Vlan_StatusPath {
	ps := &NetworkInstance_Vlan_StatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): Admin state of the VLAN
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/status"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/*/status"
func (n *NetworkInstance_VlanPathAny) Status() *NetworkInstance_Vlan_StatusPathAny {
	ps := &NetworkInstance_Vlan_StatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Interface VLAN id.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/*/vlan-id"
func (n *NetworkInstance_VlanPath) VlanId() *NetworkInstance_Vlan_VlanIdPath {
	ps := &NetworkInstance_Vlan_VlanIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanId (leaf): Interface VLAN id.
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vlan-id"
//	Path from root:       "/network-instances/network-instance/vlans/vlan/*/vlan-id"
func (n *NetworkInstance_VlanPathAny) VlanId() *NetworkInstance_Vlan_VlanIdPathAny {
	ps := &NetworkInstance_Vlan_VlanIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_VlanPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Vlan] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Vlan](
		"NetworkInstance_Vlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_VlanPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Vlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Vlan](
		"NetworkInstance_Vlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_VlanPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Vlan] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Vlan](
		"NetworkInstance_Vlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_VlanPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Vlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Vlan](
		"NetworkInstance_Vlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_VlanPathMap) State() ygnmi.SingletonQuery[map[uint16]*oc.NetworkInstance_Vlan] {
	return ygnmi.NewSingletonQuery[map[uint16]*oc.NetworkInstance_Vlan](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.NetworkInstance_Vlan, bool) {
			ret := gs.(*oc.NetworkInstance).Vlan
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:vlans"},
			PostRelPath: []string{"openconfig-network-instance:vlan"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_VlanPathMapAny) State() ygnmi.WildcardQuery[map[uint16]*oc.NetworkInstance_Vlan] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.NetworkInstance_Vlan](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.NetworkInstance_Vlan, bool) {
			ret := gs.(*oc.NetworkInstance).Vlan
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:vlans"},
			PostRelPath: []string{"openconfig-network-instance:vlan"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_VlanPathMap) Config() ygnmi.ConfigQuery[map[uint16]*oc.NetworkInstance_Vlan] {
	return ygnmi.NewConfigQuery[map[uint16]*oc.NetworkInstance_Vlan](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.NetworkInstance_Vlan, bool) {
			ret := gs.(*oc.NetworkInstance).Vlan
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:vlans"},
			PostRelPath: []string{"openconfig-network-instance:vlan"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_VlanPathMapAny) Config() ygnmi.WildcardQuery[map[uint16]*oc.NetworkInstance_Vlan] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.NetworkInstance_Vlan](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.NetworkInstance_Vlan, bool) {
			ret := gs.(*oc.NetworkInstance).Vlan
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:vlans"},
			PostRelPath: []string{"openconfig-network-instance:vlan"},
		},
	)
}

// NetworkInstance_Vlan_MemberPath represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member YANG schema element.
type NetworkInstance_Vlan_MemberPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Vlan_MemberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member YANG schema element.
type NetworkInstance_Vlan_MemberPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Vlan_MemberPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Vlan_Member] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Vlan_Member](
		"NetworkInstance_Vlan_Member",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Vlan_MemberPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Vlan_Member] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Vlan_Member](
		"NetworkInstance_Vlan_Member",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
