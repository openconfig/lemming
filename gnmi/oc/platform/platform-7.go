/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_Transceiver_PostFecBer_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/max-time YANG schema element.
type Component_Transceiver_PostFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/max-time YANG schema element.
type Component_Transceiver_PostFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max-time"
func (n *Component_Transceiver_PostFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max-time"
func (n *Component_Transceiver_PostFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_MinPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/min YANG schema element.
type Component_Transceiver_PostFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/min YANG schema element.
type Component_Transceiver_PostFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min"
func (n *Component_Transceiver_PostFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min"
func (n *Component_Transceiver_PostFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/min-time YANG schema element.
type Component_Transceiver_PostFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/min-time YANG schema element.
type Component_Transceiver_PostFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min-time"
func (n *Component_Transceiver_PostFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min-time"
func (n *Component_Transceiver_PostFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBerPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber YANG schema element.
type Component_Transceiver_PostFecBerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_PostFecBerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber YANG schema element.
type Component_Transceiver_PostFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/avg"
func (n *Component_Transceiver_PostFecBerPath) Avg() *Component_Transceiver_PostFecBer_AvgPath {
	ps := &Component_Transceiver_PostFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/avg"
func (n *Component_Transceiver_PostFecBerPathAny) Avg() *Component_Transceiver_PostFecBer_AvgPathAny {
	ps := &Component_Transceiver_PostFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/instant"
func (n *Component_Transceiver_PostFecBerPath) Instant() *Component_Transceiver_PostFecBer_InstantPath {
	ps := &Component_Transceiver_PostFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/instant"
func (n *Component_Transceiver_PostFecBerPathAny) Instant() *Component_Transceiver_PostFecBer_InstantPathAny {
	ps := &Component_Transceiver_PostFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/interval"
func (n *Component_Transceiver_PostFecBerPath) Interval() *Component_Transceiver_PostFecBer_IntervalPath {
	ps := &Component_Transceiver_PostFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/interval"
func (n *Component_Transceiver_PostFecBerPathAny) Interval() *Component_Transceiver_PostFecBer_IntervalPathAny {
	ps := &Component_Transceiver_PostFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max"
func (n *Component_Transceiver_PostFecBerPath) Max() *Component_Transceiver_PostFecBer_MaxPath {
	ps := &Component_Transceiver_PostFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max"
func (n *Component_Transceiver_PostFecBerPathAny) Max() *Component_Transceiver_PostFecBer_MaxPathAny {
	ps := &Component_Transceiver_PostFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/post-fec-ber/max-time"
func (n *Component_Transceiver_PostFecBerPath) MaxTime() *Component_Transceiver_PostFecBer_MaxTimePath {
	ps := &Component_Transceiver_PostFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/post-fec-ber/max-time"
func (n *Component_Transceiver_PostFecBerPathAny) MaxTime() *Component_Transceiver_PostFecBer_MaxTimePathAny {
	ps := &Component_Transceiver_PostFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min"
func (n *Component_Transceiver_PostFecBerPath) Min() *Component_Transceiver_PostFecBer_MinPath {
	ps := &Component_Transceiver_PostFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/min"
func (n *Component_Transceiver_PostFecBerPathAny) Min() *Component_Transceiver_PostFecBer_MinPathAny {
	ps := &Component_Transceiver_PostFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/post-fec-ber/min-time"
func (n *Component_Transceiver_PostFecBerPath) MinTime() *Component_Transceiver_PostFecBer_MinTimePath {
	ps := &Component_Transceiver_PostFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/post-fec-ber/min-time"
func (n *Component_Transceiver_PostFecBerPathAny) MinTime() *Component_Transceiver_PostFecBer_MinTimePathAny {
	ps := &Component_Transceiver_PostFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_PostFecBerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_PostFecBer] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_PostFecBer](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_PostFecBerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_PostFecBer] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_PostFecBer](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_AvgPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/avg YANG schema element.
type Component_Transceiver_PreFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/avg YANG schema element.
type Component_Transceiver_PreFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/avg"
func (n *Component_Transceiver_PreFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/avg"
func (n *Component_Transceiver_PreFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_InstantPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/instant YANG schema element.
type Component_Transceiver_PreFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/instant YANG schema element.
type Component_Transceiver_PreFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/instant"
func (n *Component_Transceiver_PreFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/instant"
func (n *Component_Transceiver_PreFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/interval YANG schema element.
type Component_Transceiver_PreFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/interval YANG schema element.
type Component_Transceiver_PreFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/interval"
func (n *Component_Transceiver_PreFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/interval"
func (n *Component_Transceiver_PreFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_MaxPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/max YANG schema element.
type Component_Transceiver_PreFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/max YANG schema element.
type Component_Transceiver_PreFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max"
func (n *Component_Transceiver_PreFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max"
func (n *Component_Transceiver_PreFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/max-time YANG schema element.
type Component_Transceiver_PreFecBer_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/max-time YANG schema element.
type Component_Transceiver_PreFecBer_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max-time"
func (n *Component_Transceiver_PreFecBer_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max-time"
func (n *Component_Transceiver_PreFecBer_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_MinPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/min YANG schema element.
type Component_Transceiver_PreFecBer_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/min YANG schema element.
type Component_Transceiver_PreFecBer_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min"
func (n *Component_Transceiver_PreFecBer_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min"
func (n *Component_Transceiver_PreFecBer_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBer_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/min-time YANG schema element.
type Component_Transceiver_PreFecBer_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PreFecBer_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber/min-time YANG schema element.
type Component_Transceiver_PreFecBer_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min-time"
func (n *Component_Transceiver_PreFecBer_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min-time"
func (n *Component_Transceiver_PreFecBer_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PreFecBer).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PreFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PreFecBerPath represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber YANG schema element.
type Component_Transceiver_PreFecBerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_PreFecBerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/pre-fec-ber YANG schema element.
type Component_Transceiver_PreFecBerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/avg"
func (n *Component_Transceiver_PreFecBerPath) Avg() *Component_Transceiver_PreFecBer_AvgPath {
	ps := &Component_Transceiver_PreFecBer_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/avg"
func (n *Component_Transceiver_PreFecBerPathAny) Avg() *Component_Transceiver_PreFecBer_AvgPathAny {
	ps := &Component_Transceiver_PreFecBer_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/instant"
func (n *Component_Transceiver_PreFecBerPath) Instant() *Component_Transceiver_PreFecBer_InstantPath {
	ps := &Component_Transceiver_PreFecBer_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/instant"
func (n *Component_Transceiver_PreFecBerPathAny) Instant() *Component_Transceiver_PreFecBer_InstantPathAny {
	ps := &Component_Transceiver_PreFecBer_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/interval"
func (n *Component_Transceiver_PreFecBerPath) Interval() *Component_Transceiver_PreFecBer_IntervalPath {
	ps := &Component_Transceiver_PreFecBer_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/interval"
func (n *Component_Transceiver_PreFecBerPathAny) Interval() *Component_Transceiver_PreFecBer_IntervalPathAny {
	ps := &Component_Transceiver_PreFecBer_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max"
func (n *Component_Transceiver_PreFecBerPath) Max() *Component_Transceiver_PreFecBer_MaxPath {
	ps := &Component_Transceiver_PreFecBer_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/max"
func (n *Component_Transceiver_PreFecBerPathAny) Max() *Component_Transceiver_PreFecBer_MaxPathAny {
	ps := &Component_Transceiver_PreFecBer_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/pre-fec-ber/max-time"
func (n *Component_Transceiver_PreFecBerPath) MaxTime() *Component_Transceiver_PreFecBer_MaxTimePath {
	ps := &Component_Transceiver_PreFecBer_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/pre-fec-ber/max-time"
func (n *Component_Transceiver_PreFecBerPathAny) MaxTime() *Component_Transceiver_PreFecBer_MaxTimePathAny {
	ps := &Component_Transceiver_PreFecBer_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min"
func (n *Component_Transceiver_PreFecBerPath) Min() *Component_Transceiver_PreFecBer_MinPath {
	ps := &Component_Transceiver_PreFecBer_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber/min"
func (n *Component_Transceiver_PreFecBerPathAny) Min() *Component_Transceiver_PreFecBer_MinPathAny {
	ps := &Component_Transceiver_PreFecBer_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/pre-fec-ber/min-time"
func (n *Component_Transceiver_PreFecBerPath) MinTime() *Component_Transceiver_PreFecBer_MinTimePath {
	ps := &Component_Transceiver_PreFecBer_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/pre-fec-ber/min-time"
func (n *Component_Transceiver_PreFecBerPathAny) MinTime() *Component_Transceiver_PreFecBer_MinTimePathAny {
	ps := &Component_Transceiver_PreFecBer_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_PreFecBerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_PreFecBer] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_PreFecBer](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_PreFecBerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_PreFecBer] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_PreFecBer](
		"Component_Transceiver_PreFecBer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_AvgPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/avg YANG schema element.
type Component_Transceiver_SupplyVoltage_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/avg YANG schema element.
type Component_Transceiver_SupplyVoltage_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/avg"
func (n *Component_Transceiver_SupplyVoltage_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/avg"
func (n *Component_Transceiver_SupplyVoltage_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_InstantPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/instant YANG schema element.
type Component_Transceiver_SupplyVoltage_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/instant YANG schema element.
type Component_Transceiver_SupplyVoltage_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/instant"
func (n *Component_Transceiver_SupplyVoltage_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/instant"
func (n *Component_Transceiver_SupplyVoltage_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/interval YANG schema element.
type Component_Transceiver_SupplyVoltage_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/interval YANG schema element.
type Component_Transceiver_SupplyVoltage_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/interval"
func (n *Component_Transceiver_SupplyVoltage_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/interval"
func (n *Component_Transceiver_SupplyVoltage_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_MaxPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/max YANG schema element.
type Component_Transceiver_SupplyVoltage_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/max YANG schema element.
type Component_Transceiver_SupplyVoltage_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max"
func (n *Component_Transceiver_SupplyVoltage_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max"
func (n *Component_Transceiver_SupplyVoltage_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/max-time YANG schema element.
type Component_Transceiver_SupplyVoltage_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/max-time YANG schema element.
type Component_Transceiver_SupplyVoltage_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max-time"
func (n *Component_Transceiver_SupplyVoltage_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max-time"
func (n *Component_Transceiver_SupplyVoltage_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_MinPath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/min YANG schema element.
type Component_Transceiver_SupplyVoltage_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/min YANG schema element.
type Component_Transceiver_SupplyVoltage_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min"
func (n *Component_Transceiver_SupplyVoltage_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min"
func (n *Component_Transceiver_SupplyVoltage_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltage_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage/min-time YANG schema element.
type Component_Transceiver_SupplyVoltage_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SupplyVoltage_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage/min-time YANG schema element.
type Component_Transceiver_SupplyVoltage_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min-time"
func (n *Component_Transceiver_SupplyVoltage_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min-time"
func (n *Component_Transceiver_SupplyVoltage_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_SupplyVoltage).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_SupplyVoltage) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SupplyVoltagePath represents the /openconfig-platform/components/component/transceiver/state/supply-voltage YANG schema element.
type Component_Transceiver_SupplyVoltagePath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_SupplyVoltagePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/supply-voltage YANG schema element.
type Component_Transceiver_SupplyVoltagePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/avg"
func (n *Component_Transceiver_SupplyVoltagePath) Avg() *Component_Transceiver_SupplyVoltage_AvgPath {
	ps := &Component_Transceiver_SupplyVoltage_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/avg"
func (n *Component_Transceiver_SupplyVoltagePathAny) Avg() *Component_Transceiver_SupplyVoltage_AvgPathAny {
	ps := &Component_Transceiver_SupplyVoltage_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/instant"
func (n *Component_Transceiver_SupplyVoltagePath) Instant() *Component_Transceiver_SupplyVoltage_InstantPath {
	ps := &Component_Transceiver_SupplyVoltage_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/instant"
func (n *Component_Transceiver_SupplyVoltagePathAny) Instant() *Component_Transceiver_SupplyVoltage_InstantPathAny {
	ps := &Component_Transceiver_SupplyVoltage_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/interval"
func (n *Component_Transceiver_SupplyVoltagePath) Interval() *Component_Transceiver_SupplyVoltage_IntervalPath {
	ps := &Component_Transceiver_SupplyVoltage_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/interval"
func (n *Component_Transceiver_SupplyVoltagePathAny) Interval() *Component_Transceiver_SupplyVoltage_IntervalPathAny {
	ps := &Component_Transceiver_SupplyVoltage_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max"
func (n *Component_Transceiver_SupplyVoltagePath) Max() *Component_Transceiver_SupplyVoltage_MaxPath {
	ps := &Component_Transceiver_SupplyVoltage_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/max"
func (n *Component_Transceiver_SupplyVoltagePathAny) Max() *Component_Transceiver_SupplyVoltage_MaxPathAny {
	ps := &Component_Transceiver_SupplyVoltage_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/supply-voltage/max-time"
func (n *Component_Transceiver_SupplyVoltagePath) MaxTime() *Component_Transceiver_SupplyVoltage_MaxTimePath {
	ps := &Component_Transceiver_SupplyVoltage_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/supply-voltage/max-time"
func (n *Component_Transceiver_SupplyVoltagePathAny) MaxTime() *Component_Transceiver_SupplyVoltage_MaxTimePathAny {
	ps := &Component_Transceiver_SupplyVoltage_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min"
func (n *Component_Transceiver_SupplyVoltagePath) Min() *Component_Transceiver_SupplyVoltage_MinPath {
	ps := &Component_Transceiver_SupplyVoltage_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/supply-voltage/min"
func (n *Component_Transceiver_SupplyVoltagePathAny) Min() *Component_Transceiver_SupplyVoltage_MinPathAny {
	ps := &Component_Transceiver_SupplyVoltage_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/supply-voltage/min-time"
func (n *Component_Transceiver_SupplyVoltagePath) MinTime() *Component_Transceiver_SupplyVoltage_MinTimePath {
	ps := &Component_Transceiver_SupplyVoltage_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/supply-voltage/min-time"
func (n *Component_Transceiver_SupplyVoltagePathAny) MinTime() *Component_Transceiver_SupplyVoltage_MinTimePathAny {
	ps := &Component_Transceiver_SupplyVoltage_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_SupplyVoltagePath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_SupplyVoltage] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_SupplyVoltage](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_SupplyVoltagePathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_SupplyVoltage] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_SupplyVoltage](
		"Component_Transceiver_SupplyVoltage",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_InputPowerLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/input-power-lower YANG schema element.
type Component_Transceiver_Threshold_InputPowerLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_InputPowerLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/input-power-lower YANG schema element.
type Component_Transceiver_Threshold_InputPowerLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/input-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-lower"
func (n *Component_Transceiver_Threshold_InputPowerLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-power-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).InputPowerLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/input-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-lower"
func (n *Component_Transceiver_Threshold_InputPowerLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-power-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).InputPowerLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_InputPowerUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/input-power-upper YANG schema element.
type Component_Transceiver_Threshold_InputPowerUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_InputPowerUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/input-power-upper YANG schema element.
type Component_Transceiver_Threshold_InputPowerUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/input-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-upper"
func (n *Component_Transceiver_Threshold_InputPowerUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-power-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).InputPowerUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/input-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-upper"
func (n *Component_Transceiver_Threshold_InputPowerUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "input-power-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).InputPowerUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_LaserBiasCurrentLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower YANG schema element.
type Component_Transceiver_Threshold_LaserBiasCurrentLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower YANG schema element.
type Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-bias-current-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower"
func (n *Component_Transceiver_Threshold_LaserBiasCurrentLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserBiasCurrentLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-bias-current-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower"
func (n *Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserBiasCurrentLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_LaserBiasCurrentUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper YANG schema element.
type Component_Transceiver_Threshold_LaserBiasCurrentUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper YANG schema element.
type Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-bias-current-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper"
func (n *Component_Transceiver_Threshold_LaserBiasCurrentUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserBiasCurrentUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-bias-current-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper"
func (n *Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserBiasCurrentUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_LaserTemperatureLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower YANG schema element.
type Component_Transceiver_Threshold_LaserTemperatureLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_LaserTemperatureLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower YANG schema element.
type Component_Transceiver_Threshold_LaserTemperatureLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower"
func (n *Component_Transceiver_Threshold_LaserTemperatureLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserTemperatureLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower"
func (n *Component_Transceiver_Threshold_LaserTemperatureLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserTemperatureLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_LaserTemperatureUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper YANG schema element.
type Component_Transceiver_Threshold_LaserTemperatureUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_LaserTemperatureUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper YANG schema element.
type Component_Transceiver_Threshold_LaserTemperatureUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper"
func (n *Component_Transceiver_Threshold_LaserTemperatureUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserTemperatureUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper"
func (n *Component_Transceiver_Threshold_LaserTemperatureUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).LaserTemperatureUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_ModuleTemperatureLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/module-temperature-lower YANG schema element.
type Component_Transceiver_Threshold_ModuleTemperatureLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/module-temperature-lower YANG schema element.
type Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-lower"
func (n *Component_Transceiver_Threshold_ModuleTemperatureLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-temperature-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).ModuleTemperatureLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-lower"
func (n *Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-temperature-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).ModuleTemperatureLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_ModuleTemperatureUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/module-temperature-upper YANG schema element.
type Component_Transceiver_Threshold_ModuleTemperatureUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/module-temperature-upper YANG schema element.
type Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-upper"
func (n *Component_Transceiver_Threshold_ModuleTemperatureUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-temperature-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).ModuleTemperatureUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-upper"
func (n *Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-temperature-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).ModuleTemperatureUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_OutputPowerLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/output-power-lower YANG schema element.
type Component_Transceiver_Threshold_OutputPowerLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_OutputPowerLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/output-power-lower YANG schema element.
type Component_Transceiver_Threshold_OutputPowerLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-lower"
func (n *Component_Transceiver_Threshold_OutputPowerLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).OutputPowerLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-lower"
func (n *Component_Transceiver_Threshold_OutputPowerLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).OutputPowerLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_OutputPowerUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/output-power-upper YANG schema element.
type Component_Transceiver_Threshold_OutputPowerUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_OutputPowerUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/output-power-upper YANG schema element.
type Component_Transceiver_Threshold_OutputPowerUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-upper"
func (n *Component_Transceiver_Threshold_OutputPowerUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).OutputPowerUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-upper"
func (n *Component_Transceiver_Threshold_OutputPowerUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-power-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).OutputPowerUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_SeverityPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/severity YANG schema element.
type Component_Transceiver_Threshold_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_SeverityPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/severity YANG schema element.
type Component_Transceiver_Threshold_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/severity"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/severity"
func (n *Component_Transceiver_Threshold_SeverityPath) State() ygnmi.SingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewSingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/severity"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/severity"
func (n *Component_Transceiver_Threshold_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewWildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "severity"
//	Path from root:       ""
func (n *Component_Transceiver_Threshold_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewConfigQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Transceiver_Threshold",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "severity"
//	Path from root:       ""
func (n *Component_Transceiver_Threshold_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewWildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Transceiver_Threshold",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_SupplyVoltageLowerPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower YANG schema element.
type Component_Transceiver_Threshold_SupplyVoltageLowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_SupplyVoltageLowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower YANG schema element.
type Component_Transceiver_Threshold_SupplyVoltageLowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/supply-voltage-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower"
func (n *Component_Transceiver_Threshold_SupplyVoltageLowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).SupplyVoltageLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/supply-voltage-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower"
func (n *Component_Transceiver_Threshold_SupplyVoltageLowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-lower"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).SupplyVoltageLower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Threshold_SupplyVoltageUpperPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper YANG schema element.
type Component_Transceiver_Threshold_SupplyVoltageUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Threshold_SupplyVoltageUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper YANG schema element.
type Component_Transceiver_Threshold_SupplyVoltageUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/supply-voltage-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper"
func (n *Component_Transceiver_Threshold_SupplyVoltageUpperPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).SupplyVoltageUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/supply-voltage-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper"
func (n *Component_Transceiver_Threshold_SupplyVoltageUpperPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Threshold",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Threshold).SupplyVoltageUpper
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Threshold) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_ThresholdPath represents the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_ThresholdPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_ThresholdPathAny struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ThresholdPathMap represents the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_ThresholdPathMap struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ThresholdPathMapAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/thresholds/threshold YANG schema element.
type Component_Transceiver_ThresholdPathMapAny struct {
	*ygnmi.NodePath
}

// InputPowerLower (leaf): The lower power threshold for the laser input power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-input-power. This leaf
// value is compared to the instant value of optical-input-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-lower"
func (n *Component_Transceiver_ThresholdPath) InputPowerLower() *Component_Transceiver_Threshold_InputPowerLowerPath {
	ps := &Component_Transceiver_Threshold_InputPowerLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPowerLower (leaf): The lower power threshold for the laser input power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-input-power. This leaf
// value is compared to the instant value of optical-input-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-lower"
func (n *Component_Transceiver_ThresholdPathAny) InputPowerLower() *Component_Transceiver_Threshold_InputPowerLowerPathAny {
	ps := &Component_Transceiver_Threshold_InputPowerLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPowerUpper (leaf): The upper power threshold for the laser input power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-input-power. This leaf
// value is compared to the instant value of optical-input-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-upper"
func (n *Component_Transceiver_ThresholdPath) InputPowerUpper() *Component_Transceiver_Threshold_InputPowerUpperPath {
	ps := &Component_Transceiver_Threshold_InputPowerUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPowerUpper (leaf): The upper power threshold for the laser input power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-input-power. This leaf
// value is compared to the instant value of optical-input-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/input-power-upper"
func (n *Component_Transceiver_ThresholdPathAny) InputPowerUpper() *Component_Transceiver_Threshold_InputPowerUpperPathAny {
	ps := &Component_Transceiver_Threshold_InputPowerUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrentLower (leaf): The lower threshold for the laser bias current. This leaf value is
// compared to the instant value of last-bias-current.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower"
func (n *Component_Transceiver_ThresholdPath) LaserBiasCurrentLower() *Component_Transceiver_Threshold_LaserBiasCurrentLowerPath {
	ps := &Component_Transceiver_Threshold_LaserBiasCurrentLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrentLower (leaf): The lower threshold for the laser bias current. This leaf value is
// compared to the instant value of last-bias-current.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-lower"
func (n *Component_Transceiver_ThresholdPathAny) LaserBiasCurrentLower() *Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny {
	ps := &Component_Transceiver_Threshold_LaserBiasCurrentLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrentUpper (leaf): The upper threshold for the laser bias current. This leaf value is
// compared to the instant value of last-bias-current.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper"
func (n *Component_Transceiver_ThresholdPath) LaserBiasCurrentUpper() *Component_Transceiver_Threshold_LaserBiasCurrentUpperPath {
	ps := &Component_Transceiver_Threshold_LaserBiasCurrentUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrentUpper (leaf): The upper threshold for the laser bias current. This leaf value is
// compared to the instant value of last-bias-current.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-bias-current-upper"
func (n *Component_Transceiver_ThresholdPathAny) LaserBiasCurrentUpper() *Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny {
	ps := &Component_Transceiver_Threshold_LaserBiasCurrentUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserTemperatureLower (leaf): The lower temperature threshold for the laser temperature sensor.
// This leaf value is compared to the instant value of
// laser-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower"
func (n *Component_Transceiver_ThresholdPath) LaserTemperatureLower() *Component_Transceiver_Threshold_LaserTemperatureLowerPath {
	ps := &Component_Transceiver_Threshold_LaserTemperatureLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserTemperatureLower (leaf): The lower temperature threshold for the laser temperature sensor.
// This leaf value is compared to the instant value of
// laser-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-lower"
func (n *Component_Transceiver_ThresholdPathAny) LaserTemperatureLower() *Component_Transceiver_Threshold_LaserTemperatureLowerPathAny {
	ps := &Component_Transceiver_Threshold_LaserTemperatureLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserTemperatureUpper (leaf): The upper temperature threshold for the laser temperature sensor.
// This leaf value is compared to the instant value of
// laser-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper"
func (n *Component_Transceiver_ThresholdPath) LaserTemperatureUpper() *Component_Transceiver_Threshold_LaserTemperatureUpperPath {
	ps := &Component_Transceiver_Threshold_LaserTemperatureUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserTemperatureUpper (leaf): The upper temperature threshold for the laser temperature sensor.
// This leaf value is compared to the instant value of
// laser-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/laser-temperature-upper"
func (n *Component_Transceiver_ThresholdPathAny) LaserTemperatureUpper() *Component_Transceiver_Threshold_LaserTemperatureUpperPathAny {
	ps := &Component_Transceiver_Threshold_LaserTemperatureUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleTemperatureLower (leaf): The lower temperature threshold for the transceiver module. This
// leaf value is compared to the instant value of module-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-lower"
func (n *Component_Transceiver_ThresholdPath) ModuleTemperatureLower() *Component_Transceiver_Threshold_ModuleTemperatureLowerPath {
	ps := &Component_Transceiver_Threshold_ModuleTemperatureLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-temperature-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleTemperatureLower (leaf): The lower temperature threshold for the transceiver module. This
// leaf value is compared to the instant value of module-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-temperature-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-lower"
func (n *Component_Transceiver_ThresholdPathAny) ModuleTemperatureLower() *Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny {
	ps := &Component_Transceiver_Threshold_ModuleTemperatureLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-temperature-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleTemperatureUpper (leaf): The upper temperature threshold for the transceiver module. This
// leaf value is compared to the instant value of module-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-upper"
func (n *Component_Transceiver_ThresholdPath) ModuleTemperatureUpper() *Component_Transceiver_Threshold_ModuleTemperatureUpperPath {
	ps := &Component_Transceiver_Threshold_ModuleTemperatureUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-temperature-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleTemperatureUpper (leaf): The upper temperature threshold for the transceiver module. This
// leaf value is compared to the instant value of module-temperature.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-temperature-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/module-temperature-upper"
func (n *Component_Transceiver_ThresholdPathAny) ModuleTemperatureUpper() *Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny {
	ps := &Component_Transceiver_Threshold_ModuleTemperatureUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-temperature-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPowerLower (leaf): The lower power threshold for the laser output power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-output-power. This leaf
// value is compared to the instant value of optical-output-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-lower"
func (n *Component_Transceiver_ThresholdPath) OutputPowerLower() *Component_Transceiver_Threshold_OutputPowerLowerPath {
	ps := &Component_Transceiver_Threshold_OutputPowerLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPowerLower (leaf): The lower power threshold for the laser output power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-output-power. This leaf
// value is compared to the instant value of optical-output-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-lower"
func (n *Component_Transceiver_ThresholdPathAny) OutputPowerLower() *Component_Transceiver_Threshold_OutputPowerLowerPathAny {
	ps := &Component_Transceiver_Threshold_OutputPowerLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPowerUpper (leaf): The upper power threshold for the laser output power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-output-power. This leaf
// value is compared to the instant value of optical-output-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-upper"
func (n *Component_Transceiver_ThresholdPath) OutputPowerUpper() *Component_Transceiver_Threshold_OutputPowerUpperPath {
	ps := &Component_Transceiver_Threshold_OutputPowerUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPowerUpper (leaf): The upper power threshold for the laser output power. This threshold
// applies to every physical-channel on the transceiver and does not
// apply to the aggregate transceiver optical-output-power. This leaf
// value is compared to the instant value of optical-output-power.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/output-power-upper"
func (n *Component_Transceiver_ThresholdPathAny) OutputPowerUpper() *Component_Transceiver_Threshold_OutputPowerUpperPathAny {
	ps := &Component_Transceiver_Threshold_OutputPowerUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): The type of alarm to which the thresholds apply.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/severity"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/*/severity"
func (n *Component_Transceiver_ThresholdPath) Severity() *Component_Transceiver_Threshold_SeverityPath {
	ps := &Component_Transceiver_Threshold_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): The type of alarm to which the thresholds apply.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/severity"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/*/severity"
func (n *Component_Transceiver_ThresholdPathAny) Severity() *Component_Transceiver_Threshold_SeverityPathAny {
	ps := &Component_Transceiver_Threshold_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltageLower (leaf): The lower threshold for the transceiver supply voltage. This leaf
// value is compared to the instant value of supply-voltage.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower"
func (n *Component_Transceiver_ThresholdPath) SupplyVoltageLower() *Component_Transceiver_Threshold_SupplyVoltageLowerPath {
	ps := &Component_Transceiver_Threshold_SupplyVoltageLowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltageLower (leaf): The lower threshold for the transceiver supply voltage. This leaf
// value is compared to the instant value of supply-voltage.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage-lower"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-lower"
func (n *Component_Transceiver_ThresholdPathAny) SupplyVoltageLower() *Component_Transceiver_Threshold_SupplyVoltageLowerPathAny {
	ps := &Component_Transceiver_Threshold_SupplyVoltageLowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-lower"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltageUpper (leaf): The upper threshold for the transceiver supply voltage. This leaf
// value is compared to the instant value of supply-voltage.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper"
func (n *Component_Transceiver_ThresholdPath) SupplyVoltageUpper() *Component_Transceiver_Threshold_SupplyVoltageUpperPath {
	ps := &Component_Transceiver_Threshold_SupplyVoltageUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltageUpper (leaf): The upper threshold for the transceiver supply voltage. This leaf
// value is compared to the instant value of supply-voltage.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage-upper"
//	Path from root:       "/components/component/transceiver/thresholds/threshold/state/supply-voltage-upper"
func (n *Component_Transceiver_ThresholdPathAny) SupplyVoltageUpper() *Component_Transceiver_Threshold_SupplyVoltageUpperPathAny {
	ps := &Component_Transceiver_Threshold_SupplyVoltageUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ThresholdPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Threshold] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Threshold](
		"Component_Transceiver_Threshold",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ThresholdPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Threshold] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Threshold](
		"Component_Transceiver_Threshold",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ThresholdPathMap) State() ygnmi.SingletonQuery[map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold] {
	return ygnmi.NewSingletonQuery[map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold, bool) {
			ret := gs.(*oc.Component_Transceiver).Threshold
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:thresholds"},
			PostRelPath: []string{"openconfig-platform-transceiver:threshold"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ThresholdPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold] {
	return ygnmi.NewWildcardQuery[map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY]*oc.Component_Transceiver_Threshold, bool) {
			ret := gs.(*oc.Component_Transceiver).Threshold
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:thresholds"},
			PostRelPath: []string{"openconfig-platform-transceiver:threshold"},
		},
	)
}
