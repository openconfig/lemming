/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_Temperature_IntervalPath represents the /openconfig-platform/components/component/state/temperature/interval YANG schema element.
type Component_Temperature_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/interval YANG schema element.
type Component_Temperature_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/state/temperature/interval"
func (n *Component_Temperature_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/state/temperature/interval"
func (n *Component_Temperature_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_MaxPath represents the /openconfig-platform/components/component/state/temperature/max YANG schema element.
type Component_Temperature_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/max YANG schema element.
type Component_Temperature_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/state/temperature/max"
func (n *Component_Temperature_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/state/temperature/max"
func (n *Component_Temperature_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_MaxTimePath represents the /openconfig-platform/components/component/state/temperature/max-time YANG schema element.
type Component_Temperature_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/max-time YANG schema element.
type Component_Temperature_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/state/temperature/max-time"
func (n *Component_Temperature_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/state/temperature/max-time"
func (n *Component_Temperature_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_MinPath represents the /openconfig-platform/components/component/state/temperature/min YANG schema element.
type Component_Temperature_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/min YANG schema element.
type Component_Temperature_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/state/temperature/min"
func (n *Component_Temperature_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/state/temperature/min"
func (n *Component_Temperature_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_MinTimePath represents the /openconfig-platform/components/component/state/temperature/min-time YANG schema element.
type Component_Temperature_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/min-time YANG schema element.
type Component_Temperature_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/state/temperature/min-time"
func (n *Component_Temperature_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/state/temperature/min-time"
func (n *Component_Temperature_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Temperature).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_TemperaturePath represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_TemperaturePath struct {
	*ygnmi.NodePath
}

// Component_TemperaturePathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_TemperaturePathAny struct {
	*ygnmi.NodePath
}

// AlarmSeverity (leaf): The severity of the current alarm.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-severity"
//	Path from root:       "/components/component/state/temperature/alarm-severity"
func (n *Component_TemperaturePath) AlarmSeverity() *Component_Temperature_AlarmSeverityPath {
	ps := &Component_Temperature_AlarmSeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmSeverity (leaf): The severity of the current alarm.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-severity"
//	Path from root:       "/components/component/state/temperature/alarm-severity"
func (n *Component_TemperaturePathAny) AlarmSeverity() *Component_Temperature_AlarmSeverityPathAny {
	ps := &Component_Temperature_AlarmSeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmStatus (leaf): A value of true indicates the alarm has been raised or
// asserted.  The value should be false when the alarm is
// cleared.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-status"
//	Path from root:       "/components/component/state/temperature/alarm-status"
func (n *Component_TemperaturePath) AlarmStatus() *Component_Temperature_AlarmStatusPath {
	ps := &Component_Temperature_AlarmStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmStatus (leaf): A value of true indicates the alarm has been raised or
// asserted.  The value should be false when the alarm is
// cleared.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-status"
//	Path from root:       "/components/component/state/temperature/alarm-status"
func (n *Component_TemperaturePathAny) AlarmStatus() *Component_Temperature_AlarmStatusPathAny {
	ps := &Component_Temperature_AlarmStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmThreshold (leaf): The threshold value that was crossed for this alarm.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-threshold"
//	Path from root:       "/components/component/state/temperature/alarm-threshold"
func (n *Component_TemperaturePath) AlarmThreshold() *Component_Temperature_AlarmThresholdPath {
	ps := &Component_Temperature_AlarmThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AlarmThreshold (leaf): The threshold value that was crossed for this alarm.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-threshold"
//	Path from root:       "/components/component/state/temperature/alarm-threshold"
func (n *Component_TemperaturePathAny) AlarmThreshold() *Component_Temperature_AlarmThresholdPathAny {
	ps := &Component_Temperature_AlarmThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarm-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/state/temperature/avg"
func (n *Component_TemperaturePath) Avg() *Component_Temperature_AvgPath {
	ps := &Component_Temperature_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/state/temperature/avg"
func (n *Component_TemperaturePathAny) Avg() *Component_Temperature_AvgPathAny {
	ps := &Component_Temperature_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/state/temperature/instant"
func (n *Component_TemperaturePath) Instant() *Component_Temperature_InstantPath {
	ps := &Component_Temperature_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/state/temperature/instant"
func (n *Component_TemperaturePathAny) Instant() *Component_Temperature_InstantPathAny {
	ps := &Component_Temperature_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/state/temperature/interval"
func (n *Component_TemperaturePath) Interval() *Component_Temperature_IntervalPath {
	ps := &Component_Temperature_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/state/temperature/interval"
func (n *Component_TemperaturePathAny) Interval() *Component_Temperature_IntervalPathAny {
	ps := &Component_Temperature_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/state/temperature/max"
func (n *Component_TemperaturePath) Max() *Component_Temperature_MaxPath {
	ps := &Component_Temperature_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/state/temperature/max"
func (n *Component_TemperaturePathAny) Max() *Component_Temperature_MaxPathAny {
	ps := &Component_Temperature_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/state/temperature/max-time"
func (n *Component_TemperaturePath) MaxTime() *Component_Temperature_MaxTimePath {
	ps := &Component_Temperature_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/state/temperature/max-time"
func (n *Component_TemperaturePathAny) MaxTime() *Component_Temperature_MaxTimePathAny {
	ps := &Component_Temperature_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/state/temperature/min"
func (n *Component_TemperaturePath) Min() *Component_Temperature_MinPath {
	ps := &Component_Temperature_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/state/temperature/min"
func (n *Component_TemperaturePathAny) Min() *Component_Temperature_MinPathAny {
	ps := &Component_Temperature_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/state/temperature/min-time"
func (n *Component_TemperaturePath) MinTime() *Component_Temperature_MinTimePath {
	ps := &Component_Temperature_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/state/temperature/min-time"
func (n *Component_TemperaturePathAny) MinTime() *Component_Temperature_MinTimePathAny {
	ps := &Component_Temperature_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_TemperaturePath) State() ygnmi.SingletonQuery[*oc.Component_Temperature] {
	return ygnmi.NewSingletonQuery[*oc.Component_Temperature](
		"Component_Temperature",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_TemperaturePathAny) State() ygnmi.WildcardQuery[*oc.Component_Temperature] {
	return ygnmi.NewWildcardQuery[*oc.Component_Temperature](
		"Component_Temperature",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_ConnectorTypePath represents the /openconfig-platform/components/component/transceiver/state/connector-type YANG schema element.
type Component_Transceiver_ConnectorTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_ConnectorTypePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/connector-type YANG schema element.
type Component_Transceiver_ConnectorTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/connector-type"
//	Path from root:       "/components/component/transceiver/state/connector-type"
func (n *Component_Transceiver_ConnectorTypePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_FIBER_CONNECTOR_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_FIBER_CONNECTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connector-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_FIBER_CONNECTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ConnectorType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/connector-type"
//	Path from root:       "/components/component/transceiver/state/connector-type"
func (n *Component_Transceiver_ConnectorTypePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_FIBER_CONNECTOR_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_FIBER_CONNECTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connector-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_FIBER_CONNECTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ConnectorType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_DateCodePath represents the /openconfig-platform/components/component/transceiver/state/date-code YANG schema element.
type Component_Transceiver_DateCodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_DateCodePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/date-code YANG schema element.
type Component_Transceiver_DateCodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/date-code"
//	Path from root:       "/components/component/transceiver/state/date-code"
func (n *Component_Transceiver_DateCodePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "date-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).DateCode
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/date-code"
//	Path from root:       "/components/component/transceiver/state/date-code"
func (n *Component_Transceiver_DateCodePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "date-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).DateCode
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_EnabledPath represents the /openconfig-platform/components/component/transceiver/state/enabled YANG schema element.
type Component_Transceiver_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_EnabledPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/enabled YANG schema element.
type Component_Transceiver_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/enabled"
//	Path from root:       "/components/component/transceiver/state/enabled"
func (n *Component_Transceiver_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/enabled"
//	Path from root:       "/components/component/transceiver/state/enabled"
func (n *Component_Transceiver_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/enabled"
//	Path from root:       "/components/component/transceiver/config/enabled"
func (n *Component_Transceiver_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Component_Transceiver",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/enabled"
//	Path from root:       "/components/component/transceiver/config/enabled"
func (n *Component_Transceiver_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_EthernetPmdPath represents the /openconfig-platform/components/component/transceiver/state/ethernet-pmd YANG schema element.
type Component_Transceiver_EthernetPmdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_EthernetPmdPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/ethernet-pmd YANG schema element.
type Component_Transceiver_EthernetPmdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/ethernet-pmd"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd"
func (n *Component_Transceiver_EthernetPmdPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmd
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/ethernet-pmd"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd"
func (n *Component_Transceiver_EthernetPmdPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmd
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_EthernetPmdPreconfPath represents the /openconfig-platform/components/component/transceiver/state/ethernet-pmd-preconf YANG schema element.
type Component_Transceiver_EthernetPmdPreconfPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_EthernetPmdPreconfPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/ethernet-pmd-preconf YANG schema element.
type Component_Transceiver_EthernetPmdPreconfPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd-preconf"
func (n *Component_Transceiver_EthernetPmdPreconfPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmdPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd-preconf"
func (n *Component_Transceiver_EthernetPmdPreconfPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmdPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/config/ethernet-pmd-preconf"
func (n *Component_Transceiver_EthernetPmdPreconfPath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethernet-pmd-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmdPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/config/ethernet-pmd-preconf"
func (n *Component_Transceiver_EthernetPmdPreconfPathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_ETHERNET_PMD_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethernet-pmd-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_ETHERNET_PMD_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).EthernetPmdPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FaultConditionPath represents the /openconfig-platform/components/component/transceiver/state/fault-condition YANG schema element.
type Component_Transceiver_FaultConditionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FaultConditionPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fault-condition YANG schema element.
type Component_Transceiver_FaultConditionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fault-condition"
//	Path from root:       "/components/component/transceiver/state/fault-condition"
func (n *Component_Transceiver_FaultConditionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fault-condition"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).FaultCondition
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fault-condition"
//	Path from root:       "/components/component/transceiver/state/fault-condition"
func (n *Component_Transceiver_FaultConditionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fault-condition"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver).FaultCondition
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecCorrectedBitsPath represents the /openconfig-platform/components/component/transceiver/state/fec-corrected-bits YANG schema element.
type Component_Transceiver_FecCorrectedBitsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecCorrectedBitsPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-corrected-bits YANG schema element.
type Component_Transceiver_FecCorrectedBitsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bits"
func (n *Component_Transceiver_FecCorrectedBitsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecCorrectedBits
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bits"
func (n *Component_Transceiver_FecCorrectedBitsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecCorrectedBits
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecCorrectedBytesPath represents the /openconfig-platform/components/component/transceiver/state/fec-corrected-bytes YANG schema element.
type Component_Transceiver_FecCorrectedBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecCorrectedBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-corrected-bytes YANG schema element.
type Component_Transceiver_FecCorrectedBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bytes"
func (n *Component_Transceiver_FecCorrectedBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecCorrectedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bytes"
func (n *Component_Transceiver_FecCorrectedBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecCorrectedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecModePath represents the /openconfig-platform/components/component/transceiver/state/fec-mode YANG schema element.
type Component_Transceiver_FecModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecModePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-mode YANG schema element.
type Component_Transceiver_FecModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-mode"
//	Path from root:       "/components/component/transceiver/state/fec-mode"
func (n *Component_Transceiver_FecModePath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_FEC_MODE_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_FEC_MODE_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_MODE_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-mode"
//	Path from root:       "/components/component/transceiver/state/fec-mode"
func (n *Component_Transceiver_FecModePathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_FEC_MODE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_FEC_MODE_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_MODE_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/fec-mode"
//	Path from root:       "/components/component/transceiver/config/fec-mode"
func (n *Component_Transceiver_FecModePath) Config() ygnmi.ConfigQuery[oc.E_PlatformTypes_FEC_MODE_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PlatformTypes_FEC_MODE_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_MODE_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/fec-mode"
//	Path from root:       "/components/component/transceiver/config/fec-mode"
func (n *Component_Transceiver_FecModePathAny) Config() ygnmi.WildcardQuery[oc.E_PlatformTypes_FEC_MODE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_FEC_MODE_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fec-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_MODE_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecStatusPath represents the /openconfig-platform/components/component/transceiver/state/fec-status YANG schema element.
type Component_Transceiver_FecStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecStatusPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-status YANG schema element.
type Component_Transceiver_FecStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-status"
//	Path from root:       "/components/component/transceiver/state/fec-status"
func (n *Component_Transceiver_FecStatusPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_FEC_STATUS_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_FEC_STATUS_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_STATUS_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-status"
//	Path from root:       "/components/component/transceiver/state/fec-status"
func (n *Component_Transceiver_FecStatusPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_FEC_STATUS_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_FEC_STATUS_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_FEC_STATUS_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FecStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecUncorrectableBlocksPath represents the /openconfig-platform/components/component/transceiver/state/fec-uncorrectable-blocks YANG schema element.
type Component_Transceiver_FecUncorrectableBlocksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecUncorrectableBlocksPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-uncorrectable-blocks YANG schema element.
type Component_Transceiver_FecUncorrectableBlocksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-blocks"
func (n *Component_Transceiver_FecUncorrectableBlocksPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-blocks"
func (n *Component_Transceiver_FecUncorrectableBlocksPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecUncorrectableBlocks
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FecUncorrectableWordsPath represents the /openconfig-platform/components/component/transceiver/state/fec-uncorrectable-words YANG schema element.
type Component_Transceiver_FecUncorrectableWordsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FecUncorrectableWordsPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/fec-uncorrectable-words YANG schema element.
type Component_Transceiver_FecUncorrectableWordsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-words"
func (n *Component_Transceiver_FecUncorrectableWordsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecUncorrectableWords
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-words"
func (n *Component_Transceiver_FecUncorrectableWordsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver).FecUncorrectableWords
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FormFactorPath represents the /openconfig-platform/components/component/transceiver/state/form-factor YANG schema element.
type Component_Transceiver_FormFactorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FormFactorPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/form-factor YANG schema element.
type Component_Transceiver_FormFactorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/form-factor"
//	Path from root:       "/components/component/transceiver/state/form-factor"
func (n *Component_Transceiver_FormFactorPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "form-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactor
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/form-factor"
//	Path from root:       "/components/component/transceiver/state/form-factor"
func (n *Component_Transceiver_FormFactorPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "form-factor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactor
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_FormFactorPreconfPath represents the /openconfig-platform/components/component/transceiver/state/form-factor-preconf YANG schema element.
type Component_Transceiver_FormFactorPreconfPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_FormFactorPreconfPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/form-factor-preconf YANG schema element.
type Component_Transceiver_FormFactorPreconfPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/state/form-factor-preconf"
func (n *Component_Transceiver_FormFactorPreconfPath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "form-factor-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactorPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/state/form-factor-preconf"
func (n *Component_Transceiver_FormFactorPreconfPathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "form-factor-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactorPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/config/form-factor-preconf"
func (n *Component_Transceiver_FormFactorPreconfPath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "form-factor-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactorPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/config/form-factor-preconf"
func (n *Component_Transceiver_FormFactorPreconfPathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "form-factor-preconf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).FormFactorPreconf
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_ModuleFunctionalTypePath represents the /openconfig-platform/components/component/transceiver/state/module-functional-type YANG schema element.
type Component_Transceiver_ModuleFunctionalTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_ModuleFunctionalTypePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/module-functional-type YANG schema element.
type Component_Transceiver_ModuleFunctionalTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-functional-type"
//	Path from root:       "/components/component/transceiver/state/module-functional-type"
func (n *Component_Transceiver_ModuleFunctionalTypePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-functional-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ModuleFunctionalType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/module-functional-type"
//	Path from root:       "/components/component/transceiver/state/module-functional-type"
func (n *Component_Transceiver_ModuleFunctionalTypePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-functional-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ModuleFunctionalType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/module-functional-type"
//	Path from root:       "/components/component/transceiver/config/module-functional-type"
func (n *Component_Transceiver_ModuleFunctionalTypePath) Config() ygnmi.ConfigQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "module-functional-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ModuleFunctionalType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/module-functional-type"
//	Path from root:       "/components/component/transceiver/config/module-functional-type"
func (n *Component_Transceiver_ModuleFunctionalTypePathAny) Config() ygnmi.WildcardQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE](
		"Component_Transceiver",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "module-functional-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_TRANSCEIVER_MODULE_FUNCTIONAL_TYPE, bool) {
			ret := gs.(*oc.Component_Transceiver).ModuleFunctionalType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OtnComplianceCodePath represents the /openconfig-platform/components/component/transceiver/state/otn-compliance-code YANG schema element.
type Component_Transceiver_OtnComplianceCodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OtnComplianceCodePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/otn-compliance-code YANG schema element.
type Component_Transceiver_OtnComplianceCodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/otn-compliance-code"
//	Path from root:       "/components/component/transceiver/state/otn-compliance-code"
func (n *Component_Transceiver_OtnComplianceCodePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_OTN_APPLICATION_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_OTN_APPLICATION_CODE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "otn-compliance-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_OTN_APPLICATION_CODE, bool) {
			ret := gs.(*oc.Component_Transceiver).OtnComplianceCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/otn-compliance-code"
//	Path from root:       "/components/component/transceiver/state/otn-compliance-code"
func (n *Component_Transceiver_OtnComplianceCodePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_OTN_APPLICATION_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_OTN_APPLICATION_CODE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "otn-compliance-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_OTN_APPLICATION_CODE, bool) {
			ret := gs.(*oc.Component_Transceiver).OtnComplianceCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PresentPath represents the /openconfig-platform/components/component/transceiver/state/present YANG schema element.
type Component_Transceiver_PresentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PresentPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/present YANG schema element.
type Component_Transceiver_PresentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/present"
//	Path from root:       "/components/component/transceiver/state/present"
func (n *Component_Transceiver_PresentPath) State() ygnmi.SingletonQuery[oc.E_Transceiver_Present] {
	return ygnmi.NewSingletonQuery[oc.E_Transceiver_Present](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "present"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transceiver_Present, bool) {
			ret := gs.(*oc.Component_Transceiver).Present
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/present"
//	Path from root:       "/components/component/transceiver/state/present"
func (n *Component_Transceiver_PresentPathAny) State() ygnmi.WildcardQuery[oc.E_Transceiver_Present] {
	return ygnmi.NewWildcardQuery[oc.E_Transceiver_Present](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "present"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transceiver_Present, bool) {
			ret := gs.(*oc.Component_Transceiver).Present
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SerialNoPath represents the /openconfig-platform/components/component/transceiver/state/serial-no YANG schema element.
type Component_Transceiver_SerialNoPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SerialNoPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/serial-no YANG schema element.
type Component_Transceiver_SerialNoPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/transceiver/state/serial-no"
func (n *Component_Transceiver_SerialNoPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).SerialNo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/transceiver/state/serial-no"
func (n *Component_Transceiver_SerialNoPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).SerialNo
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_SonetSdhComplianceCodePath represents the /openconfig-platform/components/component/transceiver/state/sonet-sdh-compliance-code YANG schema element.
type Component_Transceiver_SonetSdhComplianceCodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_SonetSdhComplianceCodePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/sonet-sdh-compliance-code YANG schema element.
type Component_Transceiver_SonetSdhComplianceCodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/sonet-sdh-compliance-code"
//	Path from root:       "/components/component/transceiver/state/sonet-sdh-compliance-code"
func (n *Component_Transceiver_SonetSdhComplianceCodePath) State() ygnmi.SingletonQuery[oc.E_TransportTypes_SONET_APPLICATION_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_TransportTypes_SONET_APPLICATION_CODE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sonet-sdh-compliance-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_SONET_APPLICATION_CODE, bool) {
			ret := gs.(*oc.Component_Transceiver).SonetSdhComplianceCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/sonet-sdh-compliance-code"
//	Path from root:       "/components/component/transceiver/state/sonet-sdh-compliance-code"
func (n *Component_Transceiver_SonetSdhComplianceCodePathAny) State() ygnmi.WildcardQuery[oc.E_TransportTypes_SONET_APPLICATION_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_TransportTypes_SONET_APPLICATION_CODE](
		"Component_Transceiver",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sonet-sdh-compliance-code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_TransportTypes_SONET_APPLICATION_CODE, bool) {
			ret := gs.(*oc.Component_Transceiver).SonetSdhComplianceCode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_VendorPath represents the /openconfig-platform/components/component/transceiver/state/vendor YANG schema element.
type Component_Transceiver_VendorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_VendorPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/vendor YANG schema element.
type Component_Transceiver_VendorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor"
//	Path from root:       "/components/component/transceiver/state/vendor"
func (n *Component_Transceiver_VendorPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).Vendor
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor"
//	Path from root:       "/components/component/transceiver/state/vendor"
func (n *Component_Transceiver_VendorPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).Vendor
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_VendorPartPath represents the /openconfig-platform/components/component/transceiver/state/vendor-part YANG schema element.
type Component_Transceiver_VendorPartPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_VendorPartPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/vendor-part YANG schema element.
type Component_Transceiver_VendorPartPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor-part"
//	Path from root:       "/components/component/transceiver/state/vendor-part"
func (n *Component_Transceiver_VendorPartPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-part"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).VendorPart
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor-part"
//	Path from root:       "/components/component/transceiver/state/vendor-part"
func (n *Component_Transceiver_VendorPartPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-part"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).VendorPart
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_VendorRevPath represents the /openconfig-platform/components/component/transceiver/state/vendor-rev YANG schema element.
type Component_Transceiver_VendorRevPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_VendorRevPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/vendor-rev YANG schema element.
type Component_Transceiver_VendorRevPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor-rev"
//	Path from root:       "/components/component/transceiver/state/vendor-rev"
func (n *Component_Transceiver_VendorRevPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-rev"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).VendorRev
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/vendor-rev"
//	Path from root:       "/components/component/transceiver/state/vendor-rev"
func (n *Component_Transceiver_VendorRevPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vendor-rev"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver).VendorRev
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_TransceiverPath represents the /openconfig-platform/components/component/transceiver YANG schema element.
type Component_TransceiverPath struct {
	*ygnmi.NodePath
}

// Component_TransceiverPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver YANG schema element.
type Component_TransceiverPathAny struct {
	*ygnmi.NodePath
}

// ChannelAny (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
func (n *Component_TransceiverPath) ChannelAny() *Component_Transceiver_ChannelPathAny {
	ps := &Component_Transceiver_ChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ChannelAny (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
func (n *Component_TransceiverPathAny) ChannelAny() *Component_Transceiver_ChannelPathAny {
	ps := &Component_Transceiver_ChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Channel (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
//
//	Index: uint16
func (n *Component_TransceiverPath) Channel(Index uint16) *Component_Transceiver_ChannelPath {
	ps := &Component_Transceiver_ChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Channel (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
//
//	Index: uint16
func (n *Component_TransceiverPathAny) Channel(Index uint16) *Component_Transceiver_ChannelPathAny {
	ps := &Component_Transceiver_ChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels", "channel"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ChannelMap (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
func (n *Component_TransceiverPath) ChannelMap() *Component_Transceiver_ChannelPathMap {
	ps := &Component_Transceiver_ChannelPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ChannelMap (list): List of client channels, keyed by index within a physical
// client port.  A physical port with a single channel would
// have a single zero-indexed element
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "physical-channels/channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel"
func (n *Component_TransceiverPathAny) ChannelMap() *Component_Transceiver_ChannelPathMapAny {
	ps := &Component_Transceiver_ChannelPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"physical-channels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConnectorType (leaf): Connector type used on this port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/connector-type"
//	Path from root:       "/components/component/transceiver/state/connector-type"
func (n *Component_TransceiverPath) ConnectorType() *Component_Transceiver_ConnectorTypePath {
	ps := &Component_Transceiver_ConnectorTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connector-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectorType (leaf): Connector type used on this port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/connector-type"
//	Path from root:       "/components/component/transceiver/state/connector-type"
func (n *Component_TransceiverPathAny) ConnectorType() *Component_Transceiver_ConnectorTypePathAny {
	ps := &Component_Transceiver_ConnectorTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "connector-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DateCode (leaf): Representation of the transceiver date code, typically
// stored as YYMMDD.  The time portion of the value is
// undefined and not intended to be read.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/date-code"
//	Path from root:       "/components/component/transceiver/state/date-code"
func (n *Component_TransceiverPath) DateCode() *Component_Transceiver_DateCodePath {
	ps := &Component_Transceiver_DateCodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "date-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DateCode (leaf): Representation of the transceiver date code, typically
// stored as YYMMDD.  The time portion of the value is
// undefined and not intended to be read.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/date-code"
//	Path from root:       "/components/component/transceiver/state/date-code"
func (n *Component_TransceiverPathAny) DateCode() *Component_Transceiver_DateCodePathAny {
	ps := &Component_Transceiver_DateCodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "date-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns power on / off to the transceiver -- provides a means
// to power on/off the transceiver (in the case of SFP, SFP+,
// QSFP,...) or enable high-power mode (in the case of CFP,
// CFP2, CFP4) and is optionally supported (device can choose to
// always enable).  True = power on / high power, False =
// powered off
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/enabled"
//	Path from root:       "/components/component/transceiver/*/enabled"
func (n *Component_TransceiverPath) Enabled() *Component_Transceiver_EnabledPath {
	ps := &Component_Transceiver_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Turns power on / off to the transceiver -- provides a means
// to power on/off the transceiver (in the case of SFP, SFP+,
// QSFP,...) or enable high-power mode (in the case of CFP,
// CFP2, CFP4) and is optionally supported (device can choose to
// always enable).  True = power on / high power, False =
// powered off
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/enabled"
//	Path from root:       "/components/component/transceiver/*/enabled"
func (n *Component_TransceiverPathAny) Enabled() *Component_Transceiver_EnabledPathAny {
	ps := &Component_Transceiver_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EthernetPmd (leaf): Ethernet PMD (physical medium dependent sublayer) that the
// transceiver supports. The SFF/QSFP MSAs have registers for
// this and CFP MSA has similar.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/ethernet-pmd"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd"
func (n *Component_TransceiverPath) EthernetPmd() *Component_Transceiver_EthernetPmdPath {
	ps := &Component_Transceiver_EthernetPmdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EthernetPmd (leaf): Ethernet PMD (physical medium dependent sublayer) that the
// transceiver supports. The SFF/QSFP MSAs have registers for
// this and CFP MSA has similar.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/ethernet-pmd"
//	Path from root:       "/components/component/transceiver/state/ethernet-pmd"
func (n *Component_TransceiverPathAny) EthernetPmd() *Component_Transceiver_EthernetPmdPathAny {
	ps := &Component_Transceiver_EthernetPmdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ethernet-pmd"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EthernetPmdPreconf (leaf): The Ethernet PMD is a property of the optical transceiver
// used on the port, indicating the type of physical connection.
// It is included in configuration data to allow pre-configuring
// a port/transceiver with the expected PMD.  The actual PMD is
// indicated by the ethernet-pmd state leaf.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/*/ethernet-pmd-preconf"
func (n *Component_TransceiverPath) EthernetPmdPreconf() *Component_Transceiver_EthernetPmdPreconfPath {
	ps := &Component_Transceiver_EthernetPmdPreconfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethernet-pmd-preconf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EthernetPmdPreconf (leaf): The Ethernet PMD is a property of the optical transceiver
// used on the port, indicating the type of physical connection.
// It is included in configuration data to allow pre-configuring
// a port/transceiver with the expected PMD.  The actual PMD is
// indicated by the ethernet-pmd state leaf.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/ethernet-pmd-preconf"
//	Path from root:       "/components/component/transceiver/*/ethernet-pmd-preconf"
func (n *Component_TransceiverPathAny) EthernetPmdPreconf() *Component_Transceiver_EthernetPmdPreconfPathAny {
	ps := &Component_Transceiver_EthernetPmdPreconfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethernet-pmd-preconf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FaultCondition (leaf): Indicates if a fault condition exists in the transceiver
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fault-condition"
//	Path from root:       "/components/component/transceiver/state/fault-condition"
func (n *Component_TransceiverPath) FaultCondition() *Component_Transceiver_FaultConditionPath {
	ps := &Component_Transceiver_FaultConditionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fault-condition"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FaultCondition (leaf): Indicates if a fault condition exists in the transceiver
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fault-condition"
//	Path from root:       "/components/component/transceiver/state/fault-condition"
func (n *Component_TransceiverPathAny) FaultCondition() *Component_Transceiver_FaultConditionPathAny {
	ps := &Component_Transceiver_FaultConditionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fault-condition"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBits (leaf): The number of bits that were corrected by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bits"
func (n *Component_TransceiverPath) FecCorrectedBits() *Component_Transceiver_FecCorrectedBitsPath {
	ps := &Component_Transceiver_FecCorrectedBitsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBits (leaf): The number of bits that were corrected by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-corrected-bits"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bits"
func (n *Component_TransceiverPathAny) FecCorrectedBits() *Component_Transceiver_FecCorrectedBitsPathAny {
	ps := &Component_Transceiver_FecCorrectedBitsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bits"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBytes (leaf): The number of bytes that were corrected by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bytes"
func (n *Component_TransceiverPath) FecCorrectedBytes() *Component_Transceiver_FecCorrectedBytesPath {
	ps := &Component_Transceiver_FecCorrectedBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecCorrectedBytes (leaf): The number of bytes that were corrected by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-corrected-bytes"
//	Path from root:       "/components/component/transceiver/state/fec-corrected-bytes"
func (n *Component_TransceiverPathAny) FecCorrectedBytes() *Component_Transceiver_FecCorrectedBytesPathAny {
	ps := &Component_Transceiver_FecCorrectedBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-corrected-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecMode (leaf): The FEC mode indicates the mode of operation for the
// transceiver's FEC. This defines typical operational modes
// and does not aim to specify more granular FEC capabilities.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/fec-mode"
//	Path from root:       "/components/component/transceiver/*/fec-mode"
func (n *Component_TransceiverPath) FecMode() *Component_Transceiver_FecModePath {
	ps := &Component_Transceiver_FecModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fec-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecMode (leaf): The FEC mode indicates the mode of operation for the
// transceiver's FEC. This defines typical operational modes
// and does not aim to specify more granular FEC capabilities.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/fec-mode"
//	Path from root:       "/components/component/transceiver/*/fec-mode"
func (n *Component_TransceiverPathAny) FecMode() *Component_Transceiver_FecModePathAny {
	ps := &Component_Transceiver_FecModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fec-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecStatus (leaf): Operational status of FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-status"
//	Path from root:       "/components/component/transceiver/state/fec-status"
func (n *Component_TransceiverPath) FecStatus() *Component_Transceiver_FecStatusPath {
	ps := &Component_Transceiver_FecStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecStatus (leaf): Operational status of FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-status"
//	Path from root:       "/components/component/transceiver/state/fec-status"
func (n *Component_TransceiverPathAny) FecStatus() *Component_Transceiver_FecStatusPathAny {
	ps := &Component_Transceiver_FecStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-blocks"
func (n *Component_TransceiverPath) FecUncorrectableBlocks() *Component_Transceiver_FecUncorrectableBlocksPath {
	ps := &Component_Transceiver_FecUncorrectableBlocksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableBlocks (leaf): The number of blocks that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-blocks"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-blocks"
func (n *Component_TransceiverPathAny) FecUncorrectableBlocks() *Component_Transceiver_FecUncorrectableBlocksPathAny {
	ps := &Component_Transceiver_FecUncorrectableBlocksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-blocks"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableWords (leaf): The number of words that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-words"
func (n *Component_TransceiverPath) FecUncorrectableWords() *Component_Transceiver_FecUncorrectableWordsPath {
	ps := &Component_Transceiver_FecUncorrectableWordsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FecUncorrectableWords (leaf): The number of words that were uncorrectable by the FEC
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fec-uncorrectable-words"
//	Path from root:       "/components/component/transceiver/state/fec-uncorrectable-words"
func (n *Component_TransceiverPathAny) FecUncorrectableWords() *Component_Transceiver_FecUncorrectableWordsPathAny {
	ps := &Component_Transceiver_FecUncorrectableWordsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fec-uncorrectable-words"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FormFactor (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/form-factor"
//	Path from root:       "/components/component/transceiver/state/form-factor"
func (n *Component_TransceiverPath) FormFactor() *Component_Transceiver_FormFactorPath {
	ps := &Component_Transceiver_FormFactorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "form-factor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FormFactor (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/form-factor"
//	Path from root:       "/components/component/transceiver/state/form-factor"
func (n *Component_TransceiverPathAny) FormFactor() *Component_Transceiver_FormFactorPathAny {
	ps := &Component_Transceiver_FormFactorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "form-factor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FormFactorPreconf (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
// The form factor is included in configuration data to allow
// pre-configuring a device with the expected type of
// transceiver ahead of deployment.  The corresponding state
// leaf should reflect the actual transceiver type plugged into
// the system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/*/form-factor-preconf"
func (n *Component_TransceiverPath) FormFactorPreconf() *Component_Transceiver_FormFactorPreconfPath {
	ps := &Component_Transceiver_FormFactorPreconfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "form-factor-preconf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FormFactorPreconf (leaf): Indicates the type of optical transceiver used on this
// port.  If the client port is built into the device and not
// pluggable, then non-pluggable is the corresponding state. If
// a device port supports multiple form factors (e.g. QSFP28
// and QSFP+, then the value of the transceiver installed shall
// be reported. If no transceiver is present, then the value of
// the highest rate form factor shall be reported
// (QSFP28, for example).
//
// The form factor is included in configuration data to allow
// pre-configuring a device with the expected type of
// transceiver ahead of deployment.  The corresponding state
// leaf should reflect the actual transceiver type plugged into
// the system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/form-factor-preconf"
//	Path from root:       "/components/component/transceiver/*/form-factor-preconf"
func (n *Component_TransceiverPathAny) FormFactorPreconf() *Component_Transceiver_FormFactorPreconfPathAny {
	ps := &Component_Transceiver_FormFactorPreconfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "form-factor-preconf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/state/input-power"
func (n *Component_TransceiverPath) InputPower() *Component_Transceiver_InputPowerPath {
	ps := &Component_Transceiver_InputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/state/input-power"
func (n *Component_TransceiverPathAny) InputPower() *Component_Transceiver_InputPowerPathAny {
	ps := &Component_Transceiver_InputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaneAny (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
func (n *Component_TransceiverPath) LaneAny() *Component_Transceiver_LanePathAny {
	ps := &Component_Transceiver_LanePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes", "lane"},
			map[string]interface{}{"lane-number": "*"},
			n,
		),
	}
	return ps
}

// LaneAny (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
func (n *Component_TransceiverPathAny) LaneAny() *Component_Transceiver_LanePathAny {
	ps := &Component_Transceiver_LanePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes", "lane"},
			map[string]interface{}{"lane-number": "*"},
			n,
		),
	}
	return ps
}

// Lane (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
//
//	LaneNumber: uint8
func (n *Component_TransceiverPath) Lane(LaneNumber uint8) *Component_Transceiver_LanePath {
	ps := &Component_Transceiver_LanePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes", "lane"},
			map[string]interface{}{"lane-number": LaneNumber},
			n,
		),
	}
	return ps
}

// Lane (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
//
//	LaneNumber: uint8
func (n *Component_TransceiverPathAny) Lane(LaneNumber uint8) *Component_Transceiver_LanePathAny {
	ps := &Component_Transceiver_LanePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes", "lane"},
			map[string]interface{}{"lane-number": LaneNumber},
			n,
		),
	}
	return ps
}

// LaneMap (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
func (n *Component_TransceiverPath) LaneMap() *Component_Transceiver_LanePathMap {
	ps := &Component_Transceiver_LanePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaneMap (list): List of electrical host lanes, keyed by lane number.
// The host lanes of a transceiver constitute its electrical interface
// with the host system.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-lanes/lane"
//	Path from root:       "/components/component/transceiver/host-lanes/lane"
func (n *Component_TransceiverPathAny) LaneMap() *Component_Transceiver_LanePathMapAny {
	ps := &Component_Transceiver_LanePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-lanes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current"
func (n *Component_TransceiverPath) LaserBiasCurrent() *Component_Transceiver_LaserBiasCurrentPath {
	ps := &Component_Transceiver_LaserBiasCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current"
func (n *Component_TransceiverPathAny) LaserBiasCurrent() *Component_Transceiver_LaserBiasCurrentPathAny {
	ps := &Component_Transceiver_LaserBiasCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModuleFunctionalType (leaf): Indicates the module functional type which represents the
// functional capability of the transceiver. For example, this
// would specify the module is a digital coherent optic or a
// standard grey optic that performs on-off keying.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/module-functional-type"
//	Path from root:       "/components/component/transceiver/*/module-functional-type"
func (n *Component_TransceiverPath) ModuleFunctionalType() *Component_Transceiver_ModuleFunctionalTypePath {
	ps := &Component_Transceiver_ModuleFunctionalTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "module-functional-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleFunctionalType (leaf): Indicates the module functional type which represents the
// functional capability of the transceiver. For example, this
// would specify the module is a digital coherent optic or a
// standard grey optic that performs on-off keying.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/module-functional-type"
//	Path from root:       "/components/component/transceiver/*/module-functional-type"
func (n *Component_TransceiverPathAny) ModuleFunctionalType() *Component_Transceiver_ModuleFunctionalTypePathAny {
	ps := &Component_Transceiver_ModuleFunctionalTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "module-functional-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtnComplianceCode (leaf): OTN application code supported by the port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/otn-compliance-code"
//	Path from root:       "/components/component/transceiver/state/otn-compliance-code"
func (n *Component_TransceiverPath) OtnComplianceCode() *Component_Transceiver_OtnComplianceCodePath {
	ps := &Component_Transceiver_OtnComplianceCodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "otn-compliance-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OtnComplianceCode (leaf): OTN application code supported by the port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/otn-compliance-code"
//	Path from root:       "/components/component/transceiver/state/otn-compliance-code"
func (n *Component_TransceiverPathAny) OtnComplianceCode() *Component_Transceiver_OtnComplianceCodePathAny {
	ps := &Component_Transceiver_OtnComplianceCodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "otn-compliance-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/state/output-power"
func (n *Component_TransceiverPath) OutputPower() *Component_Transceiver_OutputPowerPath {
	ps := &Component_Transceiver_OutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/state/output-power"
func (n *Component_TransceiverPathAny) OutputPower() *Component_Transceiver_OutputPowerPathAny {
	ps := &Component_Transceiver_OutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber"
func (n *Component_TransceiverPath) PostFecBer() *Component_Transceiver_PostFecBerPath {
	ps := &Component_Transceiver_PostFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PostFecBer (container): Bit error rate after forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/post-fec-ber"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber"
func (n *Component_TransceiverPathAny) PostFecBer() *Component_Transceiver_PostFecBerPathAny {
	ps := &Component_Transceiver_PostFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "post-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber"
func (n *Component_TransceiverPath) PreFecBer() *Component_Transceiver_PreFecBerPath {
	ps := &Component_Transceiver_PreFecBerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PreFecBer (container): Bit error rate before forward error correction -- computed
// value with 18 decimal precision. Note that decimal64
// supports values as small as i x 10^-18 where i is an
// integer. Values smaller than this should be reported as 0
// to inidicate error free or near error free performance.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/pre-fec-ber"
//	Path from root:       "/components/component/transceiver/state/pre-fec-ber"
func (n *Component_TransceiverPathAny) PreFecBer() *Component_Transceiver_PreFecBerPathAny {
	ps := &Component_Transceiver_PreFecBerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pre-fec-ber"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Present (leaf): Indicates whether a transceiver is present in
// the specified client port.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/present"
//	Path from root:       "/components/component/transceiver/state/present"
func (n *Component_TransceiverPath) Present() *Component_Transceiver_PresentPath {
	ps := &Component_Transceiver_PresentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "present"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Present (leaf): Indicates whether a transceiver is present in
// the specified client port.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/present"
//	Path from root:       "/components/component/transceiver/state/present"
func (n *Component_TransceiverPathAny) Present() *Component_Transceiver_PresentPathAny {
	ps := &Component_Transceiver_PresentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "present"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SerialNo (leaf): Transceiver serial number. 16-octet field that contains
// ASCII characters, left-aligned and padded on the right with
// ASCII spaces (20h). If part serial number is undefined, all
// 16 octets = 0h
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/transceiver/state/serial-no"
func (n *Component_TransceiverPath) SerialNo() *Component_Transceiver_SerialNoPath {
	ps := &Component_Transceiver_SerialNoPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SerialNo (leaf): Transceiver serial number. 16-octet field that contains
// ASCII characters, left-aligned and padded on the right with
// ASCII spaces (20h). If part serial number is undefined, all
// 16 octets = 0h
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/serial-no"
//	Path from root:       "/components/component/transceiver/state/serial-no"
func (n *Component_TransceiverPathAny) SerialNo() *Component_Transceiver_SerialNoPathAny {
	ps := &Component_Transceiver_SerialNoPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SonetSdhComplianceCode (leaf): SONET/SDH application code supported by the port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/sonet-sdh-compliance-code"
//	Path from root:       "/components/component/transceiver/state/sonet-sdh-compliance-code"
func (n *Component_TransceiverPath) SonetSdhComplianceCode() *Component_Transceiver_SonetSdhComplianceCodePath {
	ps := &Component_Transceiver_SonetSdhComplianceCodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sonet-sdh-compliance-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SonetSdhComplianceCode (leaf): SONET/SDH application code supported by the port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/sonet-sdh-compliance-code"
//	Path from root:       "/components/component/transceiver/state/sonet-sdh-compliance-code"
func (n *Component_TransceiverPathAny) SonetSdhComplianceCode() *Component_Transceiver_SonetSdhComplianceCodePathAny {
	ps := &Component_Transceiver_SonetSdhComplianceCodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sonet-sdh-compliance-code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SupplyVoltage (container): Supply voltage to the transceiver in volts with 2 decimal
// precision. Values include the instantaneous, average, minimum,
// and maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage"
//	Path from root:       "/components/component/transceiver/state/supply-voltage"
func (n *Component_TransceiverPath) SupplyVoltage() *Component_Transceiver_SupplyVoltagePath {
	ps := &Component_Transceiver_SupplyVoltagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SupplyVoltage (container): Supply voltage to the transceiver in volts with 2 decimal
// precision. Values include the instantaneous, average, minimum,
// and maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/supply-voltage"
//	Path from root:       "/components/component/transceiver/state/supply-voltage"
func (n *Component_TransceiverPathAny) SupplyVoltage() *Component_Transceiver_SupplyVoltagePathAny {
	ps := &Component_Transceiver_SupplyVoltagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "supply-voltage"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ThresholdAny (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
func (n *Component_TransceiverPath) ThresholdAny() *Component_Transceiver_ThresholdPathAny {
	ps := &Component_Transceiver_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds", "threshold"},
			map[string]interface{}{"severity": "*"},
			n,
		),
	}
	return ps
}

// ThresholdAny (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
func (n *Component_TransceiverPathAny) ThresholdAny() *Component_Transceiver_ThresholdPathAny {
	ps := &Component_Transceiver_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds", "threshold"},
			map[string]interface{}{"severity": "*"},
			n,
		),
	}
	return ps
}

// Threshold (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
//
//	Severity: oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY
func (n *Component_TransceiverPath) Threshold(Severity oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) *Component_Transceiver_ThresholdPath {
	ps := &Component_Transceiver_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds", "threshold"},
			map[string]interface{}{"severity": Severity},
			n,
		),
	}
	return ps
}

// Threshold (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
//
//	Severity: oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY
func (n *Component_TransceiverPathAny) Threshold(Severity oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY) *Component_Transceiver_ThresholdPathAny {
	ps := &Component_Transceiver_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds", "threshold"},
			map[string]interface{}{"severity": Severity},
			n,
		),
	}
	return ps
}

// ThresholdMap (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
func (n *Component_TransceiverPath) ThresholdMap() *Component_Transceiver_ThresholdPathMap {
	ps := &Component_Transceiver_ThresholdPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ThresholdMap (list): List of transceiver alarm thresholds, indexed by
// alarm severity.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "thresholds/threshold"
//	Path from root:       "/components/component/transceiver/thresholds/threshold"
func (n *Component_TransceiverPathAny) ThresholdMap() *Component_Transceiver_ThresholdPathMapAny {
	ps := &Component_Transceiver_ThresholdPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"thresholds"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vendor (leaf): Full name of transceiver vendor. 16-octet field that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor"
//	Path from root:       "/components/component/transceiver/state/vendor"
func (n *Component_TransceiverPath) Vendor() *Component_Transceiver_VendorPath {
	ps := &Component_Transceiver_VendorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vendor (leaf): Full name of transceiver vendor. 16-octet field that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor"
//	Path from root:       "/components/component/transceiver/state/vendor"
func (n *Component_TransceiverPathAny) Vendor() *Component_Transceiver_VendorPathAny {
	ps := &Component_Transceiver_VendorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorPart (leaf): Transceiver vendor's part number. 16-octet field that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h). If part number is undefined,
// all 16 octets = 0h
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor-part"
//	Path from root:       "/components/component/transceiver/state/vendor-part"
func (n *Component_TransceiverPath) VendorPart() *Component_Transceiver_VendorPartPath {
	ps := &Component_Transceiver_VendorPartPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-part"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorPart (leaf): Transceiver vendor's part number. 16-octet field that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h). If part number is undefined,
// all 16 octets = 0h
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor-part"
//	Path from root:       "/components/component/transceiver/state/vendor-part"
func (n *Component_TransceiverPathAny) VendorPart() *Component_Transceiver_VendorPartPathAny {
	ps := &Component_Transceiver_VendorPartPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-part"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorRev (leaf): Transceiver vendor's revision number. Field of 1 to 4 octets that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor-rev"
//	Path from root:       "/components/component/transceiver/state/vendor-rev"
func (n *Component_TransceiverPath) VendorRev() *Component_Transceiver_VendorRevPath {
	ps := &Component_Transceiver_VendorRevPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-rev"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VendorRev (leaf): Transceiver vendor's revision number. Field of 1 to 4 octets that
// contains ASCII characters, left-aligned and padded on the
// right with ASCII spaces (20h)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/vendor-rev"
//	Path from root:       "/components/component/transceiver/state/vendor-rev"
func (n *Component_TransceiverPathAny) VendorRev() *Component_Transceiver_VendorRevPathAny {
	ps := &Component_Transceiver_VendorRevPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vendor-rev"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_TransceiverPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_TransceiverPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_TransceiverPath) Config() ygnmi.ConfigQuery[*oc.Component_Transceiver] {
	return ygnmi.NewConfigQuery[*oc.Component_Transceiver](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_TransceiverPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Transceiver] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_AssociatedOpticalChannelPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/associated-optical-channel YANG schema element.
type Component_Transceiver_Channel_AssociatedOpticalChannelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_AssociatedOpticalChannelPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/associated-optical-channel YANG schema element.
type Component_Transceiver_Channel_AssociatedOpticalChannelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/associated-optical-channel"
func (n *Component_Transceiver_Channel_AssociatedOpticalChannelPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).AssociatedOpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/associated-optical-channel"
func (n *Component_Transceiver_Channel_AssociatedOpticalChannelPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).AssociatedOpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/associated-optical-channel"
func (n *Component_Transceiver_Channel_AssociatedOpticalChannelPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "associated-optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).AssociatedOpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/associated-optical-channel"
func (n *Component_Transceiver_Channel_AssociatedOpticalChannelPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "associated-optical-channel"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).AssociatedOpticalChannel
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_DescriptionPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/description YANG schema element.
type Component_Transceiver_Channel_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_DescriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/description YANG schema element.
type Component_Transceiver_Channel_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/description"
func (n *Component_Transceiver_Channel_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/description"
func (n *Component_Transceiver_Channel_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/description"
func (n *Component_Transceiver_Channel_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/description"
func (n *Component_Transceiver_Channel_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_IndexPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/index YANG schema element.
type Component_Transceiver_Channel_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_IndexPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/index YANG schema element.
type Component_Transceiver_Channel_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/index"
func (n *Component_Transceiver_Channel_IndexPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Index
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/index"
func (n *Component_Transceiver_Channel_IndexPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Index
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/index"
func (n *Component_Transceiver_Channel_IndexPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Index
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/index"
func (n *Component_Transceiver_Channel_IndexPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).Index
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserAgePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-age YANG schema element.
type Component_Transceiver_Channel_LaserAgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserAgePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-age YANG schema element.
type Component_Transceiver_Channel_LaserAgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_Channel_LaserAgePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).LaserAge
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_Channel_LaserAgePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).LaserAge
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputFrequencyPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-frequency YANG schema element.
type Component_Transceiver_Channel_OutputFrequencyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputFrequencyPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-frequency YANG schema element.
type Component_Transceiver_Channel_OutputFrequencyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_Channel_OutputFrequencyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).OutputFrequency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_Channel_OutputFrequencyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).OutputFrequency
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_RxCdrLolPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol YANG schema element.
type Component_Transceiver_Channel_RxCdrLolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_RxCdrLolPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol YANG schema element.
type Component_Transceiver_Channel_RxCdrLolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_Channel_RxCdrLolPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).RxCdrLol
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_Channel_RxCdrLolPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).RxCdrLol
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_RxLosPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/rx-los YANG schema element.
type Component_Transceiver_Channel_RxLosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_RxLosPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/rx-los YANG schema element.
type Component_Transceiver_Channel_RxLosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_Channel_RxLosPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).RxLos
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_Channel_RxLosPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).RxLos
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetOutputPowerPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-output-power YANG schema element.
type Component_Transceiver_Channel_TargetOutputPowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetOutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-output-power YANG schema element.
type Component_Transceiver_Channel_TargetOutputPowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPath) Config() ygnmi.ConfigQuery[float64] {
	return ygnmi.NewConfigQuery[float64](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPathAny) Config() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TxFailurePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-failure YANG schema element.
type Component_Transceiver_Channel_TxFailurePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TxFailurePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-failure YANG schema element.
type Component_Transceiver_Channel_TxFailurePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_Channel_TxFailurePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxFailure
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_Channel_TxFailurePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxFailure
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TxLaserPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-laser YANG schema element.
type Component_Transceiver_Channel_TxLaserPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TxLaserPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-laser YANG schema element.
type Component_Transceiver_Channel_TxLaserPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_ChannelPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ChannelPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathAny struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ChannelPathMap represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathMap struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ChannelPathMapAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathMapAny struct {
	*ygnmi.NodePath
}

// AssociatedOpticalChannel (leaf): A physical channel may reference an optical channel
// component. If the physical channel does make this optional
// reference, then a limited set of leaves will apply within
// the physical channel to avoid duplication within the optical
// channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/associated-optical-channel"
func (n *Component_Transceiver_ChannelPath) AssociatedOpticalChannel() *Component_Transceiver_Channel_AssociatedOpticalChannelPath {
	ps := &Component_Transceiver_Channel_AssociatedOpticalChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-optical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociatedOpticalChannel (leaf): A physical channel may reference an optical channel
// component. If the physical channel does make this optional
// reference, then a limited set of leaves will apply within
// the physical channel to avoid duplication within the optical
// channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/associated-optical-channel"
func (n *Component_Transceiver_ChannelPathAny) AssociatedOpticalChannel() *Component_Transceiver_Channel_AssociatedOpticalChannelPathAny {
	ps := &Component_Transceiver_Channel_AssociatedOpticalChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-optical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Text description for the client physical channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/description"
func (n *Component_Transceiver_ChannelPath) Description() *Component_Transceiver_Channel_DescriptionPath {
	ps := &Component_Transceiver_Channel_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Text description for the client physical channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/description"
func (n *Component_Transceiver_ChannelPathAny) Description() *Component_Transceiver_Channel_DescriptionPathAny {
	ps := &Component_Transceiver_Channel_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the physical channnel or lane within a physical
// client port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/index"
func (n *Component_Transceiver_ChannelPath) Index() *Component_Transceiver_Channel_IndexPath {
	ps := &Component_Transceiver_Channel_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the physical channnel or lane within a physical
// client port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/index"
func (n *Component_Transceiver_ChannelPathAny) Index() *Component_Transceiver_Channel_IndexPathAny {
	ps := &Component_Transceiver_Channel_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power"
func (n *Component_Transceiver_ChannelPath) InputPower() *Component_Transceiver_Channel_InputPowerPath {
	ps := &Component_Transceiver_Channel_InputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power"
func (n *Component_Transceiver_ChannelPathAny) InputPower() *Component_Transceiver_Channel_InputPowerPathAny {
	ps := &Component_Transceiver_Channel_InputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserAge (leaf): Laser age (0% at beginning of life, 100% end of life) in integer
// percentage. This term is defined by Common Management Interface
// Specification (CMIS).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_ChannelPath) LaserAge() *Component_Transceiver_Channel_LaserAgePath {
	ps := &Component_Transceiver_Channel_LaserAgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserAge (leaf): Laser age (0% at beginning of life, 100% end of life) in integer
// percentage. This term is defined by Common Management Interface
// Specification (CMIS).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_ChannelPathAny) LaserAge() *Component_Transceiver_Channel_LaserAgePathAny {
	ps := &Component_Transceiver_Channel_LaserAgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current"
func (n *Component_Transceiver_ChannelPath) LaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrentPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current"
func (n *Component_Transceiver_ChannelPathAny) LaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrentPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserTemperature (container): Laser temperature for the cooled laser in degrees Celsius with 1
// decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the
// instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature"
func (n *Component_Transceiver_ChannelPath) LaserTemperature() *Component_Transceiver_Channel_LaserTemperaturePath {
	ps := &Component_Transceiver_Channel_LaserTemperaturePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserTemperature (container): Laser temperature for the cooled laser in degrees Celsius with 1
// decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the
// instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature"
func (n *Component_Transceiver_ChannelPathAny) LaserTemperature() *Component_Transceiver_Channel_LaserTemperaturePathAny {
	ps := &Component_Transceiver_Channel_LaserTemperaturePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputFrequency (leaf): The frequency in MHz of the individual physical channel
// (e.g. ITU C50 - 195.0THz and would be reported as
// 195,000,000 MHz in this model). This attribute is not
// configurable on most client ports In some cases, such as when
// the physical channel has a leafref to an optical channel
// component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_ChannelPath) OutputFrequency() *Component_Transceiver_Channel_OutputFrequencyPath {
	ps := &Component_Transceiver_Channel_OutputFrequencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputFrequency (leaf): The frequency in MHz of the individual physical channel
// (e.g. ITU C50 - 195.0THz and would be reported as
// 195,000,000 MHz in this model). This attribute is not
// configurable on most client ports In some cases, such as when
// the physical channel has a leafref to an optical channel
// component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_ChannelPathAny) OutputFrequency() *Component_Transceiver_Channel_OutputFrequencyPathAny {
	ps := &Component_Transceiver_Channel_OutputFrequencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power"
func (n *Component_Transceiver_ChannelPath) OutputPower() *Component_Transceiver_Channel_OutputPowerPath {
	ps := &Component_Transceiver_Channel_OutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power"
func (n *Component_Transceiver_ChannelPathAny) OutputPower() *Component_Transceiver_Channel_OutputPowerPathAny {
	ps := &Component_Transceiver_Channel_OutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RxCdrLol (leaf): Receiver clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_ChannelPath) RxCdrLol() *Component_Transceiver_Channel_RxCdrLolPath {
	ps := &Component_Transceiver_Channel_RxCdrLolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxCdrLol (leaf): Receiver clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_ChannelPathAny) RxCdrLol() *Component_Transceiver_Channel_RxCdrLolPathAny {
	ps := &Component_Transceiver_Channel_RxCdrLolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxLos (leaf): Receiver loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_ChannelPath) RxLos() *Component_Transceiver_Channel_RxLosPath {
	ps := &Component_Transceiver_Channel_RxLosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxLos (leaf): Receiver loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_ChannelPathAny) RxLos() *Component_Transceiver_Channel_RxLosPathAny {
	ps := &Component_Transceiver_Channel_RxLosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetFrequencyDeviation (container): The difference in MHz with 1 decimal precision between the target
// center frequency and the actual current center frequency . This term
// is defined by Common Management Interface Specification (CMIS) and
// referred to as laser frequency error or laser ferquency deviation.
// Values include the instantaneous, average, minimum, and maximum
// statistics. If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/target-frequency-deviation"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation"
func (n *Component_Transceiver_ChannelPath) TargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviationPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "target-frequency-deviation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetFrequencyDeviation (container): The difference in MHz with 1 decimal precision between the target
// center frequency and the actual current center frequency . This term
// is defined by Common Management Interface Specification (CMIS) and
// referred to as laser frequency error or laser ferquency deviation.
// Values include the instantaneous, average, minimum, and maximum
// statistics. If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/target-frequency-deviation"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation"
func (n *Component_Transceiver_ChannelPathAny) TargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "target-frequency-deviation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/target-output-power"
func (n *Component_Transceiver_ChannelPath) TargetOutputPower() *Component_Transceiver_Channel_TargetOutputPowerPath {
	ps := &Component_Transceiver_Channel_TargetOutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/target-output-power"
func (n *Component_Transceiver_ChannelPathAny) TargetOutputPower() *Component_Transceiver_Channel_TargetOutputPowerPathAny {
	ps := &Component_Transceiver_Channel_TargetOutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TecCurrent (container): The amount of current flowing to the TC of a cooled laser in percentage
// with 2 decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tec-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current"
func (n *Component_Transceiver_ChannelPath) TecCurrent() *Component_Transceiver_Channel_TecCurrentPath {
	ps := &Component_Transceiver_Channel_TecCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tec-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TecCurrent (container): The amount of current flowing to the TC of a cooled laser in percentage
// with 2 decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tec-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current"
func (n *Component_Transceiver_ChannelPathAny) TecCurrent() *Component_Transceiver_Channel_TecCurrentPathAny {
	ps := &Component_Transceiver_Channel_TecCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tec-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TxFailure (leaf): Transmitter failure flag.
// In earlier standards, including SFF-8436, SFF-8472, and QSFP-DD CMIS 4.0,
// this flag was named Tx Fault.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_ChannelPath) TxFailure() *Component_Transceiver_Channel_TxFailurePath {
	ps := &Component_Transceiver_Channel_TxFailurePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxFailure (leaf): Transmitter failure flag.
// In earlier standards, including SFF-8436, SFF-8472, and QSFP-DD CMIS 4.0,
// this flag was named Tx Fault.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_ChannelPathAny) TxFailure() *Component_Transceiver_Channel_TxFailurePathAny {
	ps := &Component_Transceiver_Channel_TxFailurePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLaser (leaf): Enable (true) or disable (false) the transmit label for the
// channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/tx-laser"
func (n *Component_Transceiver_ChannelPath) TxLaser() *Component_Transceiver_Channel_TxLaserPath {
	ps := &Component_Transceiver_Channel_TxLaserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tx-laser"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLaser (leaf): Enable (true) or disable (false) the transmit label for the
// channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/tx-laser"
func (n *Component_Transceiver_ChannelPathAny) TxLaser() *Component_Transceiver_Channel_TxLaserPathAny {
	ps := &Component_Transceiver_Channel_TxLaserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tx-laser"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPath) Config() ygnmi.ConfigQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewConfigQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMap) State() ygnmi.SingletonQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewSingletonQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMapAny) State() ygnmi.WildcardQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMap) Config() ygnmi.ConfigQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewConfigQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMapAny) Config() ygnmi.WildcardQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}
