/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).AtomicOpBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).AtomicOpBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).BlockedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).BlockedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).CompletionAbortErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).CompletionAbortErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).CompletionTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).CompletionTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_DataLinkErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_NonFatalErrors_DataLinkErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrors_DataLinkErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).DataLinkErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).DataLinkErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_EcrcErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_NonFatalErrors_EcrcErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_EcrcErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_NonFatalErrors_EcrcErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrors_EcrcErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).EcrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrors_EcrcErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).EcrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).FlowControlProtocolErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).FlowControlProtocolErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_InternalErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/internal-errors YANG schema element.
type Component_Pcie_NonFatalErrors_InternalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_InternalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/internal-errors YANG schema element.
type Component_Pcie_NonFatalErrors_InternalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrors_InternalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrors_InternalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).MalformedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).MalformedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).PoisonedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).PoisonedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).ReceiverOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).ReceiverOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).SurpriseDownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).SurpriseDownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).TlpPrefixBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).TlpPrefixBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_TotalErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/total-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TotalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_TotalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/total-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TotalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrors_TotalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrors_TotalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_UndefinedErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UndefinedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrors_UndefinedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UndefinedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UndefinedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UnexpectedCompletionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UnexpectedCompletionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UnsupportedRequestErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).UnsupportedRequestErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type Component_Pcie_NonFatalErrorsPath struct {
	*ygnmi.NodePath
}

// Component_Pcie_NonFatalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type Component_Pcie_NonFatalErrorsPathAny struct {
	*ygnmi.NodePath
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrorsPath) AcsViolationErrors() *Component_Pcie_NonFatalErrors_AcsViolationErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_AcsViolationErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) AcsViolationErrors() *Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPath) AtomicOpBlockedErrors() *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) AtomicOpBlockedErrors() *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPath) BlockedTlpErrors() *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) BlockedTlpErrors() *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrorsPath) CompletionAbortErrors() *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) CompletionAbortErrors() *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrorsPath) CompletionTimeoutErrors() *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) CompletionTimeoutErrors() *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrorsPath) DataLinkErrors() *Component_Pcie_NonFatalErrors_DataLinkErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_DataLinkErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) DataLinkErrors() *Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrorsPath) EcrcErrors() *Component_Pcie_NonFatalErrors_EcrcErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_EcrcErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) EcrcErrors() *Component_Pcie_NonFatalErrors_EcrcErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_EcrcErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrorsPath) FlowControlProtocolErrors() *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) FlowControlProtocolErrors() *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrorsPath) InternalErrors() *Component_Pcie_NonFatalErrors_InternalErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_InternalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) InternalErrors() *Component_Pcie_NonFatalErrors_InternalErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_InternalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPath) MalformedTlpErrors() *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) MalformedTlpErrors() *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPath) PoisonedTlpErrors() *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) PoisonedTlpErrors() *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrorsPath) ReceiverOverflowErrors() *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) ReceiverOverflowErrors() *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrorsPath) SurpriseDownErrors() *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) SurpriseDownErrors() *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPath) TlpPrefixBlockedErrors() *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) TlpPrefixBlockedErrors() *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrorsPath) TotalErrors() *Component_Pcie_NonFatalErrors_TotalErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_TotalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) TotalErrors() *Component_Pcie_NonFatalErrors_TotalErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_TotalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrorsPath) UndefinedErrors() *Component_Pcie_NonFatalErrors_UndefinedErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_UndefinedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) UndefinedErrors() *Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrorsPath) UnexpectedCompletionErrors() *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) UnexpectedCompletionErrors() *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrorsPath) UnsupportedRequestErrors() *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath {
	ps := &Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) UnsupportedRequestErrors() *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_NonFatalErrorsPath) State() ygnmi.SingletonQuery[*oc.Component_Pcie_NonFatalErrors] {
	return ygnmi.NewSingletonQuery[*oc.Component_Pcie_NonFatalErrors](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_NonFatalErrorsPathAny) State() ygnmi.WildcardQuery[*oc.Component_Pcie_NonFatalErrors] {
	return ygnmi.NewWildcardQuery[*oc.Component_Pcie_NonFatalErrors](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PortPath represents the /openconfig-platform/components/component/port YANG schema element.
type Component_PortPath struct {
	*ygnmi.NodePath
}

// Component_PortPathAny represents the wildcard version of the /openconfig-platform/components/component/port YANG schema element.
type Component_PortPathAny struct {
	*ygnmi.NodePath
}

// BreakoutMode (container): Top-level container for port breakout-mode data.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "breakout-mode"
//	Path from root:       "/components/component/port/breakout-mode"
func (n *Component_PortPath) BreakoutMode() *Component_Port_BreakoutModePath {
	ps := &Component_Port_BreakoutModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"breakout-mode"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BreakoutMode (container): Top-level container for port breakout-mode data.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "breakout-mode"
//	Path from root:       "/components/component/port/breakout-mode"
func (n *Component_PortPathAny) BreakoutMode() *Component_Port_BreakoutModePathAny {
	ps := &Component_Port_BreakoutModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"breakout-mode"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PortPath) State() ygnmi.SingletonQuery[*oc.Component_Port] {
	return ygnmi.NewSingletonQuery[*oc.Component_Port](
		"Component_Port",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PortPathAny) State() ygnmi.WildcardQuery[*oc.Component_Port] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port](
		"Component_Port",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PortPath) Config() ygnmi.ConfigQuery[*oc.Component_Port] {
	return ygnmi.NewConfigQuery[*oc.Component_Port](
		"Component_Port",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PortPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Port] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port](
		"Component_Port",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutModePath represents the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutModePath struct {
	*ygnmi.NodePath
}

// Component_Port_BreakoutModePathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutModePathAny struct {
	*ygnmi.NodePath
}

// GroupAny (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
func (n *Component_Port_BreakoutModePath) GroupAny() *Component_Port_BreakoutMode_GroupPathAny {
	ps := &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// GroupAny (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
func (n *Component_Port_BreakoutModePathAny) GroupAny() *Component_Port_BreakoutMode_GroupPathAny {
	ps := &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Group (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
//
//	Index: uint8
func (n *Component_Port_BreakoutModePath) Group(Index uint8) *Component_Port_BreakoutMode_GroupPath {
	ps := &Component_Port_BreakoutMode_GroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Group (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
//
//	Index: uint8
func (n *Component_Port_BreakoutModePathAny) Group(Index uint8) *Component_Port_BreakoutMode_GroupPathAny {
	ps := &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// GroupMap (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
func (n *Component_Port_BreakoutModePath) GroupMap() *Component_Port_BreakoutMode_GroupPathMap {
	ps := &Component_Port_BreakoutMode_GroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GroupMap (list): List of breakout groups.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "groups/group"
//	Path from root:       "/components/component/port/breakout-mode/groups/group"
func (n *Component_Port_BreakoutModePathAny) GroupMap() *Component_Port_BreakoutMode_GroupPathMapAny {
	ps := &Component_Port_BreakoutMode_GroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutModePath) State() ygnmi.SingletonQuery[*oc.Component_Port_BreakoutMode] {
	return ygnmi.NewSingletonQuery[*oc.Component_Port_BreakoutMode](
		"Component_Port_BreakoutMode",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutModePathAny) State() ygnmi.WildcardQuery[*oc.Component_Port_BreakoutMode] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port_BreakoutMode](
		"Component_Port_BreakoutMode",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutModePath) Config() ygnmi.ConfigQuery[*oc.Component_Port_BreakoutMode] {
	return ygnmi.NewConfigQuery[*oc.Component_Port_BreakoutMode](
		"Component_Port_BreakoutMode",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutModePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Port_BreakoutMode] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port_BreakoutMode](
		"Component_Port_BreakoutMode",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_Group_BreakoutSpeedPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/breakout-speed YANG schema element.
type Component_Port_BreakoutMode_Group_BreakoutSpeedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/breakout-speed YANG schema element.
type Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/breakout-speed"
func (n *Component_Port_BreakoutMode_Group_BreakoutSpeedPath) State() ygnmi.SingletonQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewSingletonQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "breakout-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).BreakoutSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/breakout-speed"
func (n *Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny) State() ygnmi.WildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewWildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "breakout-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).BreakoutSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/breakout-speed"
func (n *Component_Port_BreakoutMode_Group_BreakoutSpeedPath) Config() ygnmi.ConfigQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewConfigQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "breakout-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).BreakoutSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/breakout-speed"
func (n *Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny) Config() ygnmi.WildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED] {
	return ygnmi.NewWildcardQuery[oc.E_IfEthernet_ETHERNET_SPEED](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "breakout-speed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IfEthernet_ETHERNET_SPEED, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).BreakoutSpeed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_Group_IndexPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/index YANG schema element.
type Component_Port_BreakoutMode_Group_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Port_BreakoutMode_Group_IndexPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/index YANG schema element.
type Component_Port_BreakoutMode_Group_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/index"
func (n *Component_Port_BreakoutMode_Group_IndexPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/index"
func (n *Component_Port_BreakoutMode_Group_IndexPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/index"
func (n *Component_Port_BreakoutMode_Group_IndexPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/index"
func (n *Component_Port_BreakoutMode_Group_IndexPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_Group_NumBreakoutsPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/num-breakouts YANG schema element.
type Component_Port_BreakoutMode_Group_NumBreakoutsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Port_BreakoutMode_Group_NumBreakoutsPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/num-breakouts YANG schema element.
type Component_Port_BreakoutMode_Group_NumBreakoutsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/num-breakouts"
func (n *Component_Port_BreakoutMode_Group_NumBreakoutsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "num-breakouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumBreakouts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/num-breakouts"
func (n *Component_Port_BreakoutMode_Group_NumBreakoutsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "num-breakouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumBreakouts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/num-breakouts"
func (n *Component_Port_BreakoutMode_Group_NumBreakoutsPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "num-breakouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumBreakouts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/num-breakouts"
func (n *Component_Port_BreakoutMode_Group_NumBreakoutsPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "num-breakouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumBreakouts
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/num-physical-channels YANG schema element.
type Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/state/num-physical-channels YANG schema element.
type Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/num-physical-channels"
func (n *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "num-physical-channels"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumPhysicalChannels
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "state/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/state/num-physical-channels"
func (n *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "num-physical-channels"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumPhysicalChannels
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/num-physical-channels"
func (n *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "num-physical-channels"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumPhysicalChannels
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform-port"
//	Path from parent:     "config/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/config/num-physical-channels"
func (n *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "num-physical-channels"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode_Group).NumPhysicalChannels
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Port_BreakoutMode_GroupPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPath struct {
	*ygnmi.NodePath
}

// Component_Port_BreakoutMode_GroupPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPathAny struct {
	*ygnmi.NodePath
}

// Component_Port_BreakoutMode_GroupPathMap represents the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPathMap struct {
	*ygnmi.NodePath
}

// Component_Port_BreakoutMode_GroupPathMapAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPathMapAny struct {
	*ygnmi.NodePath
}

// BreakoutSpeed (leaf): Speed of interfaces in this breakout group, supported
// values are defined by the ETHERNET_SPEED identity.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/breakout-speed"
func (n *Component_Port_BreakoutMode_GroupPath) BreakoutSpeed() *Component_Port_BreakoutMode_Group_BreakoutSpeedPath {
	ps := &Component_Port_BreakoutMode_Group_BreakoutSpeedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "breakout-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BreakoutSpeed (leaf): Speed of interfaces in this breakout group, supported
// values are defined by the ETHERNET_SPEED identity.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/breakout-speed"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/breakout-speed"
func (n *Component_Port_BreakoutMode_GroupPathAny) BreakoutSpeed() *Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny {
	ps := &Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "breakout-speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Each index specifies breakouts that are identical in
// terms of speed and the number of physical channels.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/index"
func (n *Component_Port_BreakoutMode_GroupPath) Index() *Component_Port_BreakoutMode_Group_IndexPath {
	ps := &Component_Port_BreakoutMode_Group_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Each index specifies breakouts that are identical in
// terms of speed and the number of physical channels.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/index"
func (n *Component_Port_BreakoutMode_GroupPathAny) Index() *Component_Port_BreakoutMode_Group_IndexPathAny {
	ps := &Component_Port_BreakoutMode_Group_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NumBreakouts (leaf): Sets the number of interfaces using this breakout group.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/num-breakouts"
func (n *Component_Port_BreakoutMode_GroupPath) NumBreakouts() *Component_Port_BreakoutMode_Group_NumBreakoutsPath {
	ps := &Component_Port_BreakoutMode_Group_NumBreakoutsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "num-breakouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NumBreakouts (leaf): Sets the number of interfaces using this breakout group.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/num-breakouts"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/num-breakouts"
func (n *Component_Port_BreakoutMode_GroupPathAny) NumBreakouts() *Component_Port_BreakoutMode_Group_NumBreakoutsPathAny {
	ps := &Component_Port_BreakoutMode_Group_NumBreakoutsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "num-breakouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NumPhysicalChannels (leaf): Sets the number of lanes or physical channels assigned
// to the interfaces in this breakout group. This leaf need
// not be set if there is only one breakout group where all
// the interfaces are of equal speed and have equal number
// of physical channels.
//
// The physical channels referred to by this leaf are
// electrical channels towards the transceiver.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/num-physical-channels"
func (n *Component_Port_BreakoutMode_GroupPath) NumPhysicalChannels() *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath {
	ps := &Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "num-physical-channels"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NumPhysicalChannels (leaf): Sets the number of lanes or physical channels assigned
// to the interfaces in this breakout group. This leaf need
// not be set if there is only one breakout group where all
// the interfaces are of equal speed and have equal number
// of physical channels.
//
// The physical channels referred to by this leaf are
// electrical channels towards the transceiver.
//
//	Defining module:      "openconfig-platform-port"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/num-physical-channels"
//	Path from root:       "/components/component/port/breakout-mode/groups/group/*/num-physical-channels"
func (n *Component_Port_BreakoutMode_GroupPathAny) NumPhysicalChannels() *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny {
	ps := &Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "num-physical-channels"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPath) State() ygnmi.SingletonQuery[*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewSingletonQuery[*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathAny) State() ygnmi.WildcardQuery[*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode_Group",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPath) Config() ygnmi.ConfigQuery[*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewConfigQuery[*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewWildcardQuery[*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode_Group",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Port_BreakoutMode_Group, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-port:groups"},
			PostRelPath: []string{"openconfig-platform-port:group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Port_BreakoutMode_Group, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-port:groups"},
			PostRelPath: []string{"openconfig-platform-port:group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Port_BreakoutMode_Group, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-port:groups"},
			PostRelPath: []string{"openconfig-platform-port:group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Port_BreakoutMode_GroupPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Component_Port_BreakoutMode_Group](
		"Component_Port_BreakoutMode",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Port_BreakoutMode_Group, bool) {
			ret := gs.(*oc.Component_Port_BreakoutMode).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Port_BreakoutMode) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-port:groups"},
			PostRelPath: []string{"openconfig-platform-port:group"},
		},
	)
}

// Component_PowerSupplyPath represents the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupplyPath struct {
	*ygnmi.NodePath
}

// Component_PowerSupplyPathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupplyPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PowerSupplyPath) State() ygnmi.SingletonQuery[*oc.Component_PowerSupply] {
	return ygnmi.NewSingletonQuery[*oc.Component_PowerSupply](
		"Component_PowerSupply",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PowerSupplyPathAny) State() ygnmi.WildcardQuery[*oc.Component_PowerSupply] {
	return ygnmi.NewWildcardQuery[*oc.Component_PowerSupply](
		"Component_PowerSupply",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PowerSupplyPath) Config() ygnmi.ConfigQuery[*oc.Component_PowerSupply] {
	return ygnmi.NewConfigQuery[*oc.Component_PowerSupply](
		"Component_PowerSupply",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PowerSupplyPathAny) Config() ygnmi.WildcardQuery[*oc.Component_PowerSupply] {
	return ygnmi.NewWildcardQuery[*oc.Component_PowerSupply](
		"Component_PowerSupply",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Property_ConfigurablePath represents the /openconfig-platform/components/component/properties/property/state/configurable YANG schema element.
type Component_Property_ConfigurablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Property_ConfigurablePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/state/configurable YANG schema element.
type Component_Property_ConfigurablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/configurable"
//	Path from root:       "/components/component/properties/property/state/configurable"
func (n *Component_Property_ConfigurablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Property",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "configurable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Property).Configurable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/configurable"
//	Path from root:       "/components/component/properties/property/state/configurable"
func (n *Component_Property_ConfigurablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Property",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "configurable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Property).Configurable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Property_NamePath represents the /openconfig-platform/components/component/properties/property/state/name YANG schema element.
type Component_Property_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Property_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/state/name YANG schema element.
type Component_Property_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/properties/property/state/name"
func (n *Component_Property_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Property",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Property).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/properties/property/state/name"
func (n *Component_Property_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Property",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Property).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/properties/property/config/name"
func (n *Component_Property_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Property",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Property).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/properties/property/config/name"
func (n *Component_Property_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Property",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Property).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Property_ValuePath represents the /openconfig-platform/components/component/properties/property/state/value YANG schema element.
type Component_Property_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Property_ValuePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/state/value YANG schema element.
type Component_Property_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/value"
//	Path from root:       "/components/component/properties/property/state/value"
func (n *Component_Property_ValuePath) State() ygnmi.SingletonQuery[oc.Component_Property_Value_Union] {
	return ygnmi.NewSingletonQuery[oc.Component_Property_Value_Union](
		"Component_Property",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Property_Value_Union, bool) {
			ret := gs.(*oc.Component_Property).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/value"
//	Path from root:       "/components/component/properties/property/state/value"
func (n *Component_Property_ValuePathAny) State() ygnmi.WildcardQuery[oc.Component_Property_Value_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Property_Value_Union](
		"Component_Property",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Property_Value_Union, bool) {
			ret := gs.(*oc.Component_Property).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/value"
//	Path from root:       "/components/component/properties/property/config/value"
func (n *Component_Property_ValuePath) Config() ygnmi.ConfigQuery[oc.Component_Property_Value_Union] {
	return ygnmi.NewConfigQuery[oc.Component_Property_Value_Union](
		"Component_Property",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Property_Value_Union, bool) {
			ret := gs.(*oc.Component_Property).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/value"
//	Path from root:       "/components/component/properties/property/config/value"
func (n *Component_Property_ValuePathAny) Config() ygnmi.WildcardQuery[oc.Component_Property_Value_Union] {
	return ygnmi.NewWildcardQuery[oc.Component_Property_Value_Union](
		"Component_Property",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Component_Property_Value_Union, bool) {
			ret := gs.(*oc.Component_Property).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Property) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PropertyPath represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPath struct {
	*ygnmi.NodePath
}

// Component_PropertyPathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPathAny struct {
	*ygnmi.NodePath
}

// Component_PropertyPathMap represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPathMap struct {
	*ygnmi.NodePath
}

// Component_PropertyPathMapAny represents the wildcard version of the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPathMapAny struct {
	*ygnmi.NodePath
}

// Configurable (leaf): Indication whether the property is user-configurable
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/configurable"
//	Path from root:       "/components/component/properties/property/state/configurable"
func (n *Component_PropertyPath) Configurable() *Component_Property_ConfigurablePath {
	ps := &Component_Property_ConfigurablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "configurable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Configurable (leaf): Indication whether the property is user-configurable
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/configurable"
//	Path from root:       "/components/component/properties/property/state/configurable"
func (n *Component_PropertyPathAny) Configurable() *Component_Property_ConfigurablePathAny {
	ps := &Component_Property_ConfigurablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "configurable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): System-supplied name of the property -- this is typically
// non-configurable
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/properties/property/*/name"
func (n *Component_PropertyPath) Name() *Component_Property_NamePath {
	ps := &Component_Property_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): System-supplied name of the property -- this is typically
// non-configurable
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/properties/property/*/name"
func (n *Component_PropertyPathAny) Name() *Component_Property_NamePathAny {
	ps := &Component_Property_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): Property values can take on a variety of types.  Signed and
// unsigned integer types may be provided in smaller sizes,
// e.g., int8, uint16, etc.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/value"
//	Path from root:       "/components/component/properties/property/*/value"
func (n *Component_PropertyPath) Value() *Component_Property_ValuePath {
	ps := &Component_Property_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): Property values can take on a variety of types.  Signed and
// unsigned integer types may be provided in smaller sizes,
// e.g., int8, uint16, etc.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/value"
//	Path from root:       "/components/component/properties/property/*/value"
func (n *Component_PropertyPathAny) Value() *Component_Property_ValuePathAny {
	ps := &Component_Property_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPath) State() ygnmi.SingletonQuery[*oc.Component_Property] {
	return ygnmi.NewSingletonQuery[*oc.Component_Property](
		"Component_Property",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathAny) State() ygnmi.WildcardQuery[*oc.Component_Property] {
	return ygnmi.NewWildcardQuery[*oc.Component_Property](
		"Component_Property",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPath) Config() ygnmi.ConfigQuery[*oc.Component_Property] {
	return ygnmi.NewConfigQuery[*oc.Component_Property](
		"Component_Property",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Property] {
	return ygnmi.NewWildcardQuery[*oc.Component_Property](
		"Component_Property",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_Property] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_Property](
		"Component",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Property, bool) {
			ret := gs.(*oc.Component).Property
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:properties"},
			PostRelPath: []string{"openconfig-platform:property"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_Property] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Property](
		"Component",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Property, bool) {
			ret := gs.(*oc.Component).Property
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:properties"},
			PostRelPath: []string{"openconfig-platform:property"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_Property] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_Property](
		"Component",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Property, bool) {
			ret := gs.(*oc.Component).Property
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:properties"},
			PostRelPath: []string{"openconfig-platform:property"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_PropertyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_Property] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Property](
		"Component",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Property, bool) {
			ret := gs.(*oc.Component).Property
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:properties"},
			PostRelPath: []string{"openconfig-platform:property"},
		},
	)
}

// Component_SoftwareModule_ModuleTypePath represents the /openconfig-platform/components/component/software-module/state/module-type YANG schema element.
type Component_SoftwareModule_ModuleTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_SoftwareModule_ModuleTypePathAny represents the wildcard version of the /openconfig-platform/components/component/software-module/state/module-type YANG schema element.
type Component_SoftwareModule_ModuleTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-software"
//	Instantiating module: "openconfig-platform-software"
//	Path from parent:     "state/module-type"
//	Path from root:       "/components/component/software-module/state/module-type"
func (n *Component_SoftwareModule_ModuleTypePath) State() ygnmi.SingletonQuery[oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE](
		"Component_SoftwareModule",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE, bool) {
			ret := gs.(*oc.Component_SoftwareModule).ModuleType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_SoftwareModule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-software"
//	Instantiating module: "openconfig-platform-software"
//	Path from parent:     "state/module-type"
//	Path from root:       "/components/component/software-module/state/module-type"
func (n *Component_SoftwareModule_ModuleTypePathAny) State() ygnmi.WildcardQuery[oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE](
		"Component_SoftwareModule",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "module-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformSoftware_SOFTWARE_MODULE_TYPE, bool) {
			ret := gs.(*oc.Component_SoftwareModule).ModuleType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_SoftwareModule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_SoftwareModulePath represents the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModulePath struct {
	*ygnmi.NodePath
}

// Component_SoftwareModulePathAny represents the wildcard version of the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModulePathAny struct {
	*ygnmi.NodePath
}

// ModuleType (leaf): Type of the software module
//
//	Defining module:      "openconfig-platform-software"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-type"
//	Path from root:       "/components/component/software-module/state/module-type"
func (n *Component_SoftwareModulePath) ModuleType() *Component_SoftwareModule_ModuleTypePath {
	ps := &Component_SoftwareModule_ModuleTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModuleType (leaf): Type of the software module
//
//	Defining module:      "openconfig-platform-software"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/module-type"
//	Path from root:       "/components/component/software-module/state/module-type"
func (n *Component_SoftwareModulePathAny) ModuleType() *Component_SoftwareModule_ModuleTypePathAny {
	ps := &Component_SoftwareModule_ModuleTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "module-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SoftwareModulePath) State() ygnmi.SingletonQuery[*oc.Component_SoftwareModule] {
	return ygnmi.NewSingletonQuery[*oc.Component_SoftwareModule](
		"Component_SoftwareModule",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SoftwareModulePathAny) State() ygnmi.WildcardQuery[*oc.Component_SoftwareModule] {
	return ygnmi.NewWildcardQuery[*oc.Component_SoftwareModule](
		"Component_SoftwareModule",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SoftwareModulePath) Config() ygnmi.ConfigQuery[*oc.Component_SoftwareModule] {
	return ygnmi.NewConfigQuery[*oc.Component_SoftwareModule](
		"Component_SoftwareModule",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SoftwareModulePathAny) Config() ygnmi.WildcardQuery[*oc.Component_SoftwareModule] {
	return ygnmi.NewWildcardQuery[*oc.Component_SoftwareModule](
		"Component_SoftwareModule",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_StoragePath represents the /openconfig-platform/components/component/storage YANG schema element.
type Component_StoragePath struct {
	*ygnmi.NodePath
}

// Component_StoragePathAny represents the wildcard version of the /openconfig-platform/components/component/storage YANG schema element.
type Component_StoragePathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_StoragePath) State() ygnmi.SingletonQuery[*oc.Component_Storage] {
	return ygnmi.NewSingletonQuery[*oc.Component_Storage](
		"Component_Storage",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_StoragePathAny) State() ygnmi.WildcardQuery[*oc.Component_Storage] {
	return ygnmi.NewWildcardQuery[*oc.Component_Storage](
		"Component_Storage",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_StoragePath) Config() ygnmi.ConfigQuery[*oc.Component_Storage] {
	return ygnmi.NewConfigQuery[*oc.Component_Storage](
		"Component_Storage",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_StoragePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Storage] {
	return ygnmi.NewWildcardQuery[*oc.Component_Storage](
		"Component_Storage",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Subcomponent_NamePath represents the /openconfig-platform/components/component/subcomponents/subcomponent/state/name YANG schema element.
type Component_Subcomponent_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Subcomponent_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent/state/name YANG schema element.
type Component_Subcomponent_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/state/name"
func (n *Component_Subcomponent_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Subcomponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Subcomponent).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Subcomponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/state/name"
func (n *Component_Subcomponent_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Subcomponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Subcomponent).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Subcomponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/config/name"
func (n *Component_Subcomponent_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Subcomponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Subcomponent).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Subcomponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/config/name"
func (n *Component_Subcomponent_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Subcomponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Subcomponent).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Subcomponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_SubcomponentPath represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPath struct {
	*ygnmi.NodePath
}

// Component_SubcomponentPathAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPathAny struct {
	*ygnmi.NodePath
}

// Component_SubcomponentPathMap represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPathMap struct {
	*ygnmi.NodePath
}

// Component_SubcomponentPathMapAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Reference to the name of the subcomponent
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/*/name"
func (n *Component_SubcomponentPath) Name() *Component_Subcomponent_NamePath {
	ps := &Component_Subcomponent_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Reference to the name of the subcomponent
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/subcomponents/subcomponent/*/name"
func (n *Component_SubcomponentPathAny) Name() *Component_Subcomponent_NamePathAny {
	ps := &Component_Subcomponent_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPath) State() ygnmi.SingletonQuery[*oc.Component_Subcomponent] {
	return ygnmi.NewSingletonQuery[*oc.Component_Subcomponent](
		"Component_Subcomponent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathAny) State() ygnmi.WildcardQuery[*oc.Component_Subcomponent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Subcomponent](
		"Component_Subcomponent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPath) Config() ygnmi.ConfigQuery[*oc.Component_Subcomponent] {
	return ygnmi.NewConfigQuery[*oc.Component_Subcomponent](
		"Component_Subcomponent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Subcomponent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Subcomponent](
		"Component_Subcomponent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_Subcomponent] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_Subcomponent](
		"Component",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Subcomponent, bool) {
			ret := gs.(*oc.Component).Subcomponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:subcomponents"},
			PostRelPath: []string{"openconfig-platform:subcomponent"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_Subcomponent] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Subcomponent](
		"Component",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Subcomponent, bool) {
			ret := gs.(*oc.Component).Subcomponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:subcomponents"},
			PostRelPath: []string{"openconfig-platform:subcomponent"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_Subcomponent] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_Subcomponent](
		"Component",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Subcomponent, bool) {
			ret := gs.(*oc.Component).Subcomponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:subcomponents"},
			PostRelPath: []string{"openconfig-platform:subcomponent"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_SubcomponentPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_Subcomponent] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Subcomponent](
		"Component",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Subcomponent, bool) {
			ret := gs.(*oc.Component).Subcomponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:subcomponents"},
			PostRelPath: []string{"openconfig-platform:subcomponent"},
		},
	)
}

// Component_Temperature_AlarmSeverityPath represents the /openconfig-platform/components/component/state/temperature/alarm-severity YANG schema element.
type Component_Temperature_AlarmSeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_AlarmSeverityPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/alarm-severity YANG schema element.
type Component_Temperature_AlarmSeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-severity"
//	Path from root:       "/components/component/state/temperature/alarm-severity"
func (n *Component_Temperature_AlarmSeverityPath) State() ygnmi.SingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewSingletonQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Temperature",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmSeverity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-severity"
//	Path from root:       "/components/component/state/temperature/alarm-severity"
func (n *Component_Temperature_AlarmSeverityPathAny) State() ygnmi.WildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY] {
	return ygnmi.NewWildcardQuery[oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY](
		"Component_Temperature",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmSeverity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_AlarmStatusPath represents the /openconfig-platform/components/component/state/temperature/alarm-status YANG schema element.
type Component_Temperature_AlarmStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_AlarmStatusPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/alarm-status YANG schema element.
type Component_Temperature_AlarmStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-status"
//	Path from root:       "/components/component/state/temperature/alarm-status"
func (n *Component_Temperature_AlarmStatusPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmStatus
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-status"
//	Path from root:       "/components/component/state/temperature/alarm-status"
func (n *Component_Temperature_AlarmStatusPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmStatus
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_AlarmThresholdPath represents the /openconfig-platform/components/component/state/temperature/alarm-threshold YANG schema element.
type Component_Temperature_AlarmThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_AlarmThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/alarm-threshold YANG schema element.
type Component_Temperature_AlarmThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-threshold"
//	Path from root:       "/components/component/state/temperature/alarm-threshold"
func (n *Component_Temperature_AlarmThresholdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "alarm-threshold"
//	Path from root:       "/components/component/state/temperature/alarm-threshold"
func (n *Component_Temperature_AlarmThresholdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"alarm-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Component_Temperature).AlarmThreshold
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_AvgPath represents the /openconfig-platform/components/component/state/temperature/avg YANG schema element.
type Component_Temperature_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/avg YANG schema element.
type Component_Temperature_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/state/temperature/avg"
func (n *Component_Temperature_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/state/temperature/avg"
func (n *Component_Temperature_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Temperature_InstantPath represents the /openconfig-platform/components/component/state/temperature/instant YANG schema element.
type Component_Temperature_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Temperature_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/instant YANG schema element.
type Component_Temperature_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/state/temperature/instant"
func (n *Component_Temperature_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/state/temperature/instant"
func (n *Component_Temperature_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Temperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Temperature).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Temperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
