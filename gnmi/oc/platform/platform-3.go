/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny struct {
	*ygnmi.NodePath
}

// FragmentPuntPkts (leaf): The packets that were successfully punted to CPU due to egress MTU
// exceeded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-punt-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) FragmentPuntPkts() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-punt-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentPuntPkts (leaf): The packets that were successfully punted to CPU due to egress MTU
// exceeded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-punt-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) FragmentPuntPkts() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-punt-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityPackets (leaf): Incoming high priority packets towards the integrated-circuit
// fabric subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) InHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityPackets (leaf): Incoming high priority packets towards the integrated-circuit
// fabric subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) InHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityPackets (leaf): Incoming low priority packets towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) InLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityPackets (leaf): Incoming low priority packets towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) InLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityPackets (leaf): Outgoing high priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) OutHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityPackets (leaf): Outgoing high priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) OutHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutHighPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityPackets (leaf): Outgoing low priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) OutLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityPackets (leaf): Outgoing low priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) OutLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutLowPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny struct {
	*ygnmi.NodePath
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-total-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryTotalBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-total-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryTotalBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-total-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryTotalEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-total-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryTotalEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-used-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryUsedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-used-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryUsedBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-used-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryUsedEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-memory-used-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).AclMemoryUsedEntries
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-total-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-total-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).FragmentTotalPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-total-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-total-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).FragmentTotalPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-utilization"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-utilization"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-utilization"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).LookupUtilization
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/nexthop-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).NexthopMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/nexthop-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).NexthopMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/nexthop-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).NexthopMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/nexthop-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).NexthopMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/lookup-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny struct {
	*ygnmi.NodePath
}

// AclMemoryTotalBytes (leaf): Total firewall or ACL memory counter measured in bytes.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-total-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) AclMemoryTotalBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryTotalBytes (leaf): Total firewall or ACL memory counter measured in bytes.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-total-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) AclMemoryTotalBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryTotalEntries (leaf): Total firewall or ACL memory counter measured in entries.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-total-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) AclMemoryTotalEntries() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryTotalEntries (leaf): Total firewall or ACL memory counter measured in entries.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-total-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-total-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) AclMemoryTotalEntries() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryTotalEntriesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-total-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryUsedBytes (leaf): Amount of used firewall or ACL memory counter measured in bytes.
// The number of used bytes must include the bytes
// that are 'allocated but free' if the memory reaping algorithm makes
// these bytes practically unusable
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-used-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) AclMemoryUsedBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryUsedBytes (leaf): Amount of used firewall or ACL memory counter measured in bytes.
// The number of used bytes must include the bytes
// that are 'allocated but free' if the memory reaping algorithm makes
// these bytes practically unusable
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-used-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) AclMemoryUsedBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryUsedEntries (leaf): Amount of used firewall or ACL memory counter measured in entries.
// The number of used entries must include the entries
// that are 'allocated but free' if the memory reaping algorithm makes
// these entries practically unusable.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-used-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) AclMemoryUsedEntries() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclMemoryUsedEntries (leaf): Amount of used firewall or ACL memory counter measured in entries.
// The number of used entries must include the entries
// that are 'allocated but free' if the memory reaping algorithm makes
// these entries practically unusable.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-memory-used-entries"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/acl-memory-used-entries"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) AclMemoryUsedEntries() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_AclMemoryUsedEntriesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-memory-used-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentTotalPkts (leaf): Total number of fragments generated by the CPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-total-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) FragmentTotalPkts() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-total-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentTotalPkts (leaf): Total number of fragments generated by the CPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-total-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/fragment-total-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) FragmentTotalPkts() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_FragmentTotalPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-total-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupMemory (leaf): The total amount of memory available in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) LookupMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupMemory (leaf): The total amount of memory available in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) LookupMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupMemoryUsed (leaf): The amount of memory used in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) LookupMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupMemoryUsed (leaf): The amount of memory used in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) LookupMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupMemoryUsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupUtilization (leaf): The integrated-circuit lookup subsystem block utilization percentage.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-utilization"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) LookupUtilization() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupUtilization (leaf): The integrated-circuit lookup subsystem block utilization percentage.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-utilization"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/lookup-utilization"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) LookupUtilization() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_LookupUtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-utilization"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NexthopMemory (leaf): The total amount of nexthop memory available in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/nexthop-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) NexthopMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NexthopMemory (leaf): The total amount of nexthop memory available in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/nexthop-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) NexthopMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NexthopMemoryUsed (leaf): The amount of nexthops memory used in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/nexthop-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) NexthopMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NexthopMemoryUsed (leaf): The amount of nexthops memory used in the lookup subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/nexthop-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/nexthop-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) NexthopMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_NexthopMemoryUsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nexthop-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/loopback-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).LoopbackBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/loopback-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).LoopbackBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/loopback-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).LoopbackPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/loopback-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loopback-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).LoopbackPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queue-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).QueueMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queue-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-memory"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).QueueMemory
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queue-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).QueueMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queue-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queue-memory-used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock).QueueMemoryUsed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/queueing-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny struct {
	*ygnmi.NodePath
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackBytes (leaf): The number of bytes in the loopback or re-circulate subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/loopback-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) LoopbackBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loopback-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackBytes (leaf): The number of bytes in the loopback or re-circulate subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/loopback-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) LoopbackBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loopback-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackPackets (leaf): The number of packets in the loopback or re-circulate subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/loopback-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) LoopbackPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loopback-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoopbackPackets (leaf): The number of packets in the loopback or re-circulate subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/loopback-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/loopback-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) LoopbackPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_LoopbackPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loopback-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueMemory (leaf): The total amount of memory available in the queue subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queue-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) QueueMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queue-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueMemory (leaf): The total amount of memory available in the queue subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queue-memory"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) QueueMemory() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queue-memory"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueMemoryUsed (leaf): The amount of memory used in the queue subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queue-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) QueueMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queue-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueMemoryUsed (leaf): The amount of memory used in the queue subsystem.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queue-memory-used"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block/state/queue-memory-used"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) QueueMemoryUsed() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock_QueueMemoryUsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queue-memory-used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_UtilizationPath represents the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPathAny struct {
	*ygnmi.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPath) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPathAny) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
//
//	Name: string
func (n *Component_IntegratedCircuit_UtilizationPath) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePath {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
//
//	Name: string
func (n *Component_IntegratedCircuit_UtilizationPathAny) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPath) ResourceMap() *Component_IntegratedCircuit_Utilization_ResourcePathMap {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPathAny) ResourceMap() *Component_IntegratedCircuit_Utilization_ResourcePathMapAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_CommittedPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/committed YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_CommittedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/committed YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_Resource_CommittedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_FreePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/free YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_FreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_FreePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/free YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_FreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_Resource_FreePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_Resource_FreePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/max-limit YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/max-limit YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_ResourcePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathMap represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathMapAny struct {
	*ygnmi.NodePath
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Committed() *Component_IntegratedCircuit_Utilization_Resource_CommittedPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_CommittedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Committed() *Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Free() *Component_IntegratedCircuit_Utilization_Resource_FreePath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_FreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Free() *Component_IntegratedCircuit_Utilization_Resource_FreePathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_FreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) HighWatermark() *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) HighWatermark() *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) LastHighWatermark() *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) LastHighWatermark() *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) MaxLimit() *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) MaxLimit() *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Used() *Component_IntegratedCircuit_Utilization_Resource_UsedPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Used() *Component_IntegratedCircuit_Utilization_Resource_UsedPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) UsedThresholdUpper() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) UsedThresholdUpper() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) UsedThresholdUpperClear() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) UsedThresholdUpperClear() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) UsedThresholdUpperExceeded() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) UsedThresholdUpperExceeded() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Component_LastPoweroffReason_DetailsPath represents the /openconfig-platform/components/component/state/last-poweroff-reason/details YANG schema element.
type Component_LastPoweroffReason_DetailsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastPoweroffReason_DetailsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-reason/details YANG schema element.
type Component_LastPoweroffReason_DetailsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReason_DetailsPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReason_DetailsPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastPoweroffReason_TriggerPath represents the /openconfig-platform/components/component/state/last-poweroff-reason/trigger YANG schema element.
type Component_LastPoweroffReason_TriggerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastPoweroffReason_TriggerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-reason/trigger YANG schema element.
type Component_LastPoweroffReason_TriggerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReason_TriggerPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReason_TriggerPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastPoweroffReasonPath represents the /openconfig-platform/components/component/state/last-poweroff-reason YANG schema element.
type Component_LastPoweroffReasonPath struct {
	*ygnmi.NodePath
}

// Component_LastPoweroffReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-reason YANG schema element.
type Component_LastPoweroffReasonPathAny struct {
	*ygnmi.NodePath
}

// Details (leaf): Provides a detailed reason for component power-off.
// For system-initiated power-offs, this field can include
// specific causes (e.g., critical errors resulting in a
// controller-card bootloop).
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReasonPath) Details() *Component_LastPoweroffReason_DetailsPath {
	ps := &Component_LastPoweroffReason_DetailsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Details (leaf): Provides a detailed reason for component power-off.
// For system-initiated power-offs, this field can include
// specific causes (e.g., critical errors resulting in a
// controller-card bootloop).
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReasonPathAny) Details() *Component_LastPoweroffReason_DetailsPathAny {
	ps := &Component_LastPoweroffReason_DetailsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers for the last poweroff
// event. Component power-off can be triggered
// in various ways,
//   - USER_INITIATED
//   - SYSTEM_INITIATED
//   - POWER_FAILURE
//
// This field is not updated during reboots; those are
// tracked in the 'last-reboot-reason' leaf.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReasonPath) Trigger() *Component_LastPoweroffReason_TriggerPath {
	ps := &Component_LastPoweroffReason_TriggerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers for the last poweroff
// event. Component power-off can be triggered
// in various ways,
//   - USER_INITIATED
//   - SYSTEM_INITIATED
//   - POWER_FAILURE
//
// This field is not updated during reboots; those are
// tracked in the 'last-reboot-reason' leaf.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReasonPathAny) Trigger() *Component_LastPoweroffReason_TriggerPathAny {
	ps := &Component_LastPoweroffReason_TriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastPoweroffReasonPath) State() ygnmi.SingletonQuery[*oc.Component_LastPoweroffReason] {
	return ygnmi.NewSingletonQuery[*oc.Component_LastPoweroffReason](
		"Component_LastPoweroffReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastPoweroffReasonPathAny) State() ygnmi.WildcardQuery[*oc.Component_LastPoweroffReason] {
	return ygnmi.NewWildcardQuery[*oc.Component_LastPoweroffReason](
		"Component_LastPoweroffReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverReason_DetailsPath represents the /openconfig-platform/components/component/state/last-switchover-reason/details YANG schema element.
type Component_LastSwitchoverReason_DetailsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastSwitchoverReason_DetailsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason/details YANG schema element.
type Component_LastSwitchoverReason_DetailsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReason_DetailsPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReason_DetailsPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverReason_TriggerPath represents the /openconfig-platform/components/component/state/last-switchover-reason/trigger YANG schema element.
type Component_LastSwitchoverReason_TriggerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastSwitchoverReason_TriggerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason/trigger YANG schema element.
type Component_LastSwitchoverReason_TriggerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReason_TriggerPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReason_TriggerPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverReasonPath represents the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReasonPath struct {
	*ygnmi.NodePath
}

// Component_LastSwitchoverReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReasonPathAny struct {
	*ygnmi.NodePath
}

// Details (leaf): Records detailed description of why the switchover happens.
// For example, when system initiated the switchover, this leaf
// can be used to record the specific reason, e.g. due to critical
// errors of the routing daemon in the primary role.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReasonPath) Details() *Component_LastSwitchoverReason_DetailsPath {
	ps := &Component_LastSwitchoverReason_DetailsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Details (leaf): Records detailed description of why the switchover happens.
// For example, when system initiated the switchover, this leaf
// can be used to record the specific reason, e.g. due to critical
// errors of the routing daemon in the primary role.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReasonPathAny) Details() *Component_LastSwitchoverReason_DetailsPathAny {
	ps := &Component_LastSwitchoverReason_DetailsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers, e.g. user or system
// initiated the switchover.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReasonPath) Trigger() *Component_LastSwitchoverReason_TriggerPath {
	ps := &Component_LastSwitchoverReason_TriggerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers, e.g. user or system
// initiated the switchover.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReasonPathAny) Trigger() *Component_LastSwitchoverReason_TriggerPathAny {
	ps := &Component_LastSwitchoverReason_TriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastSwitchoverReasonPath) State() ygnmi.SingletonQuery[*oc.Component_LastSwitchoverReason] {
	return ygnmi.NewSingletonQuery[*oc.Component_LastSwitchoverReason](
		"Component_LastSwitchoverReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastSwitchoverReasonPathAny) State() ygnmi.WildcardQuery[*oc.Component_LastSwitchoverReason] {
	return ygnmi.NewWildcardQuery[*oc.Component_LastSwitchoverReason](
		"Component_LastSwitchoverReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_PowerAdminStatePath represents the /openconfig-platform/components/component/linecard/state/power-admin-state YANG schema element.
type Component_Linecard_PowerAdminStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_PowerAdminStatePathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/state/power-admin-state YANG schema element.
type Component_Linecard_PowerAdminStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/power-admin-state"
//	Path from root:       "/components/component/linecard/state/power-admin-state"
func (n *Component_Linecard_PowerAdminStatePath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_ComponentPowerType] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_ComponentPowerType](
		"Component_Linecard",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Linecard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/power-admin-state"
//	Path from root:       "/components/component/linecard/state/power-admin-state"
func (n *Component_Linecard_PowerAdminStatePathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_ComponentPowerType] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_ComponentPowerType](
		"Component_Linecard",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Linecard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/power-admin-state"
//	Path from root:       "/components/component/linecard/config/power-admin-state"
func (n *Component_Linecard_PowerAdminStatePath) Config() ygnmi.ConfigQuery[oc.E_PlatformTypes_ComponentPowerType] {
	return ygnmi.NewConfigQuery[oc.E_PlatformTypes_ComponentPowerType](
		"Component_Linecard",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Linecard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/power-admin-state"
//	Path from root:       "/components/component/linecard/config/power-admin-state"
func (n *Component_Linecard_PowerAdminStatePathAny) Config() ygnmi.WildcardQuery[oc.E_PlatformTypes_ComponentPowerType] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_ComponentPowerType](
		"Component_Linecard",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "power-admin-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentPowerType, bool) {
			ret := gs.(*oc.Component_Linecard).PowerAdminState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_SlotIdPath represents the /openconfig-platform/components/component/linecard/state/slot-id YANG schema element.
type Component_Linecard_SlotIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_SlotIdPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/state/slot-id YANG schema element.
type Component_Linecard_SlotIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/slot-id"
//	Path from root:       "/components/component/linecard/state/slot-id"
func (n *Component_Linecard_SlotIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Linecard",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "slot-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard).SlotId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/slot-id"
//	Path from root:       "/components/component/linecard/state/slot-id"
func (n *Component_Linecard_SlotIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Linecard",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "slot-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard).SlotId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LinecardPath represents the /openconfig-platform/components/component/linecard YANG schema element.
type Component_LinecardPath struct {
	*ygnmi.NodePath
}

// Component_LinecardPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard YANG schema element.
type Component_LinecardPathAny struct {
	*ygnmi.NodePath
}

// PowerAdminState (leaf): When set to POWER_DISABLED, the component should be shut down by removing
// electrical power.  This is intended to be used to prevent the component
// from becoming active even after a reboot of the system. A component
// (if controller-card) may not honor power-admin-state depending on rules
// defined in the description of the component config container.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/power-admin-state"
//	Path from root:       "/components/component/linecard/*/power-admin-state"
func (n *Component_LinecardPath) PowerAdminState() *Component_Linecard_PowerAdminStatePath {
	ps := &Component_Linecard_PowerAdminStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "power-admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PowerAdminState (leaf): When set to POWER_DISABLED, the component should be shut down by removing
// electrical power.  This is intended to be used to prevent the component
// from becoming active even after a reboot of the system. A component
// (if controller-card) may not honor power-admin-state depending on rules
// defined in the description of the component config container.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/power-admin-state"
//	Path from root:       "/components/component/linecard/*/power-admin-state"
func (n *Component_LinecardPathAny) PowerAdminState() *Component_Linecard_PowerAdminStatePathAny {
	ps := &Component_Linecard_PowerAdminStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "power-admin-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlotId (leaf): Identifier for the slot or chassis position in which the
// linecard is installed.
//
// This leaf is deprecated and will be replaced by install-position
// and install-component leaves in a future major revision of this
// model.
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/slot-id"
//	Path from root:       "/components/component/linecard/state/slot-id"
func (n *Component_LinecardPath) SlotId() *Component_Linecard_SlotIdPath {
	ps := &Component_Linecard_SlotIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "slot-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SlotId (leaf): Identifier for the slot or chassis position in which the
// linecard is installed.
//
// This leaf is deprecated and will be replaced by install-position
// and install-component leaves in a future major revision of this
// model.
//
//	Defining module:      "openconfig-platform-linecard"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/slot-id"
//	Path from root:       "/components/component/linecard/state/slot-id"
func (n *Component_LinecardPathAny) SlotId() *Component_Linecard_SlotIdPathAny {
	ps := &Component_Linecard_SlotIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "slot-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/linecard/utilization"
func (n *Component_LinecardPath) Utilization() *Component_Linecard_UtilizationPath {
	ps := &Component_Linecard_UtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/linecard/utilization"
func (n *Component_LinecardPathAny) Utilization() *Component_Linecard_UtilizationPathAny {
	ps := &Component_Linecard_UtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LinecardPath) State() ygnmi.SingletonQuery[*oc.Component_Linecard] {
	return ygnmi.NewSingletonQuery[*oc.Component_Linecard](
		"Component_Linecard",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LinecardPathAny) State() ygnmi.WildcardQuery[*oc.Component_Linecard] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard](
		"Component_Linecard",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_LinecardPath) Config() ygnmi.ConfigQuery[*oc.Component_Linecard] {
	return ygnmi.NewConfigQuery[*oc.Component_Linecard](
		"Component_Linecard",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_LinecardPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Linecard] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard](
		"Component_Linecard",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_UtilizationPath represents the /openconfig-platform/components/component/linecard/utilization YANG schema element.
type Component_Linecard_UtilizationPath struct {
	*ygnmi.NodePath
}

// Component_Linecard_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization YANG schema element.
type Component_Linecard_UtilizationPathAny struct {
	*ygnmi.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
func (n *Component_Linecard_UtilizationPath) ResourceAny() *Component_Linecard_Utilization_ResourcePathAny {
	ps := &Component_Linecard_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
func (n *Component_Linecard_UtilizationPathAny) ResourceAny() *Component_Linecard_Utilization_ResourcePathAny {
	ps := &Component_Linecard_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
//
//	Name: string
func (n *Component_Linecard_UtilizationPath) Resource(Name string) *Component_Linecard_Utilization_ResourcePath {
	ps := &Component_Linecard_Utilization_ResourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
//
//	Name: string
func (n *Component_Linecard_UtilizationPathAny) Resource(Name string) *Component_Linecard_Utilization_ResourcePathAny {
	ps := &Component_Linecard_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
func (n *Component_Linecard_UtilizationPath) ResourceMap() *Component_Linecard_Utilization_ResourcePathMap {
	ps := &Component_Linecard_Utilization_ResourcePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/linecard/utilization/resources/resource"
func (n *Component_Linecard_UtilizationPathAny) ResourceMap() *Component_Linecard_Utilization_ResourcePathMapAny {
	ps := &Component_Linecard_Utilization_ResourcePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_UtilizationPath) State() ygnmi.SingletonQuery[*oc.Component_Linecard_Utilization] {
	return ygnmi.NewSingletonQuery[*oc.Component_Linecard_Utilization](
		"Component_Linecard_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_UtilizationPathAny) State() ygnmi.WildcardQuery[*oc.Component_Linecard_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard_Utilization](
		"Component_Linecard_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_UtilizationPath) Config() ygnmi.ConfigQuery[*oc.Component_Linecard_Utilization] {
	return ygnmi.NewConfigQuery[*oc.Component_Linecard_Utilization](
		"Component_Linecard_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Linecard_UtilizationPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Linecard_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Linecard_Utilization](
		"Component_Linecard_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_CommittedPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/committed YANG schema element.
type Component_Linecard_Utilization_Resource_CommittedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_CommittedPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/committed YANG schema element.
type Component_Linecard_Utilization_Resource_CommittedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/committed"
func (n *Component_Linecard_Utilization_Resource_CommittedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/committed"
func (n *Component_Linecard_Utilization_Resource_CommittedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_FreePath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/free YANG schema element.
type Component_Linecard_Utilization_Resource_FreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_FreePathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/free YANG schema element.
type Component_Linecard_Utilization_Resource_FreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/free"
func (n *Component_Linecard_Utilization_Resource_FreePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/free"
func (n *Component_Linecard_Utilization_Resource_FreePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_HighWatermarkPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Linecard_Utilization_Resource_HighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_HighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Linecard_Utilization_Resource_HighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/high-watermark"
func (n *Component_Linecard_Utilization_Resource_HighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/high-watermark"
func (n *Component_Linecard_Utilization_Resource_HighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_LastHighWatermarkPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Linecard_Utilization_Resource_LastHighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_LastHighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Linecard_Utilization_Resource_LastHighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Linecard_Utilization_Resource_LastHighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Linecard_Utilization_Resource_LastHighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_MaxLimitPath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Linecard_Utilization_Resource_MaxLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_MaxLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Linecard_Utilization_Resource_MaxLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/max-limit"
func (n *Component_Linecard_Utilization_Resource_MaxLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/max-limit"
func (n *Component_Linecard_Utilization_Resource_MaxLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Linecard_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/name YANG schema element.
type Component_Linecard_Utilization_Resource_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Linecard_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/linecard/utilization/resources/resource/state/name YANG schema element.
type Component_Linecard_Utilization_Resource_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/name"
func (n *Component_Linecard_Utilization_Resource_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/state/name"
func (n *Component_Linecard_Utilization_Resource_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Linecard_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/config/name"
func (n *Component_Linecard_Utilization_Resource_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform-linecard"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/linecard/utilization/resources/resource/config/name"
func (n *Component_Linecard_Utilization_Resource_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Linecard_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Linecard_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Linecard_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
