/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_FanPath represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPath struct {
	*ygnmi.NodePath
}

// Component_FanPathAny represents the wildcard version of the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPathAny struct {
	*ygnmi.NodePath
}

// Speed (leaf): Current (instantaneous) fan speed
//
//	Defining module:      "openconfig-platform-fan"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/speed"
//	Path from root:       "/components/component/fan/state/speed"
func (n *Component_FanPath) Speed() *Component_Fan_SpeedPath {
	ps := &Component_Fan_SpeedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Speed (leaf): Current (instantaneous) fan speed
//
//	Defining module:      "openconfig-platform-fan"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/speed"
//	Path from root:       "/components/component/fan/state/speed"
func (n *Component_FanPathAny) Speed() *Component_Fan_SpeedPathAny {
	ps := &Component_Fan_SpeedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "speed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FanPath) State() ygnmi.SingletonQuery[*oc.Component_Fan] {
	return ygnmi.NewSingletonQuery[*oc.Component_Fan](
		"Component_Fan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FanPathAny) State() ygnmi.WildcardQuery[*oc.Component_Fan] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fan](
		"Component_Fan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FanPath) Config() ygnmi.ConfigQuery[*oc.Component_Fan] {
	return ygnmi.NewConfigQuery[*oc.Component_Fan](
		"Component_Fan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FanPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Fan] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fan](
		"Component_Fan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_NodeIdPath represents the /openconfig-platform/components/component/integrated-circuit/state/node-id YANG schema element.
type Component_IntegratedCircuit_NodeIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_NodeIdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/state/node-id YANG schema element.
type Component_IntegratedCircuit_NodeIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "state/node-id"
//	Path from root:       "/components/component/integrated-circuit/state/node-id"
func (n *Component_IntegratedCircuit_NodeIdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "node-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit).NodeId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "state/node-id"
//	Path from root:       "/components/component/integrated-circuit/state/node-id"
func (n *Component_IntegratedCircuit_NodeIdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "node-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit).NodeId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "config/node-id"
//	Path from root:       "/components/component/integrated-circuit/config/node-id"
func (n *Component_IntegratedCircuit_NodeIdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Component_IntegratedCircuit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "node-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit).NodeId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-p4rt"
//	Path from parent:     "config/node-id"
//	Path from root:       "/components/component/integrated-circuit/config/node-id"
func (n *Component_IntegratedCircuit_NodeIdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "node-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit).NodeId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuitPath represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPathAny struct {
	*ygnmi.NodePath
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "backplane-facing-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPath) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "backplane-facing-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPathAny) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Container for integrated circuit memory.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "memory"
//	Path from root:       "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPath) Memory() *Component_IntegratedCircuit_MemoryPath {
	ps := &Component_IntegratedCircuit_MemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Container for integrated circuit memory.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "memory"
//	Path from root:       "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPathAny) Memory() *Component_IntegratedCircuit_MemoryPathAny {
	ps := &Component_IntegratedCircuit_MemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NodeId (leaf): The numeric ID (device_id) used by the controller to address
// the integrated circuit, which may be referred to as a 'device',
// 'node' or 'target' by the P4RT specification.
//
// Each switching ASIC (i.e., node) is addressed by the external
// entity based on its numeric identifier.
//
// The node ID is specified in addition to the string identifier
// assigned to the integrated circuit within the
// /components/component list.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/node-id"
//	Path from root:       "/components/component/integrated-circuit/*/node-id"
func (n *Component_IntegratedCircuitPath) NodeId() *Component_IntegratedCircuit_NodeIdPath {
	ps := &Component_IntegratedCircuit_NodeIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "node-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NodeId (leaf): The numeric ID (device_id) used by the controller to address
// the integrated circuit, which may be referred to as a 'device',
// 'node' or 'target' by the P4RT specification.
//
// Each switching ASIC (i.e., node) is addressed by the external
// entity based on its numeric identifier.
//
// The node ID is specified in addition to the string identifier
// assigned to the integrated circuit within the
// /components/component list.
//
//	Defining module:      "openconfig-p4rt"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/node-id"
//	Path from root:       "/components/component/integrated-circuit/*/node-id"
func (n *Component_IntegratedCircuitPathAny) NodeId() *Component_IntegratedCircuit_NodeIdPathAny {
	ps := &Component_IntegratedCircuit_NodeIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "node-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PipelineCounters (container): Top-level container for the packet, drop, and error counters for the
// five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "pipeline-counters"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters"
func (n *Component_IntegratedCircuitPath) PipelineCounters() *Component_IntegratedCircuit_PipelineCountersPath {
	ps := &Component_IntegratedCircuit_PipelineCountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"pipeline-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PipelineCounters (container): Top-level container for the packet, drop, and error counters for the
// five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "pipeline-counters"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters"
func (n *Component_IntegratedCircuitPathAny) PipelineCounters() *Component_IntegratedCircuit_PipelineCountersPathAny {
	ps := &Component_IntegratedCircuit_PipelineCountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pipeline-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPath) Utilization() *Component_IntegratedCircuit_UtilizationPath {
	ps := &Component_IntegratedCircuit_UtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPathAny) Utilization() *Component_IntegratedCircuit_UtilizationPathAny {
	ps := &Component_IntegratedCircuit_UtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).AvailablePct
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).AvailablePct
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).ConsumedCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).ConsumedCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).Total
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).Total
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).TotalOperationalCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).TotalOperationalCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacityPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_BackplaneFacingCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacityPathAny struct {
	*ygnmi.NodePath
}

// AvailablePct (leaf): Percentage of the total backplane-facing capacity that is currently available to the front
// panel ports taking into account failures and/or degradation within the system.
//
// In the case that there is more backplane-facing capacity available than the front-panel
// ports consume, this value may be greater than 100%.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) AvailablePct() *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvailablePct (leaf): Percentage of the total backplane-facing capacity that is currently available to the front
// panel ports taking into account failures and/or degradation within the system.
//
// In the case that there is more backplane-facing capacity available than the front-panel
// ports consume, this value may be greater than 100%.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) AvailablePct() *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConsumedCapacity (leaf): Backplane-facing capacity that is consumed by front-panel ports that are connected
// to the integrated circuit and are operationally up.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) ConsumedCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConsumedCapacity (leaf): Backplane-facing capacity that is consumed by front-panel ports that are connected
// to the integrated circuit and are operationally up.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) ConsumedCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Total (leaf): Total backplane-facing capacity that is available in the presence
// of no link failures or degradation.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) Total() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Total (leaf): Total backplane-facing capacity that is available in the presence
// of no link failures or degradation.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) Total() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalOperationalCapacity (leaf): Total backplane-facing capacity that is currently available based
// on the active links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) TotalOperationalCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalOperationalCapacity (leaf): Total backplane-facing capacity that is currently available based
// on the active links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) TotalOperationalCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/memory/state/corrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory/state/corrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).CorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).CorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Memory_TotalParityErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/memory/state/total-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_TotalParityErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory/state/total-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_Memory_TotalParityErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).TotalParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).TotalParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/memory/state/uncorrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory/state/uncorrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).UncorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).UncorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_MemoryPath represents the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type Component_IntegratedCircuit_MemoryPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_MemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type Component_IntegratedCircuit_MemoryPathAny struct {
	*ygnmi.NodePath
}

// CorrectedParityErrors (leaf): Number of corrected parity errors. Single bit ECC errors can be
// detected and corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPath) CorrectedParityErrors() *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath {
	ps := &Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CorrectedParityErrors (leaf): Number of corrected parity errors. Single bit ECC errors can be
// detected and corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPathAny) CorrectedParityErrors() *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny {
	ps := &Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalParityErrors (leaf): Total number of parity errors. This includes both the corrected and
// uncorrected parity errors.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPath) TotalParityErrors() *Component_IntegratedCircuit_Memory_TotalParityErrorsPath {
	ps := &Component_IntegratedCircuit_Memory_TotalParityErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalParityErrors (leaf): Total number of parity errors. This includes both the corrected and
// uncorrected parity errors.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPathAny) TotalParityErrors() *Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny {
	ps := &Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectedParityErrors (leaf): Number of uncorrected parity errors. Multi-bit ECC errors can be
// detected but cannot be corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPath) UncorrectedParityErrors() *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath {
	ps := &Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectedParityErrors (leaf): Number of uncorrected parity errors. Multi-bit ECC errors can be
// detected but cannot be corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPathAny) UncorrectedParityErrors() *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny {
	ps := &Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCountersPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters YANG schema element.
type Component_IntegratedCircuit_PipelineCountersPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCountersPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters YANG schema element.
type Component_IntegratedCircuit_PipelineCountersPathAny struct {
	*ygnmi.NodePath
}

// ControlPlaneTraffic (container): Counters that are related to traffic destined to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "control-plane-traffic"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic"
func (n *Component_IntegratedCircuit_PipelineCountersPath) ControlPlaneTraffic() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"control-plane-traffic"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ControlPlaneTraffic (container): Counters that are related to traffic destined to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "control-plane-traffic"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic"
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) ControlPlaneTraffic() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"control-plane-traffic"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Drop (container): IC drop counters for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "drop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop"
func (n *Component_IntegratedCircuit_PipelineCountersPath) Drop() *Component_IntegratedCircuit_PipelineCounters_DropPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_DropPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Drop (container): IC drop counters for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "drop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop"
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) Drop() *Component_IntegratedCircuit_PipelineCounters_DropPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_DropPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Errors (container): IC errors for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "errors"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors"
func (n *Component_IntegratedCircuit_PipelineCountersPath) Errors() *Component_IntegratedCircuit_PipelineCounters_ErrorsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Errors (container): IC errors for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "errors"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors"
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) Errors() *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Packet (container): IC packet counters for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet"
func (n *Component_IntegratedCircuit_PipelineCountersPath) Packet() *Component_IntegratedCircuit_PipelineCounters_PacketPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_PacketPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Packet (container): IC packet counters for all five NPU sub-blocks.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet"
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) Packet() *Component_IntegratedCircuit_PipelineCounters_PacketPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_PacketPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCountersPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters](
		"Component_IntegratedCircuit_PipelineCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCountersPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters](
		"Component_IntegratedCircuit_PipelineCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/dropped-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).DroppedAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/dropped-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).DroppedAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/dropped-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-bytes-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).DroppedBytesAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/dropped-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped-bytes-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).DroppedBytesAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queued-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queued-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).QueuedAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queued-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queued-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).QueuedAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queued-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queued-bytes-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).QueuedBytesAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/queued-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "queued-bytes-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic).QueuedBytesAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny struct {
	*ygnmi.NodePath
}

// DroppedAggregate (leaf): This captures the aggregation of all counters where the switch has dropped
// traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/dropped-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) DroppedAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedAggregate (leaf): This captures the aggregation of all counters where the switch has dropped
// traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/dropped-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) DroppedAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedBytesAggregate (leaf): This captures the aggregation of all counters in bytes where the switch has
// dropped traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/dropped-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) DroppedBytesAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-bytes-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DroppedBytesAggregate (leaf): This captures the aggregation of all counters in bytes where the switch has
// dropped traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/dropped-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/dropped-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) DroppedBytesAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_DroppedBytesAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped-bytes-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuedAggregate (leaf): This captures the aggregation of all counters where the switch has enqueued
// traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queued-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) QueuedAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queued-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuedAggregate (leaf): This captures the aggregation of all counters where the switch has enqueued
// traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queued-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) QueuedAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queued-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuedBytesAggregate (leaf): This captures the aggregation of all counters in bytes where the switch has
// enqueued traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queued-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) QueuedBytesAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queued-bytes-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueuedBytesAggregate (leaf): This captures the aggregation of all counters in bytes where the switch has
// enqueued traffic related to the control-plane.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/queued-bytes-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/state/queued-bytes-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) QueuedBytesAggregate() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_QueuedBytesAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "queued-bytes-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vendor (container): Counters within these containers are defined and augmented by vendors.
// As each ASIC and vendor has different implementation and internal
// parts where packets may be dropped at any point in time. Providing
// vendor-specific counters provides better visibility into control-plane traffic.
//
// The recommended usage of this container is to create an augment at
// .../pipeline-counter/control-plane-traffic/vendor that contains additional
// vendor/platform specific containers.
//
// e.g.
//
//	augment /components/component/integrated-circuit/pipeline-counter/control-plane-traffic/vendor {
//	 container <vendor name> {
//	   container <platform name> {
//	     container state {
//	       leaf counter-a {
//	         uses control-plane-traffic-vendor-counters;
//	       }
//
//	       leaf counter-b {
//	         uses control-plane-traffic-vendor-counters;
//	       }
//	     }
//	   }
//	 }
//	}
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "vendor"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/vendor"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) Vendor() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vendor"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vendor (container): Counters within these containers are defined and augmented by vendors.
// As each ASIC and vendor has different implementation and internal
// parts where packets may be dropped at any point in time. Providing
// vendor-specific counters provides better visibility into control-plane traffic.
//
// The recommended usage of this container is to create an augment at
// .../pipeline-counter/control-plane-traffic/vendor that contains additional
// vendor/platform specific containers.
//
// e.g.
//
//	augment /components/component/integrated-circuit/pipeline-counter/control-plane-traffic/vendor {
//	 container <vendor name> {
//	   container <platform name> {
//	     container state {
//	       leaf counter-a {
//	         uses control-plane-traffic-vendor-counters;
//	       }
//
//	       leaf counter-b {
//	         uses control-plane-traffic-vendor-counters;
//	       }
//	     }
//	   }
//	 }
//	}
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "vendor"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/vendor"
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) Vendor() *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vendor"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTrafficPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/vendor YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/control-plane-traffic/vendor YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_VendorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor](
		"Component_IntegratedCircuit_PipelineCounters_ControlPlaneTraffic_Vendor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/adverse-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adverse-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).AdverseAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/adverse-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adverse-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).AdverseAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/congestion-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "congestion-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).CongestionAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/congestion-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "congestion-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).CongestionAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/no-route YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/no-route YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).NoRoute
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).NoRoute
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/packet-processing-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packet-processing-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).PacketProcessingAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/packet-processing-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "packet-processing-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).PacketProcessingAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/urpf-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "urpf-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).UrpfAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/urpf-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "urpf-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop).UrpfAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_DropPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_DropPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_DropPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_DropPathAny struct {
	*ygnmi.NodePath
}

// AdverseAggregate (leaf): This captures the aggregation of all counters where the switch is
// unexpectedly dropping packets. Occurrence of these drops on a stable
// (no recent hardware or config changes) and otherwise healthy
// switch needs further investigation.
// This leaf counts packet discarded as result of corrupted
// programming state in an INTEGRATED_CIRCUIT or corrupted data
// structures of packet descriptors.
//
// Note: corrupted packets received on ingress interfaces should be counted
// in `/interfaces/interface/state/counters/in-errors` and NOT counted as
// adverse-aggregate. This is because incoming corrupted packets are NOT
// a signal of adverse state of an INTEGRATED_CIRCUIT but rather of an
// entity adjacent to the Interface, such as a cable or transceiver). Therefore
// such drops SHOULD NOT be counted as adverse-aggregate to preserve
// a clean signal of INTEGRATED_CIRCUIT adverse state.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/adverse-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) AdverseAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adverse-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdverseAggregate (leaf): This captures the aggregation of all counters where the switch is
// unexpectedly dropping packets. Occurrence of these drops on a stable
// (no recent hardware or config changes) and otherwise healthy
// switch needs further investigation.
// This leaf counts packet discarded as result of corrupted
// programming state in an INTEGRATED_CIRCUIT or corrupted data
// structures of packet descriptors.
//
// Note: corrupted packets received on ingress interfaces should be counted
// in `/interfaces/interface/state/counters/in-errors` and NOT counted as
// adverse-aggregate. This is because incoming corrupted packets are NOT
// a signal of adverse state of an INTEGRATED_CIRCUIT but rather of an
// entity adjacent to the Interface, such as a cable or transceiver). Therefore
// such drops SHOULD NOT be counted as adverse-aggregate to preserve
// a clean signal of INTEGRATED_CIRCUIT adverse state.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/adverse-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/adverse-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) AdverseAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_AdverseAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adverse-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CongestionAggregate (leaf): This tracks the aggregation of all counters where the expected
// conditions of packet drops due to internal congestion in some block of
// the hardware that may not be visible in through other congestion
// indicators like interface discards or queue drop counters.
//
// This leaf counts packet discarded as result of exceeding
// performance limits of an INTEGRATED_CIRCUT, when it processes
// non-corrupted packets using legitimate, non-corrupted programming
// state of the INTEGRATED_CIRCUIT.
//
// The typical example is overloading given IC with higher packet rate (pps)
// then given chip can handle. For example, let's assume chip X can process
// 3.6Bpps of incoming traffic and 2000 Mpps. However if average incoming
// packet size is 150B, at full ingress rate this become 3000Mpps. Hence
// 1/3 of packets would be cropped and should be counted against
// congestion-aggregate.
//
// Another example is the case when some INTEGRATED_CIRCUIT internal data bus is
// too narrow/slow for handling traffic. For example let's assume chip X needs to send
// 3Tbps of traffic to an external buffer memory which has only 2Tbps access I/O.  In
// this case packets would be discarded, because of congestion of memory I/O bus
// which is part of the INTEGRATED_CIRCUIT.  Depending on the design of the
// INTEGRATED_CIRCUIT, packets could be discarded even if interface queues are
// not full, hence this scenario is NOT treated as QoS queue tail-drops nor WRED drops.
//
// Yet another example is the case where extremely large and long
// ACL/filter requires more cycles to process than the INTEGRATED_CIRCUIT
// has budgeted.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/congestion-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) CongestionAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "congestion-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CongestionAggregate (leaf): This tracks the aggregation of all counters where the expected
// conditions of packet drops due to internal congestion in some block of
// the hardware that may not be visible in through other congestion
// indicators like interface discards or queue drop counters.
//
// This leaf counts packet discarded as result of exceeding
// performance limits of an INTEGRATED_CIRCUT, when it processes
// non-corrupted packets using legitimate, non-corrupted programming
// state of the INTEGRATED_CIRCUIT.
//
// The typical example is overloading given IC with higher packet rate (pps)
// then given chip can handle. For example, let's assume chip X can process
// 3.6Bpps of incoming traffic and 2000 Mpps. However if average incoming
// packet size is 150B, at full ingress rate this become 3000Mpps. Hence
// 1/3 of packets would be cropped and should be counted against
// congestion-aggregate.
//
// Another example is the case when some INTEGRATED_CIRCUIT internal data bus is
// too narrow/slow for handling traffic. For example let's assume chip X needs to send
// 3Tbps of traffic to an external buffer memory which has only 2Tbps access I/O.  In
// this case packets would be discarded, because of congestion of memory I/O bus
// which is part of the INTEGRATED_CIRCUIT.  Depending on the design of the
// INTEGRATED_CIRCUIT, packets could be discarded even if interface queues are
// not full, hence this scenario is NOT treated as QoS queue tail-drops nor WRED drops.
//
// Yet another example is the case where extremely large and long
// ACL/filter requires more cycles to process than the INTEGRATED_CIRCUIT
// has budgeted.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/congestion-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/congestion-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) CongestionAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_CongestionAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "congestion-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FabricBlock (container): The IC fabric block subsystem connects the IC to the external
// systems fabric subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) FabricBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FabricBlock (container): The IC fabric block subsystem connects the IC to the external
// systems fabric subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) FabricBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceBlock (container): The IC host interface block subsystem connects the IC to the
// external systems host or control subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) HostInterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceBlock (container): The IC host interface block subsystem connects the IC to the
// external systems host or control subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) HostInterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlock (container): The IC interface subsystem connects the IC to the external PHY or
// MAC.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) InterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlock (container): The IC interface subsystem connects the IC to the external PHY or
// MAC.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) InterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlock (container): The IC lookup subsystem perform the next hop lookup of the packet
// and other forwarding features such as firewall filters.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) LookupBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlock (container): The IC lookup subsystem perform the next hop lookup of the packet
// and other forwarding features such as firewall filters.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) LookupBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NoRoute (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to no FIB entry for this ipv4 or ipv6 lookup.
//
// This counter and the packet-processing-aggregate counter should be
// incremented for each no-route packet drop.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) NoRoute() *Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoRoute (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to no FIB entry for this ipv4 or ipv6 lookup.
//
// This counter and the packet-processing-aggregate counter should be
// incremented for each no-route packet drop.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) NoRoute() *Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_NoRoutePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketProcessingAggregate (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to legitimate forwarding decisions (ACL drops,
// No Route etc.)
// This counter counts packet discarded as result of processing
// non-corrupted packet against legitimate, non-corrupted state
// of INTEGRATED_CIRCUIT program (FIB content, ACL content, rate-limiting token-buckets)
// which mandate packet drop. The examples of this class of discard are:
// - dropping packets which destination address to no match any FIB entry
// - dropping packets which destination address matches FIB entry pointing
// to discard next-hop (e.g. route to null0)
// - dropping packts due to ACL/packet filter decission
// - dropping packets due to its TTL = 1
// - dropping packets due to its size exceeds egress interface MTU and
// packet can't be fragmented (IPv6 or do not fragment bit is set)
// -  dropping packets due to uRPF rules (note: packet is counted here and
// in separate, urpf-aggregate counter simultaneously)
// - etc
//
// Note:The INTEGRATED_CIRCUIT is doing exactly what it is programmed
// to do, and the packet is parsable.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/packet-processing-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) PacketProcessingAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packet-processing-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketProcessingAggregate (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to legitimate forwarding decisions (ACL drops,
// No Route etc.)
// This counter counts packet discarded as result of processing
// non-corrupted packet against legitimate, non-corrupted state
// of INTEGRATED_CIRCUIT program (FIB content, ACL content, rate-limiting token-buckets)
// which mandate packet drop. The examples of this class of discard are:
// - dropping packets which destination address to no match any FIB entry
// - dropping packets which destination address matches FIB entry pointing
// to discard next-hop (e.g. route to null0)
// - dropping packts due to ACL/packet filter decission
// - dropping packets due to its TTL = 1
// - dropping packets due to its size exceeds egress interface MTU and
// packet can't be fragmented (IPv6 or do not fragment bit is set)
// -  dropping packets due to uRPF rules (note: packet is counted here and
// in separate, urpf-aggregate counter simultaneously)
// - etc
//
// Note:The INTEGRATED_CIRCUIT is doing exactly what it is programmed
// to do, and the packet is parsable.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/packet-processing-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/packet-processing-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) PacketProcessingAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_PacketProcessingAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "packet-processing-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueueingBlock (container): The IC queueing subsystem buffers the packet while processing it
// and queues the packet for delivery to the next stage
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) QueueingBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlock (container): The IC queueing subsystem buffers the packet while processing it
// and queues the packet for delivery to the next stage
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) QueueingBlock() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UrpfAggregate (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to failing uRPF lookup check.  This counter
// and the packet-processing-aggregate counter should be incremented
// for each uRPF packet drop.
// This counter counts packet discarded as result of Unicast Reverse
// Path Forwarding verification.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/urpf-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) UrpfAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "urpf-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UrpfAggregate (leaf): This aggregation of counters represents the conditions in which
// packets are dropped due to failing uRPF lookup check.  This counter
// and the packet-processing-aggregate counter should be incremented
// for each uRPF packet drop.
// This counter counts packet discarded as result of Unicast Reverse
// Path Forwarding verification.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/urpf-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/state/urpf-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) UrpfAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_UrpfAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "urpf-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vendor (container): Counters within these containers are defined and augmented by vendors.
// As each ASIC and vendor has different implementation and internal
// parts where packets may be dropped at any point in time. Providing
// specific hardware counters provides better visibility into traffic drop.
//
// The recommended usage of this container is to create an augment at
// .../pipeline-counter/drop/vendor that contains additional vendor/platform
// specific containers.
//
// e.g.
//
//	augment /components/component/integrated-circuit/pipeline-counter/drop/vendor {
//	 container <vendor name> {
//	   container <platform name> {
//	     uses pipeline-vendor-drop-containers;
//	   }
//	 }
//	}
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "vendor"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/vendor"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) Vendor() *Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vendor"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vendor (container): Counters within these containers are defined and augmented by vendors.
// As each ASIC and vendor has different implementation and internal
// parts where packets may be dropped at any point in time. Providing
// specific hardware counters provides better visibility into traffic drop.
//
// The recommended usage of this container is to create an augment at
// .../pipeline-counter/drop/vendor that contains additional vendor/platform
// specific containers.
//
// e.g.
//
//	augment /components/component/integrated-circuit/pipeline-counter/drop/vendor {
//	 container <vendor name> {
//	   container <platform name> {
//	     uses pipeline-vendor-drop-containers;
//	   }
//	 }
//	}
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "vendor"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/vendor"
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) Vendor() *Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vendor"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_DropPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_DropPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop](
		"Component_IntegratedCircuit_PipelineCounters_Drop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fabric-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fabric-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).FabricAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fabric-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fabric-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).FabricAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).InHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).InHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).InLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).InLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lost-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lost-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).LostPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lost-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lost-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).LostPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).OutHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).OutHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).OutLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).OutLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/fabric-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny struct {
	*ygnmi.NodePath
}

// FabricAggregate (leaf): Aggregate of fabric-in and fabric-out drops.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fabric-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) FabricAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fabric-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FabricAggregate (leaf): Aggregate of fabric-in and fabric-out drops.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fabric-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/fabric-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) FabricAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_FabricAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fabric-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriority (leaf): Incoming high priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) InHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriority (leaf): Incoming high priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) InHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InHighPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriority (leaf): Incoming low priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) InLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriority (leaf): Incoming low priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) InLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_InLowPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LostPackets (leaf): Fabric drops due to re-ordering, or due to packets arriving late, or
// due to some loss in the fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lost-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) LostPackets() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lost-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LostPackets (leaf): Fabric drops due to re-ordering, or due to packets arriving late, or
// due to some loss in the fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lost-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/lost-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) LostPackets() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_LostPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lost-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriority (leaf): Outgoing high priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) OutHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriority (leaf): Outgoing high priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) OutHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutHighPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriority (leaf): Outgoing low priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) OutLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriority (leaf): Outgoing low priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) OutLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OutLowPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/fabric-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_FabricBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-punt"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-punt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).FragmentPunt
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-punt"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-punt"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).FragmentPunt
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/host-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).HostAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/host-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).HostAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).InHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).InHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).InLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).InLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).OutHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).OutHighPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).OutLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).OutLowPriority
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).RateLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock).RateLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny struct {
	*ygnmi.NodePath
}

// FragmentPunt (leaf): The packets that were failed to punt to CPU due to policing rate.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-punt"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) FragmentPunt() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-punt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentPunt (leaf): The packets that were failed to punt to CPU due to policing rate.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-punt"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/fragment-punt"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) FragmentPunt() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_FragmentPuntPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-punt"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostAggregate (leaf): Aggregate of all the drops in the host path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/host-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) HostAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "host-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostAggregate (leaf): Aggregate of all the drops in the host path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/host-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/host-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) HostAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_HostAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "host-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriority (leaf): Incoming high priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) InHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriority (leaf): Incoming high priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) InHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InHighPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriority (leaf): Incoming low priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) InLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriority (leaf): Incoming low priority drops towards this integrated-circuit
// subsystem block from the previous NPU sub-block or interface.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/in-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) InLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_InLowPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriority (leaf): Outgoing high priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) OutHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriority (leaf): Outgoing high priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-high-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) OutHighPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutHighPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriority (leaf): Outgoing low priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) OutLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriority (leaf): Outgoing low priority drops towards the fabric/interface from this
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/out-low-priority"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) OutLowPriority() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OutLowPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Packet drops due to the rate limit in the integrated-circuit host
// subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) RateLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Packet drops due to the rate limit in the integrated-circuit host
// subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/host-interface-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) RateLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock_RateLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_HostInterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).InDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).InDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).OutDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).OutDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/interface-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny struct {
	*ygnmi.NodePath
}

// InDrops (leaf): Incoming drops towards the integrated-circuit interface
// subsystem block from the interfaces due to any reason.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath) InDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InDrops (leaf): Incoming drops towards the integrated-circuit interface
// subsystem block from the interfaces due to any reason.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/in-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny) InDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_InDropsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDrops (leaf): Outgoing drops towards the interfaces from the
// integrated-circuit interface subsystem block due to any reason.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath) OutDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutDrops (leaf): Outgoing drops towards the interfaces from the
// integrated-circuit interface subsystem block due to any reason.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/out-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny) OutDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OutDropsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/interface-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_InterfaceBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).AclDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/acl-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "acl-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).AclDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/forwarding-policy"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).ForwardingPolicy
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/forwarding-policy"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).ForwardingPolicy
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-total-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-total-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).FragmentTotalDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-total-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-total-drops"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).FragmentTotalDrops
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/incorrect-software-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incorrect-software-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).IncorrectSoftwareState
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/incorrect-software-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incorrect-software-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).IncorrectSoftwareState
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/invalid-packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "invalid-packet"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).InvalidPacket
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/invalid-packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "invalid-packet"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).InvalidPacket
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).LookupAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-aggregate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).LookupAggregate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-label"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoLabel
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-label"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoLabel
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-nexthop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-nexthop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoNexthop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-nexthop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-nexthop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoNexthop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoRoute
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).NoRoute
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).RateLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock).RateLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/lookup-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny struct {
	*ygnmi.NodePath
}

// AclDrops (leaf): Packets dropped due to firewall or acl terms.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) AclDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AclDrops (leaf): Packets dropped due to firewall or acl terms.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/acl-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/acl-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) AclDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_AclDropsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "acl-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingPolicy (leaf): Packets dropped due to either a filter applied as part of a forwarding
// policy or dropped due to a policy-based-routing policy lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/forwarding-policy"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) ForwardingPolicy() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "forwarding-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingPolicy (leaf): Packets dropped due to either a filter applied as part of a forwarding
// policy or dropped due to a policy-based-routing policy lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/forwarding-policy"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/forwarding-policy"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) ForwardingPolicy() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_ForwardingPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "forwarding-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentTotalDrops (leaf): Total number of packets dropped that could not be fragmented by NPU
// due to DF bit.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-total-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) FragmentTotalDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-total-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FragmentTotalDrops (leaf): Total number of packets dropped that could not be fragmented by NPU
// due to DF bit.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/fragment-total-drops"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/fragment-total-drops"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) FragmentTotalDrops() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_FragmentTotalDropsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "fragment-total-drops"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncorrectSoftwareState (leaf): Packets dropped due to any incorrect or invalid software state of the
// forwarding structures during lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/incorrect-software-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) IncorrectSoftwareState() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "incorrect-software-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncorrectSoftwareState (leaf): Packets dropped due to any incorrect or invalid software state of the
// forwarding structures during lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/incorrect-software-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/incorrect-software-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) IncorrectSoftwareState() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_IncorrectSoftwareStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "incorrect-software-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidPacket (leaf): Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/invalid-packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) InvalidPacket() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "invalid-packet"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InvalidPacket (leaf): Packets dropped due to invalid packet format for ipv4, ipv6, or MPLS.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/invalid-packet"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/invalid-packet"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) InvalidPacket() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_InvalidPacketPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "invalid-packet"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupAggregate (leaf): Packets dropped due to aggregate lookup drop counters - this counter
// is sometimes referred to as Normal Discards or
// ENQ_DISCARDED_PACKET_COUNTER.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) LookupAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupAggregate (leaf): Packets dropped due to aggregate lookup drop counters - this counter
// is sometimes referred to as Normal Discards or
// ENQ_DISCARDED_PACKET_COUNTER.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-aggregate"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/lookup-aggregate"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) LookupAggregate() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_LookupAggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-aggregate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoLabel (leaf): Packets dropped due to no FIB entry for this MPLS label.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-label"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) NoLabel() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoLabel (leaf): Packets dropped due to no FIB entry for this MPLS label.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-label"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-label"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) NoLabel() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoNexthop (leaf): Packets dropped due to no nexthop information - either the nexthop is
// not programmed, or there is an invalid nexthop, or there is no ARP
// information so the nexthop is in invalid state.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-nexthop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) NoNexthop() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-nexthop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoNexthop (leaf): Packets dropped due to no nexthop information - either the nexthop is
// not programmed, or there is an invalid nexthop, or there is no ARP
// information so the nexthop is in invalid state.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-nexthop"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-nexthop"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) NoNexthop() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoNexthopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-nexthop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoRoute (leaf): Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) NoRoute() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NoRoute (leaf): Packets dropped due to no FIB entry for this ipv4 or ipv6 lookup.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/no-route"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/no-route"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) NoRoute() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_NoRoutePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "no-route"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Packets dropped due to rate limiters - either user configured rate
// limiters or system rate limiters in the forwarding path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) RateLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimit (leaf): Packets dropped due to rate limiters - either user configured rate
// limiters or system rate limiters in the forwarding path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rate-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/lookup-block/state/rate-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) RateLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock_RateLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rate-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_LookupBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/incorrect-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incorrect-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).IncorrectState
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/incorrect-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incorrect-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).IncorrectState
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-queue"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).LookupQueue
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/lookup-queue"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lookup-queue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).LookupQueue
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/memory-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).MemoryLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/memory-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "memory-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).MemoryLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
