/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_Chassis_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/name"
func (n *Component_Chassis_Utilization_Resource_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/name"
func (n *Component_Chassis_Utilization_Resource_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/name"
func (n *Component_Chassis_Utilization_Resource_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/name"
func (n *Component_Chassis_Utilization_Resource_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_UsedPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used YANG schema element.
type Component_Chassis_Utilization_Resource_UsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_UsedPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used YANG schema element.
type Component_Chassis_Utilization_Resource_UsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_Resource_UsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_Resource_UsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Chassis_Utilization_ResourcePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePath struct {
	*ygnmi.NodePath
}

// Component_Chassis_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePathAny struct {
	*ygnmi.NodePath
}

// Component_Chassis_Utilization_ResourcePathMap represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePathMap struct {
	*ygnmi.NodePath
}

// Component_Chassis_Utilization_ResourcePathMapAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePathMapAny struct {
	*ygnmi.NodePath
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_ResourcePath) Committed() *Component_Chassis_Utilization_Resource_CommittedPath {
	ps := &Component_Chassis_Utilization_Resource_CommittedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_ResourcePathAny) Committed() *Component_Chassis_Utilization_Resource_CommittedPathAny {
	ps := &Component_Chassis_Utilization_Resource_CommittedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_ResourcePath) Free() *Component_Chassis_Utilization_Resource_FreePath {
	ps := &Component_Chassis_Utilization_Resource_FreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_ResourcePathAny) Free() *Component_Chassis_Utilization_Resource_FreePathAny {
	ps := &Component_Chassis_Utilization_Resource_FreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_ResourcePath) HighWatermark() *Component_Chassis_Utilization_Resource_HighWatermarkPath {
	ps := &Component_Chassis_Utilization_Resource_HighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_ResourcePathAny) HighWatermark() *Component_Chassis_Utilization_Resource_HighWatermarkPathAny {
	ps := &Component_Chassis_Utilization_Resource_HighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_ResourcePath) LastHighWatermark() *Component_Chassis_Utilization_Resource_LastHighWatermarkPath {
	ps := &Component_Chassis_Utilization_Resource_LastHighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_ResourcePathAny) LastHighWatermark() *Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny {
	ps := &Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_ResourcePath) MaxLimit() *Component_Chassis_Utilization_Resource_MaxLimitPath {
	ps := &Component_Chassis_Utilization_Resource_MaxLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_ResourcePathAny) MaxLimit() *Component_Chassis_Utilization_Resource_MaxLimitPathAny {
	ps := &Component_Chassis_Utilization_Resource_MaxLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/name"
func (n *Component_Chassis_Utilization_ResourcePath) Name() *Component_Chassis_Utilization_Resource_NamePath {
	ps := &Component_Chassis_Utilization_Resource_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/name"
func (n *Component_Chassis_Utilization_ResourcePathAny) Name() *Component_Chassis_Utilization_Resource_NamePathAny {
	ps := &Component_Chassis_Utilization_Resource_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_ResourcePath) Used() *Component_Chassis_Utilization_Resource_UsedPath {
	ps := &Component_Chassis_Utilization_Resource_UsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_ResourcePathAny) Used() *Component_Chassis_Utilization_Resource_UsedPathAny {
	ps := &Component_Chassis_Utilization_Resource_UsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_Chassis_Utilization_ResourcePath) UsedThresholdUpper() *Component_Chassis_Utilization_Resource_UsedThresholdUpperPath {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_Chassis_Utilization_ResourcePathAny) UsedThresholdUpper() *Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_ResourcePath) UsedThresholdUpperClear() *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_Chassis_Utilization_ResourcePathAny) UsedThresholdUpperClear() *Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Chassis_Utilization_ResourcePath) UsedThresholdUpperExceeded() *Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/chassis/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_Chassis_Utilization_ResourcePathAny) UsedThresholdUpperExceeded() *Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny {
	ps := &Component_Chassis_Utilization_Resource_UsedThresholdUpperExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePath) State() ygnmi.SingletonQuery[*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathAny) State() ygnmi.WildcardQuery[*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePath) Config() ygnmi.ConfigQuery[*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewConfigQuery[*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Chassis_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Chassis_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Chassis_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Chassis_Utilization_ResourcePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_Chassis_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_Chassis_Utilization_Resource](
		"Component_Chassis_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_Chassis_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_Chassis_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Chassis_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Component_ControllerCardPath represents the /openconfig-platform/components/component/controller-card YANG schema element.
type Component_ControllerCardPath struct {
	*ygnmi.NodePath
}

// Component_ControllerCardPathAny represents the wildcard version of the /openconfig-platform/components/component/controller-card YANG schema element.
type Component_ControllerCardPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_ControllerCardPath) State() ygnmi.SingletonQuery[*oc.Component_ControllerCard] {
	return ygnmi.NewSingletonQuery[*oc.Component_ControllerCard](
		"Component_ControllerCard",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_ControllerCardPathAny) State() ygnmi.WildcardQuery[*oc.Component_ControllerCard] {
	return ygnmi.NewWildcardQuery[*oc.Component_ControllerCard](
		"Component_ControllerCard",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_ControllerCardPath) Config() ygnmi.ConfigQuery[*oc.Component_ControllerCard] {
	return ygnmi.NewConfigQuery[*oc.Component_ControllerCard](
		"Component_ControllerCard",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_ControllerCardPathAny) Config() ygnmi.WildcardQuery[*oc.Component_ControllerCard] {
	return ygnmi.NewWildcardQuery[*oc.Component_ControllerCard](
		"Component_ControllerCard",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_CpuPath represents the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPath struct {
	*ygnmi.NodePath
}

// Component_CpuPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPathAny struct {
	*ygnmi.NodePath
}

// Utilization (container): Statistics representing CPU utilization of the
// component.
//
//	Defining module:      "openconfig-platform-cpu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/cpu/utilization"
func (n *Component_CpuPath) Utilization() *Component_Cpu_UtilizationPath {
	ps := &Component_Cpu_UtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Statistics representing CPU utilization of the
// component.
//
//	Defining module:      "openconfig-platform-cpu"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/cpu/utilization"
func (n *Component_CpuPathAny) Utilization() *Component_Cpu_UtilizationPathAny {
	ps := &Component_Cpu_UtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_CpuPath) State() ygnmi.SingletonQuery[*oc.Component_Cpu] {
	return ygnmi.NewSingletonQuery[*oc.Component_Cpu](
		"Component_Cpu",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_CpuPathAny) State() ygnmi.WildcardQuery[*oc.Component_Cpu] {
	return ygnmi.NewWildcardQuery[*oc.Component_Cpu](
		"Component_Cpu",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_CpuPath) Config() ygnmi.ConfigQuery[*oc.Component_Cpu] {
	return ygnmi.NewConfigQuery[*oc.Component_Cpu](
		"Component_Cpu",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_CpuPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Cpu] {
	return ygnmi.NewWildcardQuery[*oc.Component_Cpu](
		"Component_Cpu",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_AvgPath represents the /openconfig-platform/components/component/cpu/utilization/state/avg YANG schema element.
type Component_Cpu_Utilization_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/avg YANG schema element.
type Component_Cpu_Utilization_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/avg"
//	Path from root:       "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_Utilization_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/avg"
//	Path from root:       "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_Utilization_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_InstantPath represents the /openconfig-platform/components/component/cpu/utilization/state/instant YANG schema element.
type Component_Cpu_Utilization_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/instant YANG schema element.
type Component_Cpu_Utilization_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/instant"
//	Path from root:       "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_Utilization_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/instant"
//	Path from root:       "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_Utilization_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_IntervalPath represents the /openconfig-platform/components/component/cpu/utilization/state/interval YANG schema element.
type Component_Cpu_Utilization_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/interval YANG schema element.
type Component_Cpu_Utilization_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/interval"
//	Path from root:       "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_Utilization_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/interval"
//	Path from root:       "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_Utilization_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_MaxPath represents the /openconfig-platform/components/component/cpu/utilization/state/max YANG schema element.
type Component_Cpu_Utilization_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/max YANG schema element.
type Component_Cpu_Utilization_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/max"
//	Path from root:       "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_Utilization_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/max"
//	Path from root:       "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_Utilization_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_MaxTimePath represents the /openconfig-platform/components/component/cpu/utilization/state/max-time YANG schema element.
type Component_Cpu_Utilization_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/max-time YANG schema element.
type Component_Cpu_Utilization_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/max-time"
//	Path from root:       "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_Utilization_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/max-time"
//	Path from root:       "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_Utilization_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_MinPath represents the /openconfig-platform/components/component/cpu/utilization/state/min YANG schema element.
type Component_Cpu_Utilization_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/min YANG schema element.
type Component_Cpu_Utilization_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/min"
//	Path from root:       "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_Utilization_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/min"
//	Path from root:       "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_Utilization_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_Utilization_MinTimePath represents the /openconfig-platform/components/component/cpu/utilization/state/min-time YANG schema element.
type Component_Cpu_Utilization_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Cpu_Utilization_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization/state/min-time YANG schema element.
type Component_Cpu_Utilization_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/min-time"
//	Path from root:       "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_Utilization_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-cpu"
//	Path from parent:     "state/min-time"
//	Path from root:       "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_Utilization_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Cpu_Utilization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Cpu_Utilization).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Cpu_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Cpu_UtilizationPath represents the /openconfig-platform/components/component/cpu/utilization YANG schema element.
type Component_Cpu_UtilizationPath struct {
	*ygnmi.NodePath
}

// Component_Cpu_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu/utilization YANG schema element.
type Component_Cpu_UtilizationPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/avg"
//	Path from root:       "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_UtilizationPath) Avg() *Component_Cpu_Utilization_AvgPath {
	ps := &Component_Cpu_Utilization_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/avg"
//	Path from root:       "/components/component/cpu/utilization/state/avg"
func (n *Component_Cpu_UtilizationPathAny) Avg() *Component_Cpu_Utilization_AvgPathAny {
	ps := &Component_Cpu_Utilization_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/instant"
//	Path from root:       "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_UtilizationPath) Instant() *Component_Cpu_Utilization_InstantPath {
	ps := &Component_Cpu_Utilization_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/instant"
//	Path from root:       "/components/component/cpu/utilization/state/instant"
func (n *Component_Cpu_UtilizationPathAny) Instant() *Component_Cpu_Utilization_InstantPathAny {
	ps := &Component_Cpu_Utilization_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/interval"
//	Path from root:       "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_UtilizationPath) Interval() *Component_Cpu_Utilization_IntervalPath {
	ps := &Component_Cpu_Utilization_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/interval"
//	Path from root:       "/components/component/cpu/utilization/state/interval"
func (n *Component_Cpu_UtilizationPathAny) Interval() *Component_Cpu_Utilization_IntervalPathAny {
	ps := &Component_Cpu_Utilization_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max"
//	Path from root:       "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_UtilizationPath) Max() *Component_Cpu_Utilization_MaxPath {
	ps := &Component_Cpu_Utilization_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max"
//	Path from root:       "/components/component/cpu/utilization/state/max"
func (n *Component_Cpu_UtilizationPathAny) Max() *Component_Cpu_Utilization_MaxPathAny {
	ps := &Component_Cpu_Utilization_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "state/max-time"
//		Path from root:       "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_UtilizationPath) MaxTime() *Component_Cpu_Utilization_MaxTimePath {
	ps := &Component_Cpu_Utilization_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "state/max-time"
//		Path from root:       "/components/component/cpu/utilization/state/max-time"
func (n *Component_Cpu_UtilizationPathAny) MaxTime() *Component_Cpu_Utilization_MaxTimePathAny {
	ps := &Component_Cpu_Utilization_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/min"
//	Path from root:       "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_UtilizationPath) Min() *Component_Cpu_Utilization_MinPath {
	ps := &Component_Cpu_Utilization_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/min"
//	Path from root:       "/components/component/cpu/utilization/state/min"
func (n *Component_Cpu_UtilizationPathAny) Min() *Component_Cpu_Utilization_MinPathAny {
	ps := &Component_Cpu_Utilization_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "state/min-time"
//		Path from root:       "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_UtilizationPath) MinTime() *Component_Cpu_Utilization_MinTimePath {
	ps := &Component_Cpu_Utilization_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "state/min-time"
//		Path from root:       "/components/component/cpu/utilization/state/min-time"
func (n *Component_Cpu_UtilizationPathAny) MinTime() *Component_Cpu_Utilization_MinTimePathAny {
	ps := &Component_Cpu_Utilization_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Cpu_UtilizationPath) State() ygnmi.SingletonQuery[*oc.Component_Cpu_Utilization] {
	return ygnmi.NewSingletonQuery[*oc.Component_Cpu_Utilization](
		"Component_Cpu_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Cpu_UtilizationPathAny) State() ygnmi.WildcardQuery[*oc.Component_Cpu_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Cpu_Utilization](
		"Component_Cpu_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Cpu_UtilizationPath) Config() ygnmi.ConfigQuery[*oc.Component_Cpu_Utilization] {
	return ygnmi.NewConfigQuery[*oc.Component_Cpu_Utilization](
		"Component_Cpu_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Cpu_UtilizationPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Cpu_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_Cpu_Utilization](
		"Component_Cpu_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_FabricPath represents the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPath struct {
	*ygnmi.NodePath
}

// Component_FabricPathAny represents the wildcard version of the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FabricPath) State() ygnmi.SingletonQuery[*oc.Component_Fabric] {
	return ygnmi.NewSingletonQuery[*oc.Component_Fabric](
		"Component_Fabric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FabricPathAny) State() ygnmi.WildcardQuery[*oc.Component_Fabric] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fabric](
		"Component_Fabric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FabricPath) Config() ygnmi.ConfigQuery[*oc.Component_Fabric] {
	return ygnmi.NewConfigQuery[*oc.Component_Fabric](
		"Component_Fabric",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FabricPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Fabric] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fabric](
		"Component_Fabric",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_FanPath represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPath struct {
	*ygnmi.NodePath
}

// Component_FanPathAny represents the wildcard version of the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FanPath) State() ygnmi.SingletonQuery[*oc.Component_Fan] {
	return ygnmi.NewSingletonQuery[*oc.Component_Fan](
		"Component_Fan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_FanPathAny) State() ygnmi.WildcardQuery[*oc.Component_Fan] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fan](
		"Component_Fan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FanPath) Config() ygnmi.ConfigQuery[*oc.Component_Fan] {
	return ygnmi.NewConfigQuery[*oc.Component_Fan](
		"Component_Fan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_FanPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Fan] {
	return ygnmi.NewWildcardQuery[*oc.Component_Fan](
		"Component_Fan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuitPath represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPathAny struct {
	*ygnmi.NodePath
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "backplane-facing-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPath) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BackplaneFacingCapacity (container): This container allows a particular INTEGRATED_CIRCUIT to report its
// available backplane-facing bandwidth. Where an integrated circuit is connected
// by one or more links to the system's backplane, the capacity is the total cross-
// sectional bandwidth available from the input ports of the integrated circuit
// across the fabric. The capacity should also reflect the operational status of
// the links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "backplane-facing-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity"
func (n *Component_IntegratedCircuitPathAny) BackplaneFacingCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"backplane-facing-capacity"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Container for integrated circuit memory.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "memory"
//	Path from root:       "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPath) Memory() *Component_IntegratedCircuit_MemoryPath {
	ps := &Component_IntegratedCircuit_MemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Container for integrated circuit memory.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "memory"
//	Path from root:       "/components/component/integrated-circuit/memory"
func (n *Component_IntegratedCircuitPathAny) Memory() *Component_IntegratedCircuit_MemoryPathAny {
	ps := &Component_IntegratedCircuit_MemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPath) Utilization() *Component_IntegratedCircuit_UtilizationPath {
	ps := &Component_IntegratedCircuit_UtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): Resource utilization of the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilization"
//	Path from root:       "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPathAny) Utilization() *Component_IntegratedCircuit_UtilizationPathAny {
	ps := &Component_IntegratedCircuit_UtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuitPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit](
		"Component_IntegratedCircuit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).AvailablePct
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).AvailablePct
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).ConsumedCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).ConsumedCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).Total
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).Total
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).TotalOperationalCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_BackplaneFacingCapacity).TotalOperationalCapacity
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_BackplaneFacingCapacity) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_BackplaneFacingCapacityPath represents the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacityPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_BackplaneFacingCapacityPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/backplane-facing-capacity YANG schema element.
type Component_IntegratedCircuit_BackplaneFacingCapacityPathAny struct {
	*ygnmi.NodePath
}

// AvailablePct (leaf): Percentage of the total backplane-facing capacity that is currently available to the front
// panel ports taking into account failures and/or degradation within the system.
//
// In the case that there is more backplane-facing capacity available than the front-panel
// ports consume, this value may be greater than 100%.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) AvailablePct() *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvailablePct (leaf): Percentage of the total backplane-facing capacity that is currently available to the front
// panel ports taking into account failures and/or degradation within the system.
//
// In the case that there is more backplane-facing capacity available than the front-panel
// ports consume, this value may be greater than 100%.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/available-pct"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/available-pct"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) AvailablePct() *Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_AvailablePctPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available-pct"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConsumedCapacity (leaf): Backplane-facing capacity that is consumed by front-panel ports that are connected
// to the integrated circuit and are operationally up.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) ConsumedCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConsumedCapacity (leaf): Backplane-facing capacity that is consumed by front-panel ports that are connected
// to the integrated circuit and are operationally up.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/consumed-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/consumed-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) ConsumedCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_ConsumedCapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "consumed-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Total (leaf): Total backplane-facing capacity that is available in the presence
// of no link failures or degradation.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) Total() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Total (leaf): Total backplane-facing capacity that is available in the presence
// of no link failures or degradation.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) Total() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalOperationalCapacity (leaf): Total backplane-facing capacity that is currently available based
// on the active links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) TotalOperationalCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalOperationalCapacity (leaf): Total backplane-facing capacity that is currently available based
// on the active links.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-operational-capacity"
//	Path from root:       "/components/component/integrated-circuit/backplane-facing-capacity/state/total-operational-capacity"
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) TotalOperationalCapacity() *Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny {
	ps := &Component_IntegratedCircuit_BackplaneFacingCapacity_TotalOperationalCapacityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-operational-capacity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_BackplaneFacingCapacityPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_BackplaneFacingCapacity](
		"Component_IntegratedCircuit_BackplaneFacingCapacity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/memory/state/corrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory/state/corrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).CorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).CorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Memory_TotalParityErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/memory/state/total-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_TotalParityErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory/state/total-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_Memory_TotalParityErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).TotalParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).TotalParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/memory/state/uncorrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory/state/uncorrected-parity-errors YANG schema element.
type Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).UncorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform-integrated-circuit"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Memory).UncorrectedParityErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_MemoryPath represents the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type Component_IntegratedCircuit_MemoryPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_MemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/memory YANG schema element.
type Component_IntegratedCircuit_MemoryPathAny struct {
	*ygnmi.NodePath
}

// CorrectedParityErrors (leaf): Number of corrected parity errors. Single bit ECC errors can be
// detected and corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPath) CorrectedParityErrors() *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath {
	ps := &Component_IntegratedCircuit_Memory_CorrectedParityErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CorrectedParityErrors (leaf): Number of corrected parity errors. Single bit ECC errors can be
// detected and corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/corrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/corrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPathAny) CorrectedParityErrors() *Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny {
	ps := &Component_IntegratedCircuit_Memory_CorrectedParityErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "corrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalParityErrors (leaf): Total number of parity errors. This includes both the corrected and
// uncorrected parity errors.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPath) TotalParityErrors() *Component_IntegratedCircuit_Memory_TotalParityErrorsPath {
	ps := &Component_IntegratedCircuit_Memory_TotalParityErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalParityErrors (leaf): Total number of parity errors. This includes both the corrected and
// uncorrected parity errors.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/total-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/total-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPathAny) TotalParityErrors() *Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny {
	ps := &Component_IntegratedCircuit_Memory_TotalParityErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "total-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectedParityErrors (leaf): Number of uncorrected parity errors. Multi-bit ECC errors can be
// detected but cannot be corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPath) UncorrectedParityErrors() *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath {
	ps := &Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UncorrectedParityErrors (leaf): Number of uncorrected parity errors. Multi-bit ECC errors can be
// detected but cannot be corrected by most integrated circuits.
//
//	Defining module:      "openconfig-platform-integrated-circuit"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/uncorrected-parity-errors"
//	Path from root:       "/components/component/integrated-circuit/memory/state/uncorrected-parity-errors"
func (n *Component_IntegratedCircuit_MemoryPathAny) UncorrectedParityErrors() *Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny {
	ps := &Component_IntegratedCircuit_Memory_UncorrectedParityErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uncorrected-parity-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_MemoryPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Memory] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Memory](
		"Component_IntegratedCircuit_Memory",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_UtilizationPath represents the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPathAny struct {
	*ygnmi.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPath) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ResourceAny (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPathAny) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
//
//	Name: string
func (n *Component_IntegratedCircuit_UtilizationPath) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePath {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Resource (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
//
//	Name: string
func (n *Component_IntegratedCircuit_UtilizationPathAny) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPath) ResourceMap() *Component_IntegratedCircuit_Utilization_ResourcePathMap {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResourceMap (list): List of resources, keyed by resource name.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "resources/resource"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource"
func (n *Component_IntegratedCircuit_UtilizationPathAny) ResourceMap() *Component_IntegratedCircuit_Utilization_ResourcePathMapAny {
	ps := &Component_IntegratedCircuit_Utilization_ResourcePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"resources"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_UtilizationPathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_CommittedPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/committed YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_CommittedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/committed YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_Resource_CommittedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "committed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Committed
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_FreePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/free YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_FreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_FreePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/free YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_FreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_Resource_FreePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_Resource_FreePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).HighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).LastHighWatermark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/max-limit YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/max-limit YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).MaxLimit
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_Resource_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).Used
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpper
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "config/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/config/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "used-threshold-upper-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperClear
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization_Resource).UsedThresholdUpperExceeded
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization_Resource) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_Utilization_ResourcePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathMap represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathMapAny struct {
	*ygnmi.NodePath
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Committed() *Component_IntegratedCircuit_Utilization_Resource_CommittedPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_CommittedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/committed"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Committed() *Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Free() *Component_IntegratedCircuit_Utilization_Resource_FreePath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_FreePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Free (leaf): Number of entries available to use.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/free"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Free() *Component_IntegratedCircuit_Utilization_Resource_FreePathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_FreePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) HighWatermark() *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) HighWatermark() *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) LastHighWatermark() *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastHighWatermark (leaf): The timestamp when the high-watermark was last updated. The value
// is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/last-high-watermark"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) LastHighWatermark() *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) MaxLimit() *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/max-limit"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) MaxLimit() *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Resource name within the component.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Used() *Component_IntegratedCircuit_Utilization_Resource_UsedPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Used (leaf): Number of entries currently in use for the resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Used() *Component_IntegratedCircuit_Utilization_Resource_UsedPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) UsedThresholdUpper() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpper (leaf): The used percentage value (used / (used + free) * 100) that
// when crossed will set utilization-threshold-exceeded to 'true'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) UsedThresholdUpper() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) UsedThresholdUpperClear() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperClear (leaf): The used percentage value (used / (used + free) * 100) that when
// crossed will set utilization-threshold-exceeded to 'false'.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/used-threshold-upper-clear"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/*/used-threshold-upper-clear"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) UsedThresholdUpperClear() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "used-threshold-upper-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) UsedThresholdUpperExceeded() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UsedThresholdUpperExceeded (leaf): This value is set to true when the used percentage value
// (used / (used + free) * 100) has crossed the used-threshold-upper for this
// resource and false when the used percentage value has crossed the configured
// used-threshold-upper-clear value for this resource.
//
//	Defining module:      "openconfig-platform-common"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/used-threshold-upper-exceeded"
//	Path from root:       "/components/component/integrated-circuit/utilization/resources/resource/state/used-threshold-upper-exceeded"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) UsedThresholdUpperExceeded() *Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny {
	ps := &Component_IntegratedCircuit_Utilization_Resource_UsedThresholdUpperExceededPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "used-threshold-upper-exceeded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Config() ygnmi.ConfigQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewConfigQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Config() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization_Resource",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewConfigQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_Utilization_ResourcePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_Utilization_Resource](
		"Component_IntegratedCircuit_Utilization",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_Utilization_Resource, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_Utilization).Resource
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_Utilization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform:resources"},
			PostRelPath: []string{"openconfig-platform:resource"},
		},
	)
}
