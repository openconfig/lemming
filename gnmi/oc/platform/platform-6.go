/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_Transceiver_Channel_TargetOutputPowerPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-output-power YANG schema element.
type Component_Transceiver_Channel_TargetOutputPowerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetOutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-output-power YANG schema element.
type Component_Transceiver_Channel_TargetOutputPowerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPath) Config() ygnmi.ConfigQuery[float64] {
	return ygnmi.NewConfigQuery[float64](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/target-output-power"
func (n *Component_Transceiver_Channel_TargetOutputPowerPathAny) Config() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "target-output-power"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TargetOutputPower
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TxFailurePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-failure YANG schema element.
type Component_Transceiver_Channel_TxFailurePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TxFailurePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-failure YANG schema element.
type Component_Transceiver_Channel_TxFailurePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_Channel_TxFailurePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxFailure
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_Channel_TxFailurePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxFailure
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TxLaserPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-laser YANG schema element.
type Component_Transceiver_Channel_TxLaserPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TxLaserPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tx-laser YANG schema element.
type Component_Transceiver_Channel_TxLaserPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/config/tx-laser"
func (n *Component_Transceiver_Channel_TxLaserPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Channel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tx-laser"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel).TxLaser
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_ChannelPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ChannelPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathAny struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ChannelPathMap represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathMap struct {
	*ygnmi.NodePath
}

// Component_Transceiver_ChannelPathMapAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type Component_Transceiver_ChannelPathMapAny struct {
	*ygnmi.NodePath
}

// AssociatedOpticalChannel (leaf): A physical channel may reference an optical channel
// component. If the physical channel does make this optional
// reference, then a limited set of leaves will apply within
// the physical channel to avoid duplication within the optical
// channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/associated-optical-channel"
func (n *Component_Transceiver_ChannelPath) AssociatedOpticalChannel() *Component_Transceiver_Channel_AssociatedOpticalChannelPath {
	ps := &Component_Transceiver_Channel_AssociatedOpticalChannelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-optical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociatedOpticalChannel (leaf): A physical channel may reference an optical channel
// component. If the physical channel does make this optional
// reference, then a limited set of leaves will apply within
// the physical channel to avoid duplication within the optical
// channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/associated-optical-channel"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/associated-optical-channel"
func (n *Component_Transceiver_ChannelPathAny) AssociatedOpticalChannel() *Component_Transceiver_Channel_AssociatedOpticalChannelPathAny {
	ps := &Component_Transceiver_Channel_AssociatedOpticalChannelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-optical-channel"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Text description for the client physical channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/description"
func (n *Component_Transceiver_ChannelPath) Description() *Component_Transceiver_Channel_DescriptionPath {
	ps := &Component_Transceiver_Channel_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Text description for the client physical channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/description"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/description"
func (n *Component_Transceiver_ChannelPathAny) Description() *Component_Transceiver_Channel_DescriptionPathAny {
	ps := &Component_Transceiver_Channel_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the physical channnel or lane within a physical
// client port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/index"
func (n *Component_Transceiver_ChannelPath) Index() *Component_Transceiver_Channel_IndexPath {
	ps := &Component_Transceiver_Channel_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the physical channnel or lane within a physical
// client port
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/index"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/index"
func (n *Component_Transceiver_ChannelPathAny) Index() *Component_Transceiver_Channel_IndexPathAny {
	ps := &Component_Transceiver_Channel_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power"
func (n *Component_Transceiver_ChannelPath) InputPower() *Component_Transceiver_Channel_InputPowerPath {
	ps := &Component_Transceiver_Channel_InputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputPower (container): The input optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. When the physical channel has a leafref to
// an optical channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this represents the aggregate
// total optical power value (signal and noise) whereas
// optical power value within the optical-channel represents
// the signal power
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/input-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power"
func (n *Component_Transceiver_ChannelPathAny) InputPower() *Component_Transceiver_Channel_InputPowerPathAny {
	ps := &Component_Transceiver_Channel_InputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "input-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserAge (leaf): Laser age (0% at beginning of life, 100% end of life) in integer
// percentage. This term is defined by Common Management Interface
// Specification (CMIS).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_ChannelPath) LaserAge() *Component_Transceiver_Channel_LaserAgePath {
	ps := &Component_Transceiver_Channel_LaserAgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserAge (leaf): Laser age (0% at beginning of life, 100% end of life) in integer
// percentage. This term is defined by Common Management Interface
// Specification (CMIS).
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-age"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-age"
func (n *Component_Transceiver_ChannelPathAny) LaserAge() *Component_Transceiver_Channel_LaserAgePathAny {
	ps := &Component_Transceiver_Channel_LaserAgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current"
func (n *Component_Transceiver_ChannelPath) LaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrentPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserBiasCurrent (container): The current applied by the system to the transmit laser to
// achieve the output power. The current is expressed in mA
// with up to two decimal precision. Values include the
// instantaneous, average, minimum, and maximum statistics.
// If avg/min/max statistics are not supported, the target is
// expected to just supply the instant value. In some cases,
// such as when the physical channel has a leafref to an optical
// channel component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-bias-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current"
func (n *Component_Transceiver_ChannelPathAny) LaserBiasCurrent() *Component_Transceiver_Channel_LaserBiasCurrentPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-bias-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserTemperature (container): Laser temperature for the cooled laser in degrees Celsius with 1
// decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the
// instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature"
func (n *Component_Transceiver_ChannelPath) LaserTemperature() *Component_Transceiver_Channel_LaserTemperaturePath {
	ps := &Component_Transceiver_Channel_LaserTemperaturePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LaserTemperature (container): Laser temperature for the cooled laser in degrees Celsius with 1
// decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the
// instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/laser-temperature"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature"
func (n *Component_Transceiver_ChannelPathAny) LaserTemperature() *Component_Transceiver_Channel_LaserTemperaturePathAny {
	ps := &Component_Transceiver_Channel_LaserTemperaturePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "laser-temperature"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputFrequency (leaf): The frequency in MHz of the individual physical channel
// (e.g. ITU C50 - 195.0THz and would be reported as
// 195,000,000 MHz in this model). This attribute is not
// configurable on most client ports In some cases, such as when
// the physical channel has a leafref to an optical channel
// component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_ChannelPath) OutputFrequency() *Component_Transceiver_Channel_OutputFrequencyPath {
	ps := &Component_Transceiver_Channel_OutputFrequencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputFrequency (leaf): The frequency in MHz of the individual physical channel
// (e.g. ITU C50 - 195.0THz and would be reported as
// 195,000,000 MHz in this model). This attribute is not
// configurable on most client ports In some cases, such as when
// the physical channel has a leafref to an optical channel
// component and the module-functional-type is
// TYPE_DIGITAL_COHERENT_OPTIC this grouping will NOT be used
// as the data will be within the optical-channel.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-frequency"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-frequency"
func (n *Component_Transceiver_ChannelPathAny) OutputFrequency() *Component_Transceiver_Channel_OutputFrequencyPathAny {
	ps := &Component_Transceiver_Channel_OutputFrequencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-frequency"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power"
func (n *Component_Transceiver_ChannelPath) OutputPower() *Component_Transceiver_Channel_OutputPowerPath {
	ps := &Component_Transceiver_Channel_OutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutputPower (container): The output optical power of a physical channel in units
// of 0.01dBm, which may be associated with individual
// physical channels, or an aggregate of multiple physical
// channels (i.e., for the overall transceiver). For an
// aggregate, this may be a measurement from a photodetector
// or a a calculation performed on the device by summing up
// all of the related individual physical channels.
// Values include the instantaneous, average, minimum, and
// maximum statistics. If avg/min/max statistics are not
// supported, the target is expected to just supply the
// instant value. In some cases, such as when the physical
// channel has a leafref to an optical channel component and the
// module-functional-type is TYPE_DIGITAL_COHERENT_OPTIC this
// grouping will NOT be used as the data will be within the
// optical-channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power"
func (n *Component_Transceiver_ChannelPathAny) OutputPower() *Component_Transceiver_Channel_OutputPowerPathAny {
	ps := &Component_Transceiver_Channel_OutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "output-power"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RxCdrLol (leaf): Receiver clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_ChannelPath) RxCdrLol() *Component_Transceiver_Channel_RxCdrLolPath {
	ps := &Component_Transceiver_Channel_RxCdrLolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxCdrLol (leaf): Receiver clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-cdr-lol"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-cdr-lol"
func (n *Component_Transceiver_ChannelPathAny) RxCdrLol() *Component_Transceiver_Channel_RxCdrLolPathAny {
	ps := &Component_Transceiver_Channel_RxCdrLolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxLos (leaf): Receiver loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_ChannelPath) RxLos() *Component_Transceiver_Channel_RxLosPath {
	ps := &Component_Transceiver_Channel_RxLosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RxLos (leaf): Receiver loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/rx-los"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/rx-los"
func (n *Component_Transceiver_ChannelPathAny) RxLos() *Component_Transceiver_Channel_RxLosPathAny {
	ps := &Component_Transceiver_Channel_RxLosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetFrequencyDeviation (container): The difference in MHz with 1 decimal precision between the target
// center frequency and the actual current center frequency . This term
// is defined by Common Management Interface Specification (CMIS) and
// referred to as laser frequency error or laser ferquency deviation.
// Values include the instantaneous, average, minimum, and maximum
// statistics. If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/target-frequency-deviation"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation"
func (n *Component_Transceiver_ChannelPath) TargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviationPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "target-frequency-deviation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetFrequencyDeviation (container): The difference in MHz with 1 decimal precision between the target
// center frequency and the actual current center frequency . This term
// is defined by Common Management Interface Specification (CMIS) and
// referred to as laser frequency error or laser ferquency deviation.
// Values include the instantaneous, average, minimum, and maximum
// statistics. If avg/min/max statistics are not supported, the target
// is expected to just supply the instant value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/target-frequency-deviation"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation"
func (n *Component_Transceiver_ChannelPathAny) TargetFrequencyDeviation() *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "target-frequency-deviation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/target-output-power"
func (n *Component_Transceiver_ChannelPath) TargetOutputPower() *Component_Transceiver_Channel_TargetOutputPowerPath {
	ps := &Component_Transceiver_Channel_TargetOutputPowerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetOutputPower (leaf): Target output optical power level of the optical channel,
// expressed in increments of 0.01 dBm (decibel-milliwats)
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/target-output-power"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/target-output-power"
func (n *Component_Transceiver_ChannelPathAny) TargetOutputPower() *Component_Transceiver_Channel_TargetOutputPowerPathAny {
	ps := &Component_Transceiver_Channel_TargetOutputPowerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "target-output-power"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TecCurrent (container): The amount of current flowing to the TC of a cooled laser in percentage
// with 2 decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tec-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current"
func (n *Component_Transceiver_ChannelPath) TecCurrent() *Component_Transceiver_Channel_TecCurrentPath {
	ps := &Component_Transceiver_Channel_TecCurrentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tec-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TecCurrent (container): The amount of current flowing to the TC of a cooled laser in percentage
// with 2 decimal precision. This term is defined by Common Management
// Interface Specification (CMIS). Values include the instantaneous,
// average, minimum, and maximum statistics. If avg/min/max statistics
// are not supported, the target is expected to just supply the instant
// value.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tec-current"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current"
func (n *Component_Transceiver_ChannelPathAny) TecCurrent() *Component_Transceiver_Channel_TecCurrentPathAny {
	ps := &Component_Transceiver_Channel_TecCurrentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tec-current"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TxFailure (leaf): Transmitter failure flag.
// In earlier standards, including SFF-8436, SFF-8472, and QSFP-DD CMIS 4.0,
// this flag was named Tx Fault.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_ChannelPath) TxFailure() *Component_Transceiver_Channel_TxFailurePath {
	ps := &Component_Transceiver_Channel_TxFailurePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxFailure (leaf): Transmitter failure flag.
// In earlier standards, including SFF-8436, SFF-8472, and QSFP-DD CMIS 4.0,
// this flag was named Tx Fault.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-failure"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tx-failure"
func (n *Component_Transceiver_ChannelPathAny) TxFailure() *Component_Transceiver_Channel_TxFailurePathAny {
	ps := &Component_Transceiver_Channel_TxFailurePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLaser (leaf): Enable (true) or disable (false) the transmit label for the
// channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/tx-laser"
func (n *Component_Transceiver_ChannelPath) TxLaser() *Component_Transceiver_Channel_TxLaserPath {
	ps := &Component_Transceiver_Channel_TxLaserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tx-laser"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLaser (leaf): Enable (true) or disable (false) the transmit label for the
// channel
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/tx-laser"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/*/tx-laser"
func (n *Component_Transceiver_ChannelPathAny) TxLaser() *Component_Transceiver_Channel_TxLaserPathAny {
	ps := &Component_Transceiver_Channel_TxLaserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tx-laser"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPath) Config() ygnmi.ConfigQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewConfigQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathAny) Config() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel](
		"Component_Transceiver_Channel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMap) State() ygnmi.SingletonQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewSingletonQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMapAny) State() ygnmi.WildcardQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMap) Config() ygnmi.ConfigQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewConfigQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_ChannelPathMapAny) Config() ygnmi.WildcardQuery[map[uint16]*oc.Component_Transceiver_Channel] {
	return ygnmi.NewWildcardQuery[map[uint16]*oc.Component_Transceiver_Channel](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint16]*oc.Component_Transceiver_Channel, bool) {
			ret := gs.(*oc.Component_Transceiver).Channel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:physical-channels"},
			PostRelPath: []string{"openconfig-platform-transceiver:channel"},
		},
	)
}

// Component_Transceiver_Channel_InputPower_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/avg YANG schema element.
type Component_Transceiver_Channel_InputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/avg YANG schema element.
type Component_Transceiver_Channel_InputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/avg"
func (n *Component_Transceiver_Channel_InputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/avg"
func (n *Component_Transceiver_Channel_InputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/instant YANG schema element.
type Component_Transceiver_Channel_InputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/instant YANG schema element.
type Component_Transceiver_Channel_InputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/instant"
func (n *Component_Transceiver_Channel_InputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/instant"
func (n *Component_Transceiver_Channel_InputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/interval YANG schema element.
type Component_Transceiver_Channel_InputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/interval YANG schema element.
type Component_Transceiver_Channel_InputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/interval"
func (n *Component_Transceiver_Channel_InputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/interval"
func (n *Component_Transceiver_Channel_InputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/max YANG schema element.
type Component_Transceiver_Channel_InputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/max YANG schema element.
type Component_Transceiver_Channel_InputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max"
func (n *Component_Transceiver_Channel_InputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max"
func (n *Component_Transceiver_Channel_InputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/max-time YANG schema element.
type Component_Transceiver_Channel_InputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/max-time YANG schema element.
type Component_Transceiver_Channel_InputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max-time"
func (n *Component_Transceiver_Channel_InputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max-time"
func (n *Component_Transceiver_Channel_InputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/min YANG schema element.
type Component_Transceiver_Channel_InputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/min YANG schema element.
type Component_Transceiver_Channel_InputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min"
func (n *Component_Transceiver_Channel_InputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min"
func (n *Component_Transceiver_Channel_InputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPower_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/min-time YANG schema element.
type Component_Transceiver_Channel_InputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_InputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power/min-time YANG schema element.
type Component_Transceiver_Channel_InputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min-time"
func (n *Component_Transceiver_Channel_InputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min-time"
func (n *Component_Transceiver_Channel_InputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_InputPowerPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power YANG schema element.
type Component_Transceiver_Channel_InputPowerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_InputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power YANG schema element.
type Component_Transceiver_Channel_InputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/avg"
func (n *Component_Transceiver_Channel_InputPowerPath) Avg() *Component_Transceiver_Channel_InputPower_AvgPath {
	ps := &Component_Transceiver_Channel_InputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/avg"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Avg() *Component_Transceiver_Channel_InputPower_AvgPathAny {
	ps := &Component_Transceiver_Channel_InputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/instant"
func (n *Component_Transceiver_Channel_InputPowerPath) Instant() *Component_Transceiver_Channel_InputPower_InstantPath {
	ps := &Component_Transceiver_Channel_InputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/instant"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Instant() *Component_Transceiver_Channel_InputPower_InstantPathAny {
	ps := &Component_Transceiver_Channel_InputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/interval"
func (n *Component_Transceiver_Channel_InputPowerPath) Interval() *Component_Transceiver_Channel_InputPower_IntervalPath {
	ps := &Component_Transceiver_Channel_InputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/interval"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Interval() *Component_Transceiver_Channel_InputPower_IntervalPathAny {
	ps := &Component_Transceiver_Channel_InputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max"
func (n *Component_Transceiver_Channel_InputPowerPath) Max() *Component_Transceiver_Channel_InputPower_MaxPath {
	ps := &Component_Transceiver_Channel_InputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Max() *Component_Transceiver_Channel_InputPower_MaxPathAny {
	ps := &Component_Transceiver_Channel_InputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max-time"
func (n *Component_Transceiver_Channel_InputPowerPath) MaxTime() *Component_Transceiver_Channel_InputPower_MaxTimePath {
	ps := &Component_Transceiver_Channel_InputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/max-time"
func (n *Component_Transceiver_Channel_InputPowerPathAny) MaxTime() *Component_Transceiver_Channel_InputPower_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_InputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min"
func (n *Component_Transceiver_Channel_InputPowerPath) Min() *Component_Transceiver_Channel_InputPower_MinPath {
	ps := &Component_Transceiver_Channel_InputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min"
func (n *Component_Transceiver_Channel_InputPowerPathAny) Min() *Component_Transceiver_Channel_InputPower_MinPathAny {
	ps := &Component_Transceiver_Channel_InputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min-time"
func (n *Component_Transceiver_Channel_InputPowerPath) MinTime() *Component_Transceiver_Channel_InputPower_MinTimePath {
	ps := &Component_Transceiver_Channel_InputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/input-power/min-time"
func (n *Component_Transceiver_Channel_InputPowerPathAny) MinTime() *Component_Transceiver_Channel_InputPower_MinTimePathAny {
	ps := &Component_Transceiver_Channel_InputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_InputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_InputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_InputPower](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_InputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_InputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_InputPower](
		"Component_Transceiver_Channel_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserBiasCurrentPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrentPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_LaserBiasCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current YANG schema element.
type Component_Transceiver_Channel_LaserBiasCurrentPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Avg() *Component_Transceiver_Channel_LaserBiasCurrent_AvgPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/avg"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Avg() *Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Instant() *Component_Transceiver_Channel_LaserBiasCurrent_InstantPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/instant"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Instant() *Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Interval() *Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/interval"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Interval() *Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Max() *Component_Transceiver_Channel_LaserBiasCurrent_MaxPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Max() *Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) MaxTime() *Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/max-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) MaxTime() *Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) Min() *Component_Transceiver_Channel_LaserBiasCurrent_MinPath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) Min() *Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) MinTime() *Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-bias-current/min-time"
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) MinTime() *Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny {
	ps := &Component_Transceiver_Channel_LaserBiasCurrent_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_LaserBiasCurrentPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_LaserBiasCurrent] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_LaserBiasCurrent](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_LaserBiasCurrentPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_LaserBiasCurrent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_LaserBiasCurrent](
		"Component_Transceiver_Channel_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg"
func (n *Component_Transceiver_Channel_LaserTemperature_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg"
func (n *Component_Transceiver_Channel_LaserTemperature_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant"
func (n *Component_Transceiver_Channel_LaserTemperature_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant"
func (n *Component_Transceiver_Channel_LaserTemperature_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval"
func (n *Component_Transceiver_Channel_LaserTemperature_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval"
func (n *Component_Transceiver_Channel_LaserTemperature_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/max YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/max YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max"
func (n *Component_Transceiver_Channel_LaserTemperature_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max"
func (n *Component_Transceiver_Channel_LaserTemperature_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time"
func (n *Component_Transceiver_Channel_LaserTemperature_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time"
func (n *Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/min YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/min YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min"
func (n *Component_Transceiver_Channel_LaserTemperature_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min"
func (n *Component_Transceiver_Channel_LaserTemperature_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperature_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_LaserTemperature_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time YANG schema element.
type Component_Transceiver_Channel_LaserTemperature_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time"
func (n *Component_Transceiver_Channel_LaserTemperature_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time"
func (n *Component_Transceiver_Channel_LaserTemperature_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_LaserTemperature).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_LaserTemperature) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_LaserTemperaturePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature YANG schema element.
type Component_Transceiver_Channel_LaserTemperaturePath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_LaserTemperaturePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-temperature YANG schema element.
type Component_Transceiver_Channel_LaserTemperaturePathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Avg() *Component_Transceiver_Channel_LaserTemperature_AvgPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/avg"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Avg() *Component_Transceiver_Channel_LaserTemperature_AvgPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Instant() *Component_Transceiver_Channel_LaserTemperature_InstantPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/instant"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Instant() *Component_Transceiver_Channel_LaserTemperature_InstantPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Interval() *Component_Transceiver_Channel_LaserTemperature_IntervalPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/interval"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Interval() *Component_Transceiver_Channel_LaserTemperature_IntervalPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Max() *Component_Transceiver_Channel_LaserTemperature_MaxPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Max() *Component_Transceiver_Channel_LaserTemperature_MaxPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) MaxTime() *Component_Transceiver_Channel_LaserTemperature_MaxTimePath {
	ps := &Component_Transceiver_Channel_LaserTemperature_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/max-time"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) MaxTime() *Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) Min() *Component_Transceiver_Channel_LaserTemperature_MinPath {
	ps := &Component_Transceiver_Channel_LaserTemperature_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) Min() *Component_Transceiver_Channel_LaserTemperature_MinPathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time"
func (n *Component_Transceiver_Channel_LaserTemperaturePath) MinTime() *Component_Transceiver_Channel_LaserTemperature_MinTimePath {
	ps := &Component_Transceiver_Channel_LaserTemperature_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/laser-temperature/min-time"
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) MinTime() *Component_Transceiver_Channel_LaserTemperature_MinTimePathAny {
	ps := &Component_Transceiver_Channel_LaserTemperature_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_LaserTemperaturePath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_LaserTemperature] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_LaserTemperature](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_LaserTemperaturePathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_LaserTemperature] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_LaserTemperature](
		"Component_Transceiver_Channel_LaserTemperature",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/avg YANG schema element.
type Component_Transceiver_Channel_OutputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/avg YANG schema element.
type Component_Transceiver_Channel_OutputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/avg"
func (n *Component_Transceiver_Channel_OutputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/avg"
func (n *Component_Transceiver_Channel_OutputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/instant YANG schema element.
type Component_Transceiver_Channel_OutputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/instant YANG schema element.
type Component_Transceiver_Channel_OutputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/instant"
func (n *Component_Transceiver_Channel_OutputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/instant"
func (n *Component_Transceiver_Channel_OutputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/interval YANG schema element.
type Component_Transceiver_Channel_OutputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/interval YANG schema element.
type Component_Transceiver_Channel_OutputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/interval"
func (n *Component_Transceiver_Channel_OutputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/interval"
func (n *Component_Transceiver_Channel_OutputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/max YANG schema element.
type Component_Transceiver_Channel_OutputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/max YANG schema element.
type Component_Transceiver_Channel_OutputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max"
func (n *Component_Transceiver_Channel_OutputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max"
func (n *Component_Transceiver_Channel_OutputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/max-time YANG schema element.
type Component_Transceiver_Channel_OutputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/max-time YANG schema element.
type Component_Transceiver_Channel_OutputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max-time"
func (n *Component_Transceiver_Channel_OutputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max-time"
func (n *Component_Transceiver_Channel_OutputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/min YANG schema element.
type Component_Transceiver_Channel_OutputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/min YANG schema element.
type Component_Transceiver_Channel_OutputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min"
func (n *Component_Transceiver_Channel_OutputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min"
func (n *Component_Transceiver_Channel_OutputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPower_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/min-time YANG schema element.
type Component_Transceiver_Channel_OutputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_OutputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power/min-time YANG schema element.
type Component_Transceiver_Channel_OutputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min-time"
func (n *Component_Transceiver_Channel_OutputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min-time"
func (n *Component_Transceiver_Channel_OutputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_OutputPowerPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power YANG schema element.
type Component_Transceiver_Channel_OutputPowerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_OutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power YANG schema element.
type Component_Transceiver_Channel_OutputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/avg"
func (n *Component_Transceiver_Channel_OutputPowerPath) Avg() *Component_Transceiver_Channel_OutputPower_AvgPath {
	ps := &Component_Transceiver_Channel_OutputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/avg"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Avg() *Component_Transceiver_Channel_OutputPower_AvgPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/instant"
func (n *Component_Transceiver_Channel_OutputPowerPath) Instant() *Component_Transceiver_Channel_OutputPower_InstantPath {
	ps := &Component_Transceiver_Channel_OutputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/instant"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Instant() *Component_Transceiver_Channel_OutputPower_InstantPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/interval"
func (n *Component_Transceiver_Channel_OutputPowerPath) Interval() *Component_Transceiver_Channel_OutputPower_IntervalPath {
	ps := &Component_Transceiver_Channel_OutputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/interval"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Interval() *Component_Transceiver_Channel_OutputPower_IntervalPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max"
func (n *Component_Transceiver_Channel_OutputPowerPath) Max() *Component_Transceiver_Channel_OutputPower_MaxPath {
	ps := &Component_Transceiver_Channel_OutputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Max() *Component_Transceiver_Channel_OutputPower_MaxPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max-time"
func (n *Component_Transceiver_Channel_OutputPowerPath) MaxTime() *Component_Transceiver_Channel_OutputPower_MaxTimePath {
	ps := &Component_Transceiver_Channel_OutputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/max-time"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) MaxTime() *Component_Transceiver_Channel_OutputPower_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_OutputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min"
func (n *Component_Transceiver_Channel_OutputPowerPath) Min() *Component_Transceiver_Channel_OutputPower_MinPath {
	ps := &Component_Transceiver_Channel_OutputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) Min() *Component_Transceiver_Channel_OutputPower_MinPathAny {
	ps := &Component_Transceiver_Channel_OutputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min-time"
func (n *Component_Transceiver_Channel_OutputPowerPath) MinTime() *Component_Transceiver_Channel_OutputPower_MinTimePath {
	ps := &Component_Transceiver_Channel_OutputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/output-power/min-time"
func (n *Component_Transceiver_Channel_OutputPowerPathAny) MinTime() *Component_Transceiver_Channel_OutputPower_MinTimePathAny {
	ps := &Component_Transceiver_Channel_OutputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_OutputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_OutputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_OutputPower](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_OutputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_OutputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_OutputPower](
		"Component_Transceiver_Channel_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TargetFrequencyDeviation).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TargetFrequencyDeviation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TargetFrequencyDeviationPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviationPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_TargetFrequencyDeviationPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation YANG schema element.
type Component_Transceiver_Channel_TargetFrequencyDeviationPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Avg() *Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/avg"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Avg() *Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Instant() *Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/instant"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Instant() *Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Interval() *Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/interval"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Interval() *Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Max() *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Max() *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) MaxTime() *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/max-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) MaxTime() *Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) Min() *Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) Min() *Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) MinTime() *Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/target-frequency-deviation/min-time"
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) MinTime() *Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny {
	ps := &Component_Transceiver_Channel_TargetFrequencyDeviation_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_TargetFrequencyDeviation] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_TargetFrequencyDeviation](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TargetFrequencyDeviationPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_TargetFrequencyDeviation] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_TargetFrequencyDeviation](
		"Component_Transceiver_Channel_TargetFrequencyDeviation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/avg YANG schema element.
type Component_Transceiver_Channel_TecCurrent_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/avg YANG schema element.
type Component_Transceiver_Channel_TecCurrent_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrent_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrent_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/instant YANG schema element.
type Component_Transceiver_Channel_TecCurrent_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/instant YANG schema element.
type Component_Transceiver_Channel_TecCurrent_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrent_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrent_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/interval YANG schema element.
type Component_Transceiver_Channel_TecCurrent_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/interval YANG schema element.
type Component_Transceiver_Channel_TecCurrent_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrent_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrent_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrent_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrent_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrent_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrent_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrent_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrent_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrent_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrent_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrentPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current YANG schema element.
type Component_Transceiver_Channel_TecCurrentPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_TecCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current YANG schema element.
type Component_Transceiver_Channel_TecCurrentPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrentPath) Avg() *Component_Transceiver_Channel_TecCurrent_AvgPath {
	ps := &Component_Transceiver_Channel_TecCurrent_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Avg() *Component_Transceiver_Channel_TecCurrent_AvgPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrentPath) Instant() *Component_Transceiver_Channel_TecCurrent_InstantPath {
	ps := &Component_Transceiver_Channel_TecCurrent_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Instant() *Component_Transceiver_Channel_TecCurrent_InstantPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrentPath) Interval() *Component_Transceiver_Channel_TecCurrent_IntervalPath {
	ps := &Component_Transceiver_Channel_TecCurrent_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Interval() *Component_Transceiver_Channel_TecCurrent_IntervalPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrentPath) Max() *Component_Transceiver_Channel_TecCurrent_MaxPath {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Max() *Component_Transceiver_Channel_TecCurrent_MaxPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrentPath) MaxTime() *Component_Transceiver_Channel_TecCurrent_MaxTimePath {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) MaxTime() *Component_Transceiver_Channel_TecCurrent_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrentPath) Min() *Component_Transceiver_Channel_TecCurrent_MinPath {
	ps := &Component_Transceiver_Channel_TecCurrent_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Min() *Component_Transceiver_Channel_TecCurrent_MinPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrentPath) MinTime() *Component_Transceiver_Channel_TecCurrent_MinTimePath {
	ps := &Component_Transceiver_Channel_TecCurrent_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) MinTime() *Component_Transceiver_Channel_TecCurrent_MinTimePathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TecCurrentPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_TecCurrent] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_TecCurrent](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TecCurrentPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_TecCurrent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_TecCurrent](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_AvgPath represents the /openconfig-platform/components/component/transceiver/state/input-power/avg YANG schema element.
type Component_Transceiver_InputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/avg YANG schema element.
type Component_Transceiver_InputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_InstantPath represents the /openconfig-platform/components/component/transceiver/state/input-power/instant YANG schema element.
type Component_Transceiver_InputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/instant YANG schema element.
type Component_Transceiver_InputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/input-power/interval YANG schema element.
type Component_Transceiver_InputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/interval YANG schema element.
type Component_Transceiver_InputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MaxPath represents the /openconfig-platform/components/component/transceiver/state/input-power/max YANG schema element.
type Component_Transceiver_InputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/max YANG schema element.
type Component_Transceiver_InputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/input-power/max-time YANG schema element.
type Component_Transceiver_InputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/max-time YANG schema element.
type Component_Transceiver_InputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MinPath represents the /openconfig-platform/components/component/transceiver/state/input-power/min YANG schema element.
type Component_Transceiver_InputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/min YANG schema element.
type Component_Transceiver_InputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/input-power/min-time YANG schema element.
type Component_Transceiver_InputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/min-time YANG schema element.
type Component_Transceiver_InputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPowerPath represents the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type Component_Transceiver_InputPowerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_InputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type Component_Transceiver_InputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPowerPath) Avg() *Component_Transceiver_InputPower_AvgPath {
	ps := &Component_Transceiver_InputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPowerPathAny) Avg() *Component_Transceiver_InputPower_AvgPathAny {
	ps := &Component_Transceiver_InputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPowerPath) Instant() *Component_Transceiver_InputPower_InstantPath {
	ps := &Component_Transceiver_InputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPowerPathAny) Instant() *Component_Transceiver_InputPower_InstantPathAny {
	ps := &Component_Transceiver_InputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPowerPath) Interval() *Component_Transceiver_InputPower_IntervalPath {
	ps := &Component_Transceiver_InputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPowerPathAny) Interval() *Component_Transceiver_InputPower_IntervalPathAny {
	ps := &Component_Transceiver_InputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPowerPath) Max() *Component_Transceiver_InputPower_MaxPath {
	ps := &Component_Transceiver_InputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPowerPathAny) Max() *Component_Transceiver_InputPower_MaxPathAny {
	ps := &Component_Transceiver_InputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPowerPath) MaxTime() *Component_Transceiver_InputPower_MaxTimePath {
	ps := &Component_Transceiver_InputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPowerPathAny) MaxTime() *Component_Transceiver_InputPower_MaxTimePathAny {
	ps := &Component_Transceiver_InputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPowerPath) Min() *Component_Transceiver_InputPower_MinPath {
	ps := &Component_Transceiver_InputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPowerPathAny) Min() *Component_Transceiver_InputPower_MinPathAny {
	ps := &Component_Transceiver_InputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPowerPath) MinTime() *Component_Transceiver_InputPower_MinTimePath {
	ps := &Component_Transceiver_InputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPowerPathAny) MinTime() *Component_Transceiver_InputPower_MinTimePathAny {
	ps := &Component_Transceiver_InputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_InputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_InputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_InputPower](
		"Component_Transceiver_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_InputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_InputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_InputPower](
		"Component_Transceiver_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Lane_LaneNumberPath represents the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/lane-number YANG schema element.
type Component_Transceiver_Lane_LaneNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Lane_LaneNumberPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/lane-number YANG schema element.
type Component_Transceiver_Lane_LaneNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/config/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Transceiver_Lane",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/config/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Transceiver_Lane",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
