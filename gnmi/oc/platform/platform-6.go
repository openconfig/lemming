/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_Transceiver_Channel_TecCurrent_AvgPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/avg YANG schema element.
type Component_Transceiver_Channel_TecCurrent_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/avg YANG schema element.
type Component_Transceiver_Channel_TecCurrent_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrent_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrent_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_InstantPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/instant YANG schema element.
type Component_Transceiver_Channel_TecCurrent_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/instant YANG schema element.
type Component_Transceiver_Channel_TecCurrent_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrent_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrent_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_IntervalPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/interval YANG schema element.
type Component_Transceiver_Channel_TecCurrent_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/interval YANG schema element.
type Component_Transceiver_Channel_TecCurrent_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrent_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrent_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MaxPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrent_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrent_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MaxTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/max-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrent_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrent_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MinPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrent_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrent_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrent_MinTimePath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Channel_TecCurrent_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current/min-time YANG schema element.
type Component_Transceiver_Channel_TecCurrent_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrent_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrent_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_Channel_TecCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Channel_TecCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Channel_TecCurrentPath represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current YANG schema element.
type Component_Transceiver_Channel_TecCurrentPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_Channel_TecCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/tec-current YANG schema element.
type Component_Transceiver_Channel_TecCurrentPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrentPath) Avg() *Component_Transceiver_Channel_TecCurrent_AvgPath {
	ps := &Component_Transceiver_Channel_TecCurrent_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/avg"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Avg() *Component_Transceiver_Channel_TecCurrent_AvgPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrentPath) Instant() *Component_Transceiver_Channel_TecCurrent_InstantPath {
	ps := &Component_Transceiver_Channel_TecCurrent_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/instant"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Instant() *Component_Transceiver_Channel_TecCurrent_InstantPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrentPath) Interval() *Component_Transceiver_Channel_TecCurrent_IntervalPath {
	ps := &Component_Transceiver_Channel_TecCurrent_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/interval"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Interval() *Component_Transceiver_Channel_TecCurrent_IntervalPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrentPath) Max() *Component_Transceiver_Channel_TecCurrent_MaxPath {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Max() *Component_Transceiver_Channel_TecCurrent_MaxPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrentPath) MaxTime() *Component_Transceiver_Channel_TecCurrent_MaxTimePath {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/max-time"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) MaxTime() *Component_Transceiver_Channel_TecCurrent_MaxTimePathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrentPath) Min() *Component_Transceiver_Channel_TecCurrent_MinPath {
	ps := &Component_Transceiver_Channel_TecCurrent_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) Min() *Component_Transceiver_Channel_TecCurrent_MinPathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrentPath) MinTime() *Component_Transceiver_Channel_TecCurrent_MinTimePath {
	ps := &Component_Transceiver_Channel_TecCurrent_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/physical-channels/channel/state/tec-current/min-time"
func (n *Component_Transceiver_Channel_TecCurrentPathAny) MinTime() *Component_Transceiver_Channel_TecCurrent_MinTimePathAny {
	ps := &Component_Transceiver_Channel_TecCurrent_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TecCurrentPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Channel_TecCurrent] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Channel_TecCurrent](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_Channel_TecCurrentPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Channel_TecCurrent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Channel_TecCurrent](
		"Component_Transceiver_Channel_TecCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_AvgPath represents the /openconfig-platform/components/component/transceiver/state/input-power/avg YANG schema element.
type Component_Transceiver_InputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/avg YANG schema element.
type Component_Transceiver_InputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_InstantPath represents the /openconfig-platform/components/component/transceiver/state/input-power/instant YANG schema element.
type Component_Transceiver_InputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/instant YANG schema element.
type Component_Transceiver_InputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/input-power/interval YANG schema element.
type Component_Transceiver_InputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/interval YANG schema element.
type Component_Transceiver_InputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MaxPath represents the /openconfig-platform/components/component/transceiver/state/input-power/max YANG schema element.
type Component_Transceiver_InputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/max YANG schema element.
type Component_Transceiver_InputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/input-power/max-time YANG schema element.
type Component_Transceiver_InputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/max-time YANG schema element.
type Component_Transceiver_InputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MinPath represents the /openconfig-platform/components/component/transceiver/state/input-power/min YANG schema element.
type Component_Transceiver_InputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/min YANG schema element.
type Component_Transceiver_InputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPower_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/input-power/min-time YANG schema element.
type Component_Transceiver_InputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_InputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power/min-time YANG schema element.
type Component_Transceiver_InputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_InputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_InputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_InputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_InputPowerPath represents the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type Component_Transceiver_InputPowerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_InputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type Component_Transceiver_InputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPowerPath) Avg() *Component_Transceiver_InputPower_AvgPath {
	ps := &Component_Transceiver_InputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/input-power/avg"
func (n *Component_Transceiver_InputPowerPathAny) Avg() *Component_Transceiver_InputPower_AvgPathAny {
	ps := &Component_Transceiver_InputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPowerPath) Instant() *Component_Transceiver_InputPower_InstantPath {
	ps := &Component_Transceiver_InputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/input-power/instant"
func (n *Component_Transceiver_InputPowerPathAny) Instant() *Component_Transceiver_InputPower_InstantPathAny {
	ps := &Component_Transceiver_InputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPowerPath) Interval() *Component_Transceiver_InputPower_IntervalPath {
	ps := &Component_Transceiver_InputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/input-power/interval"
func (n *Component_Transceiver_InputPowerPathAny) Interval() *Component_Transceiver_InputPower_IntervalPathAny {
	ps := &Component_Transceiver_InputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPowerPath) Max() *Component_Transceiver_InputPower_MaxPath {
	ps := &Component_Transceiver_InputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/input-power/max"
func (n *Component_Transceiver_InputPowerPathAny) Max() *Component_Transceiver_InputPower_MaxPathAny {
	ps := &Component_Transceiver_InputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPowerPath) MaxTime() *Component_Transceiver_InputPower_MaxTimePath {
	ps := &Component_Transceiver_InputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/input-power/max-time"
func (n *Component_Transceiver_InputPowerPathAny) MaxTime() *Component_Transceiver_InputPower_MaxTimePathAny {
	ps := &Component_Transceiver_InputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPowerPath) Min() *Component_Transceiver_InputPower_MinPath {
	ps := &Component_Transceiver_InputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/input-power/min"
func (n *Component_Transceiver_InputPowerPathAny) Min() *Component_Transceiver_InputPower_MinPathAny {
	ps := &Component_Transceiver_InputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPowerPath) MinTime() *Component_Transceiver_InputPower_MinTimePath {
	ps := &Component_Transceiver_InputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/input-power/min-time"
func (n *Component_Transceiver_InputPowerPathAny) MinTime() *Component_Transceiver_InputPower_MinTimePathAny {
	ps := &Component_Transceiver_InputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_InputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_InputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_InputPower](
		"Component_Transceiver_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_InputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_InputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_InputPower](
		"Component_Transceiver_InputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Lane_LaneNumberPath represents the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/lane-number YANG schema element.
type Component_Transceiver_Lane_LaneNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Lane_LaneNumberPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/lane-number YANG schema element.
type Component_Transceiver_Lane_LaneNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/config/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Component_Transceiver_Lane",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "config/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/config/lane-number"
func (n *Component_Transceiver_Lane_LaneNumberPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Component_Transceiver_Lane",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lane-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).LaneNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Lane_TxCdrLolPath represents the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol YANG schema element.
type Component_Transceiver_Lane_TxCdrLolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Lane_TxCdrLolPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol YANG schema element.
type Component_Transceiver_Lane_TxCdrLolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-cdr-lol"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol"
func (n *Component_Transceiver_Lane_TxCdrLolPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-cdr-lol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).TxCdrLol
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-cdr-lol"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol"
func (n *Component_Transceiver_Lane_TxCdrLolPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-cdr-lol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).TxCdrLol
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_Lane_TxLosPath represents the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/tx-los YANG schema element.
type Component_Transceiver_Lane_TxLosPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_Lane_TxLosPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane/state/tx-los YANG schema element.
type Component_Transceiver_Lane_TxLosPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-los"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-los"
func (n *Component_Transceiver_Lane_TxLosPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-los"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).TxLos
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "state/tx-los"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-los"
func (n *Component_Transceiver_Lane_TxLosPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_Transceiver_Lane",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tx-los"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_Transceiver_Lane).TxLos
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_Lane) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LanePath represents the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type Component_Transceiver_LanePath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_LanePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type Component_Transceiver_LanePathAny struct {
	*ygnmi.NodePath
}

// Component_Transceiver_LanePathMap represents the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type Component_Transceiver_LanePathMap struct {
	*ygnmi.NodePath
}

// Component_Transceiver_LanePathMapAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/host-lanes/lane YANG schema element.
type Component_Transceiver_LanePathMapAny struct {
	*ygnmi.NodePath
}

// LaneNumber (leaf): Number identifying an electrical host lane carrying one serial
// signal.  Lanes are numbered starting with 1.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/*/lane-number"
func (n *Component_Transceiver_LanePath) LaneNumber() *Component_Transceiver_Lane_LaneNumberPath {
	ps := &Component_Transceiver_Lane_LaneNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lane-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LaneNumber (leaf): Number identifying an electrical host lane carrying one serial
// signal.  Lanes are numbered starting with 1.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/lane-number"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/*/lane-number"
func (n *Component_Transceiver_LanePathAny) LaneNumber() *Component_Transceiver_Lane_LaneNumberPathAny {
	ps := &Component_Transceiver_Lane_LaneNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lane-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxCdrLol (leaf): Transmitter clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-cdr-lol"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol"
func (n *Component_Transceiver_LanePath) TxCdrLol() *Component_Transceiver_Lane_TxCdrLolPath {
	ps := &Component_Transceiver_Lane_TxCdrLolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxCdrLol (leaf): Transmitter clock-and-data-recovery loss-of-lock flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-cdr-lol"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-cdr-lol"
func (n *Component_Transceiver_LanePathAny) TxCdrLol() *Component_Transceiver_Lane_TxCdrLolPathAny {
	ps := &Component_Transceiver_Lane_TxCdrLolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-cdr-lol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLos (leaf): Transmitter loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-los"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-los"
func (n *Component_Transceiver_LanePath) TxLos() *Component_Transceiver_Lane_TxLosPath {
	ps := &Component_Transceiver_Lane_TxLosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TxLos (leaf): Transmitter loss-of-signal flag.
//
//	Defining module:      "openconfig-platform-transceiver"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/tx-los"
//	Path from root:       "/components/component/transceiver/host-lanes/lane/state/tx-los"
func (n *Component_Transceiver_LanePathAny) TxLos() *Component_Transceiver_Lane_TxLosPathAny {
	ps := &Component_Transceiver_Lane_TxLosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tx-los"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_Lane] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_Lane](
		"Component_Transceiver_Lane",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_Lane] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Lane](
		"Component_Transceiver_Lane",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePath) Config() ygnmi.ConfigQuery[*oc.Component_Transceiver_Lane] {
	return ygnmi.NewConfigQuery[*oc.Component_Transceiver_Lane](
		"Component_Transceiver_Lane",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathAny) Config() ygnmi.WildcardQuery[*oc.Component_Transceiver_Lane] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_Lane](
		"Component_Transceiver_Lane",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.Component_Transceiver_Lane] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.Component_Transceiver_Lane](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Transceiver_Lane, bool) {
			ret := gs.(*oc.Component_Transceiver).Lane
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:host-lanes"},
			PostRelPath: []string{"openconfig-platform-transceiver:lane"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.Component_Transceiver_Lane] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Component_Transceiver_Lane](
		"Component_Transceiver",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Transceiver_Lane, bool) {
			ret := gs.(*oc.Component_Transceiver).Lane
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:host-lanes"},
			PostRelPath: []string{"openconfig-platform-transceiver:lane"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.Component_Transceiver_Lane] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.Component_Transceiver_Lane](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Transceiver_Lane, bool) {
			ret := gs.(*oc.Component_Transceiver).Lane
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:host-lanes"},
			PostRelPath: []string{"openconfig-platform-transceiver:lane"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LanePathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.Component_Transceiver_Lane] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.Component_Transceiver_Lane](
		"Component_Transceiver",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.Component_Transceiver_Lane, bool) {
			ret := gs.(*oc.Component_Transceiver).Lane
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-transceiver:host-lanes"},
			PostRelPath: []string{"openconfig-platform-transceiver:lane"},
		},
	)
}

// Component_Transceiver_LaserBiasCurrent_AvgPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/avg YANG schema element.
type Component_Transceiver_LaserBiasCurrent_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/avg YANG schema element.
type Component_Transceiver_LaserBiasCurrent_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/avg"
func (n *Component_Transceiver_LaserBiasCurrent_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/avg"
func (n *Component_Transceiver_LaserBiasCurrent_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_InstantPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/instant YANG schema element.
type Component_Transceiver_LaserBiasCurrent_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/instant YANG schema element.
type Component_Transceiver_LaserBiasCurrent_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/instant"
func (n *Component_Transceiver_LaserBiasCurrent_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/instant"
func (n *Component_Transceiver_LaserBiasCurrent_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/interval YANG schema element.
type Component_Transceiver_LaserBiasCurrent_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/interval YANG schema element.
type Component_Transceiver_LaserBiasCurrent_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/interval"
func (n *Component_Transceiver_LaserBiasCurrent_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/interval"
func (n *Component_Transceiver_LaserBiasCurrent_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_MaxPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/max YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/max YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max"
func (n *Component_Transceiver_LaserBiasCurrent_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max"
func (n *Component_Transceiver_LaserBiasCurrent_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/max-time YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/max-time YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max-time"
func (n *Component_Transceiver_LaserBiasCurrent_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max-time"
func (n *Component_Transceiver_LaserBiasCurrent_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_MinPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/min YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/min YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min"
func (n *Component_Transceiver_LaserBiasCurrent_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min"
func (n *Component_Transceiver_LaserBiasCurrent_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrent_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current/min-time YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_LaserBiasCurrent_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current/min-time YANG schema element.
type Component_Transceiver_LaserBiasCurrent_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min-time"
func (n *Component_Transceiver_LaserBiasCurrent_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min-time"
func (n *Component_Transceiver_LaserBiasCurrent_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_LaserBiasCurrent).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_LaserBiasCurrent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_LaserBiasCurrentPath represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current YANG schema element.
type Component_Transceiver_LaserBiasCurrentPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_LaserBiasCurrentPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/laser-bias-current YANG schema element.
type Component_Transceiver_LaserBiasCurrentPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/avg"
func (n *Component_Transceiver_LaserBiasCurrentPath) Avg() *Component_Transceiver_LaserBiasCurrent_AvgPath {
	ps := &Component_Transceiver_LaserBiasCurrent_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/avg"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Avg() *Component_Transceiver_LaserBiasCurrent_AvgPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/instant"
func (n *Component_Transceiver_LaserBiasCurrentPath) Instant() *Component_Transceiver_LaserBiasCurrent_InstantPath {
	ps := &Component_Transceiver_LaserBiasCurrent_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/instant"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Instant() *Component_Transceiver_LaserBiasCurrent_InstantPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/interval"
func (n *Component_Transceiver_LaserBiasCurrentPath) Interval() *Component_Transceiver_LaserBiasCurrent_IntervalPath {
	ps := &Component_Transceiver_LaserBiasCurrent_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/interval"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Interval() *Component_Transceiver_LaserBiasCurrent_IntervalPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max"
func (n *Component_Transceiver_LaserBiasCurrentPath) Max() *Component_Transceiver_LaserBiasCurrent_MaxPath {
	ps := &Component_Transceiver_LaserBiasCurrent_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/max"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Max() *Component_Transceiver_LaserBiasCurrent_MaxPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/laser-bias-current/max-time"
func (n *Component_Transceiver_LaserBiasCurrentPath) MaxTime() *Component_Transceiver_LaserBiasCurrent_MaxTimePath {
	ps := &Component_Transceiver_LaserBiasCurrent_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/laser-bias-current/max-time"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) MaxTime() *Component_Transceiver_LaserBiasCurrent_MaxTimePathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min"
func (n *Component_Transceiver_LaserBiasCurrentPath) Min() *Component_Transceiver_LaserBiasCurrent_MinPath {
	ps := &Component_Transceiver_LaserBiasCurrent_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/laser-bias-current/min"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) Min() *Component_Transceiver_LaserBiasCurrent_MinPathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/laser-bias-current/min-time"
func (n *Component_Transceiver_LaserBiasCurrentPath) MinTime() *Component_Transceiver_LaserBiasCurrent_MinTimePath {
	ps := &Component_Transceiver_LaserBiasCurrent_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/laser-bias-current/min-time"
func (n *Component_Transceiver_LaserBiasCurrentPathAny) MinTime() *Component_Transceiver_LaserBiasCurrent_MinTimePathAny {
	ps := &Component_Transceiver_LaserBiasCurrent_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LaserBiasCurrentPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_LaserBiasCurrent] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_LaserBiasCurrent](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_LaserBiasCurrentPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_LaserBiasCurrent] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_LaserBiasCurrent](
		"Component_Transceiver_LaserBiasCurrent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_AvgPath represents the /openconfig-platform/components/component/transceiver/state/output-power/avg YANG schema element.
type Component_Transceiver_OutputPower_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/avg YANG schema element.
type Component_Transceiver_OutputPower_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/output-power/avg"
func (n *Component_Transceiver_OutputPower_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/output-power/avg"
func (n *Component_Transceiver_OutputPower_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_InstantPath represents the /openconfig-platform/components/component/transceiver/state/output-power/instant YANG schema element.
type Component_Transceiver_OutputPower_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/instant YANG schema element.
type Component_Transceiver_OutputPower_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/output-power/instant"
func (n *Component_Transceiver_OutputPower_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/output-power/instant"
func (n *Component_Transceiver_OutputPower_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/output-power/interval YANG schema element.
type Component_Transceiver_OutputPower_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/interval YANG schema element.
type Component_Transceiver_OutputPower_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/output-power/interval"
func (n *Component_Transceiver_OutputPower_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/output-power/interval"
func (n *Component_Transceiver_OutputPower_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_MaxPath represents the /openconfig-platform/components/component/transceiver/state/output-power/max YANG schema element.
type Component_Transceiver_OutputPower_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/max YANG schema element.
type Component_Transceiver_OutputPower_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/output-power/max"
func (n *Component_Transceiver_OutputPower_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/output-power/max"
func (n *Component_Transceiver_OutputPower_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_MaxTimePath represents the /openconfig-platform/components/component/transceiver/state/output-power/max-time YANG schema element.
type Component_Transceiver_OutputPower_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/max-time YANG schema element.
type Component_Transceiver_OutputPower_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/output-power/max-time"
func (n *Component_Transceiver_OutputPower_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max-time"
//	Path from root:       "/components/component/transceiver/state/output-power/max-time"
func (n *Component_Transceiver_OutputPower_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_MinPath represents the /openconfig-platform/components/component/transceiver/state/output-power/min YANG schema element.
type Component_Transceiver_OutputPower_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/min YANG schema element.
type Component_Transceiver_OutputPower_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/output-power/min"
func (n *Component_Transceiver_OutputPower_MinPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/output-power/min"
func (n *Component_Transceiver_OutputPower_MinPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).Min
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPower_MinTimePath represents the /openconfig-platform/components/component/transceiver/state/output-power/min-time YANG schema element.
type Component_Transceiver_OutputPower_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_OutputPower_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power/min-time YANG schema element.
type Component_Transceiver_OutputPower_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/output-power/min-time"
func (n *Component_Transceiver_OutputPower_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "min-time"
//	Path from root:       "/components/component/transceiver/state/output-power/min-time"
func (n *Component_Transceiver_OutputPower_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_OutputPower",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_OutputPower).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_OutputPower) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_OutputPowerPath represents the /openconfig-platform/components/component/transceiver/state/output-power YANG schema element.
type Component_Transceiver_OutputPowerPath struct {
	*ygnmi.NodePath
}

// Component_Transceiver_OutputPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/output-power YANG schema element.
type Component_Transceiver_OutputPowerPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/output-power/avg"
func (n *Component_Transceiver_OutputPowerPath) Avg() *Component_Transceiver_OutputPower_AvgPath {
	ps := &Component_Transceiver_OutputPower_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/output-power/avg"
func (n *Component_Transceiver_OutputPowerPathAny) Avg() *Component_Transceiver_OutputPower_AvgPathAny {
	ps := &Component_Transceiver_OutputPower_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/output-power/instant"
func (n *Component_Transceiver_OutputPowerPath) Instant() *Component_Transceiver_OutputPower_InstantPath {
	ps := &Component_Transceiver_OutputPower_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous value of the statistic.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/output-power/instant"
func (n *Component_Transceiver_OutputPowerPathAny) Instant() *Component_Transceiver_OutputPower_InstantPathAny {
	ps := &Component_Transceiver_OutputPower_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/output-power/interval"
func (n *Component_Transceiver_OutputPowerPath) Interval() *Component_Transceiver_OutputPower_IntervalPath {
	ps := &Component_Transceiver_OutputPower_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/output-power/interval"
func (n *Component_Transceiver_OutputPowerPathAny) Interval() *Component_Transceiver_OutputPower_IntervalPathAny {
	ps := &Component_Transceiver_OutputPower_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/output-power/max"
func (n *Component_Transceiver_OutputPowerPath) Max() *Component_Transceiver_OutputPower_MaxPath {
	ps := &Component_Transceiver_OutputPower_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/output-power/max"
func (n *Component_Transceiver_OutputPowerPathAny) Max() *Component_Transceiver_OutputPower_MaxPathAny {
	ps := &Component_Transceiver_OutputPower_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/output-power/max-time"
func (n *Component_Transceiver_OutputPowerPath) MaxTime() *Component_Transceiver_OutputPower_MaxTimePath {
	ps := &Component_Transceiver_OutputPower_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "max-time"
//		Path from root:       "/components/component/transceiver/state/output-power/max-time"
func (n *Component_Transceiver_OutputPowerPathAny) MaxTime() *Component_Transceiver_OutputPower_MaxTimePathAny {
	ps := &Component_Transceiver_OutputPower_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/output-power/min"
func (n *Component_Transceiver_OutputPowerPath) Min() *Component_Transceiver_OutputPower_MinPath {
	ps := &Component_Transceiver_OutputPower_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the statistic over the time
// interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "min"
//	Path from root:       "/components/component/transceiver/state/output-power/min"
func (n *Component_Transceiver_OutputPowerPathAny) Min() *Component_Transceiver_OutputPower_MinPathAny {
	ps := &Component_Transceiver_OutputPower_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/output-power/min-time"
func (n *Component_Transceiver_OutputPowerPath) MinTime() *Component_Transceiver_OutputPower_MinTimePath {
	ps := &Component_Transceiver_OutputPower_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-platform"
//		Path from parent:     "min-time"
//		Path from root:       "/components/component/transceiver/state/output-power/min-time"
func (n *Component_Transceiver_OutputPowerPathAny) MinTime() *Component_Transceiver_OutputPower_MinTimePathAny {
	ps := &Component_Transceiver_OutputPower_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_OutputPowerPath) State() ygnmi.SingletonQuery[*oc.Component_Transceiver_OutputPower] {
	return ygnmi.NewSingletonQuery[*oc.Component_Transceiver_OutputPower](
		"Component_Transceiver_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Transceiver_OutputPowerPathAny) State() ygnmi.WildcardQuery[*oc.Component_Transceiver_OutputPower] {
	return ygnmi.NewWildcardQuery[*oc.Component_Transceiver_OutputPower](
		"Component_Transceiver_OutputPower",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_AvgPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/avg YANG schema element.
type Component_Transceiver_PostFecBer_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/avg YANG schema element.
type Component_Transceiver_PostFecBer_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/avg"
func (n *Component_Transceiver_PostFecBer_AvgPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "avg"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/avg"
func (n *Component_Transceiver_PostFecBer_AvgPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Avg
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_InstantPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/instant YANG schema element.
type Component_Transceiver_PostFecBer_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/instant YANG schema element.
type Component_Transceiver_PostFecBer_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/instant"
func (n *Component_Transceiver_PostFecBer_InstantPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "instant"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/instant"
func (n *Component_Transceiver_PostFecBer_InstantPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Instant
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_IntervalPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/interval YANG schema element.
type Component_Transceiver_PostFecBer_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/interval YANG schema element.
type Component_Transceiver_PostFecBer_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/interval"
func (n *Component_Transceiver_PostFecBer_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "interval"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/interval"
func (n *Component_Transceiver_PostFecBer_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Transceiver_PostFecBer_MaxPath represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber/max YANG schema element.
type Component_Transceiver_PostFecBer_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Transceiver_PostFecBer_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/transceiver/state/post-fec-ber/max YANG schema element.
type Component_Transceiver_PostFecBer_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max"
func (n *Component_Transceiver_PostFecBer_MaxPath) State() ygnmi.SingletonQuery[float64] {
	return ygnmi.NewSingletonQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-transport-types"
//	Instantiating module: "openconfig-platform-transceiver"
//	Path from parent:     "max"
//	Path from root:       "/components/component/transceiver/state/post-fec-ber/max"
func (n *Component_Transceiver_PostFecBer_MaxPathAny) State() ygnmi.WildcardQuery[float64] {
	return ygnmi.NewWildcardQuery[float64](
		"Component_Transceiver_PostFecBer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float64, bool) {
			ret := gs.(*oc.Component_Transceiver_PostFecBer).Max
			if ret == nil {
				var zero float64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Transceiver_PostFecBer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
