/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock).Oversubscription
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/queueing-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny struct {
	*ygnmi.NodePath
}

// IncorrectState (leaf): Packets dropped due to hardware of software incorrect state of VOQs,
// or fabric queues, or interface queues.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/incorrect-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) IncorrectState() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "incorrect-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncorrectState (leaf): Packets dropped due to hardware of software incorrect state of VOQs,
// or fabric queues, or interface queues.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/incorrect-state"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/incorrect-state"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) IncorrectState() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_IncorrectStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "incorrect-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupQueue (leaf): Packets dropped in either the lookup or recirculation path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-queue"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) LookupQueue() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LookupQueue (leaf): Packets dropped in either the lookup or recirculation path.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/lookup-queue"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/lookup-queue"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) LookupQueue() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_LookupQueuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lookup-queue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryLimit (leaf): Packets dropped due to running out of the queue memory.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/memory-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) MemoryLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MemoryLimit (leaf): Packets dropped due to running out of the queue memory.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/memory-limit"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/memory-limit"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) MemoryLimit() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_MemoryLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "memory-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Oversubscription (leaf): Number of packets dropped due to oversubscription of the
// integrated-circuit subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/oversubscription"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/drop/queueing-block/state/oversubscription"
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) Oversubscription() *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock_OversubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oversubscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock](
		"Component_IntegratedCircuit_PipelineCounters_Drop_QueueingBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/vendor YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/drop/vendor YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_VendorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_Vendor] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_Vendor](
		"Component_IntegratedCircuit_PipelineCounters_Drop_Vendor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Drop_VendorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_Vendor] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Drop_Vendor](
		"Component_IntegratedCircuit_PipelineCounters_Drop_Vendor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_ErrorsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ErrorsPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny struct {
	*ygnmi.NodePath
}

// FabricBlockErrorAny (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) FabricBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block", "fabric-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// FabricBlockErrorAny (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) FabricBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block", "fabric-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// FabricBlockError (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) FabricBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block", "fabric-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// FabricBlockError (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) FabricBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block", "fabric-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// FabricBlockErrorMap (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) FabricBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FabricBlockErrorMap (list): An individual error within the fabric block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block/fabric-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) FabricBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceErrorAny (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) HostInterfaceErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block", "host-interface-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// HostInterfaceErrorAny (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) HostInterfaceErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block", "host-interface-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// HostInterfaceError (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) HostInterfaceError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block", "host-interface-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// HostInterfaceError (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) HostInterfaceError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block", "host-interface-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// HostInterfaceErrorMap (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) HostInterfaceErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceErrorMap (list): An individual error within the host interface block. Each error
// counter is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block/host-interface-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) HostInterfaceErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlockErrorAny (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) InterfaceBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block", "interface-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceBlockErrorAny (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) InterfaceBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block", "interface-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceBlockError (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) InterfaceBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block", "interface-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceBlockError (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) InterfaceBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block", "interface-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceBlockErrorMap (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) InterfaceBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlockErrorMap (list): An individual error within the interface block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block/interface-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) InterfaceBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlockErrorAny (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) LookupBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block", "lookup-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// LookupBlockErrorAny (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) LookupBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block", "lookup-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// LookupBlockError (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) LookupBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block", "lookup-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// LookupBlockError (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) LookupBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block", "lookup-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// LookupBlockErrorMap (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) LookupBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlockErrorMap (list): An individual error within the lookup block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block/lookup-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) LookupBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlockErrorAny (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) QueueingBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block", "queueing-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueingBlockErrorAny (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) QueueingBlockErrorAny() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block", "queueing-block-error"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// QueueingBlockError (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) QueueingBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block", "queueing-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueingBlockError (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
//
//	Name: string
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) QueueingBlockError(Name string) *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block", "queueing-block-error"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// QueueingBlockErrorMap (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) QueueingBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlockErrorMap (list): An individual error within the queueing block. Each error counter
// is uniquely identified by the name of the error.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block/queueing-block-error"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error"
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) QueueingBlockErrorMap() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_ErrorsPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/fabric-block/fabric-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).FabricBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:fabric-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:fabric-block-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_FabricBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).FabricBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:fabric-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:fabric-block-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/host-interface-block/host-interface-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).HostInterfaceError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:host-interface-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:host-interface-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_HostInterfaceError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).HostInterfaceError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:host-interface-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:host-interface-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/interface-block/interface-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).InterfaceBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:interface-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:interface-block-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_InterfaceBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).InterfaceBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:interface-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:interface-block-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/lookup-block/lookup-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).LookupBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:lookup-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:lookup-block-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_LookupBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).LookupBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:lookup-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:lookup-block-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath) State() ygnmi.SingletonQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewSingletonQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny) State() ygnmi.WildcardQuery[[]oc.E_FabricBlockError_Action] {
	return ygnmi.NewWildcardQuery[[]oc.E_FabricBlockError_Action](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_FabricBlockError_Action, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Action
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Count
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath) State() ygnmi.SingletonQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewSingletonQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny) State() ygnmi.WildcardQuery[oc.E_FabricBlockError_Level] {
	return ygnmi.NewWildcardQuery[oc.E_FabricBlockError_Level](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_FabricBlockError_Level, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Level
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/name YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError).Threshold
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny struct {
	*ygnmi.NodePath
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Action (leaf-list): Error actions that are taken by the system - log, linecard reboot,
// linecard offline, NPU reset, NPU offline, gather diagnostic data,
// raise an alarm.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/action"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/action"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Action() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The error is currently in an active state. When the system detects
// that the specified threshold is exceeded, this value should be set to
// true.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/active"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/active"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Active() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Count (leaf): Total count of errors of this type.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/count"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/count"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Count() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_CountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Level (leaf): The severity of the error that is being recorded by the system. This
// value can be used by a consumer to determine the action when this error
// is recorded.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/level"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/level"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Level() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the interrupt, hardware error, or software error in the NPU.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "*/name"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/*/name"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Name() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Threshold (leaf): Number of errors before a recovery action is automatically
// taken by the system.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/threshold"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/errors/queueing-block/queueing-block-error/state/threshold"
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) Threshold() *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError_ThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).QueueingBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:queueing-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:queueing-block-error"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockErrorPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError](
		"Component_IntegratedCircuit_PipelineCounters_Errors",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Component_IntegratedCircuit_PipelineCounters_Errors_QueueingBlockError, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Errors).QueueingBlockError
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_IntegratedCircuit_PipelineCounters_Errors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-platform-pipeline-counters:queueing-block"},
			PostRelPath: []string{"openconfig-platform-pipeline-counters:queueing-block-error"},
		},
	)
}

// Component_IntegratedCircuit_PipelineCounters_PacketPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_PacketPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_PacketPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_PacketPathAny struct {
	*ygnmi.NodePath
}

// FabricBlock (container): The IC fabric block subsystem connects the IC to the external
// systems fabric subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) FabricBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FabricBlock (container): The IC fabric block subsystem connects the IC to the external
// systems fabric subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fabric-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) FabricBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fabric-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceBlock (container): The IC host interface block subsystem connects the IC to the
// external systems host or control subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) HostInterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostInterfaceBlock (container): The IC host interface block subsystem connects the IC to the
// external systems host or control subsystem
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "host-interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) HostInterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlock (container): The IC interface subsystem connects the IC to the external PHY or
// MAC.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) InterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceBlock (container): The IC interface subsystem connects the IC to the external PHY or
// MAC.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "interface-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/interface-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) InterfaceBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_InterfaceBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlock (container): The IC lookup subsystem perform the next hop lookup of the packet
// and other forwarding features such as firewall filters.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) LookupBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LookupBlock (container): The IC lookup subsystem perform the next hop lookup of the packet
// and other forwarding features such as firewall filters.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "lookup-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/lookup-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) LookupBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_LookupBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lookup-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlock (container): The IC queueing subsystem buffers the packet while processing it
// and queues the packet for delivery to the next stage
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) QueueingBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueueingBlock (container): The IC queueing subsystem buffers the packet while processing it
// and queues the packet for delivery to the next stage
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "queueing-block"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/queueing-block"
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) QueueingBlock() *Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_QueueingBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queueing-block"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet](
		"Component_IntegratedCircuit_PipelineCounters_Packet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_PacketPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet](
		"Component_IntegratedCircuit_PipelineCounters_Packet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InHighPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InHighPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InLowPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InLowPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutHighPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutHighPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutLowPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-cells"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutLowPriorityCells
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock).OutPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath struct {
	*ygnmi.NodePath
}

// Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/fabric-block YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny struct {
	*ygnmi.NodePath
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InBytes (leaf): Incoming bytes towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCells (leaf): Incoming cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InCells (leaf): Incoming cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityCells (leaf): Incoming high priority cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InHighPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityCells (leaf): Incoming high priority cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InHighPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityPackets (leaf): Incoming high priority packets towards the integrated-circuit
// fabric subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHighPriorityPackets (leaf): Incoming high priority packets towards the integrated-circuit
// fabric subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InHighPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityCells (leaf): Incoming low priority cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InLowPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityCells (leaf): Incoming low priority cells towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InLowPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityPackets (leaf): Incoming low priority packets towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InLowPriorityPackets (leaf): Incoming low priority packets towards the integrated-circuit fabric
// subsystem block from the previous NPU sub block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InLowPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPackets (leaf): Incoming packets towards the integrated-circuit interface
// subsystem block from the line interfaces or fabric.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) InPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_InPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutBytes (leaf): Outgoing bytes towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutBytes() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCells (leaf): Outgoing cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutCells (leaf): Outgoing cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityCells (leaf): Outgoing high priority cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutHighPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityCells (leaf): Outgoing high priority cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutHighPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityPackets (leaf): Outgoing high priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHighPriorityPackets (leaf): Outgoing high priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutHighPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutHighPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-high-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityCells (leaf): Outgoing low priority cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutLowPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityCells (leaf): Outgoing low priority cells towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-cells"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-cells"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutLowPriorityCells() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityCellsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-cells"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityPackets (leaf): Outgoing low priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutLowPriorityPackets (leaf): Outgoing low priority packets towards the fabric from the
// integrated-circuit fabric subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutLowPriorityPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutLowPriorityPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-low-priority-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPackets (leaf): Outgoing packets towards the line interfaces or fabric from the
// integrated-circuit interface subsystem block.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "state/out-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/fabric-block/state/out-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) OutPackets() *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny {
	ps := &Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock_OutPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPath) State() ygnmi.SingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock] {
	return ygnmi.NewSingletonQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlockPathAny) State() ygnmi.WildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock] {
	return ygnmi.NewWildcardQuery[*oc.Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock](
		"Component_IntegratedCircuit_PipelineCounters_Packet_FabricBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-punt-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-punt-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).FragmentPuntPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/fragment-punt-pkts"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/fragment-punt-pkts"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_FragmentPuntPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fragment-punt-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).FragmentPuntPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-high-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-high-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InHighPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-high-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InHighPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-low-priority-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-low-priority-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InLowPriorityPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-low-priority-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InLowPriorityPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/in-packets"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/in-packets"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_InPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).InPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath represents the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes YANG schema element.
type Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-pipeline-counters"
//	Instantiating module: "openconfig-platform-pipeline-counters"
//	Path from parent:     "state/out-bytes"
//	Path from root:       "/components/component/integrated-circuit/pipeline-counters/packet/host-interface-block/state/out-bytes"
func (n *Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock_OutBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock).OutBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.Component_IntegratedCircuit_PipelineCounters_Packet_HostInterfaceBlock)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
