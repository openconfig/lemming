/*
Package platform is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package platform

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Component_LastPoweroffReason_DetailsPath represents the /openconfig-platform/components/component/state/last-poweroff-reason/details YANG schema element.
type Component_LastPoweroffReason_DetailsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastPoweroffReason_DetailsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-reason/details YANG schema element.
type Component_LastPoweroffReason_DetailsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReason_DetailsPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReason_DetailsPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastPoweroffReason_TriggerPath represents the /openconfig-platform/components/component/state/last-poweroff-reason/trigger YANG schema element.
type Component_LastPoweroffReason_TriggerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastPoweroffReason_TriggerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-reason/trigger YANG schema element.
type Component_LastPoweroffReason_TriggerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReason_TriggerPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReason_TriggerPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger](
		"Component_LastPoweroffReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentLastPoweroffReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastPoweroffReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastPoweroffReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastPoweroffReasonPath represents the /openconfig-platform/components/component/state/last-poweroff-reason YANG schema element.
type Component_LastPoweroffReasonPath struct {
	*ygnmi.NodePath
}

// Component_LastPoweroffReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-poweroff-reason YANG schema element.
type Component_LastPoweroffReasonPathAny struct {
	*ygnmi.NodePath
}

// Details (leaf): Provides a detailed reason for component power-off.
// For system-initiated power-offs, this field can include
// specific causes (e.g., critical errors resulting in a
// controller-card bootloop).
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReasonPath) Details() *Component_LastPoweroffReason_DetailsPath {
	ps := &Component_LastPoweroffReason_DetailsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Details (leaf): Provides a detailed reason for component power-off.
// For system-initiated power-offs, this field can include
// specific causes (e.g., critical errors resulting in a
// controller-card bootloop).
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-poweroff-reason/details"
func (n *Component_LastPoweroffReasonPathAny) Details() *Component_LastPoweroffReason_DetailsPathAny {
	ps := &Component_LastPoweroffReason_DetailsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers for the last poweroff
// event. Component power-off can be triggered
// in various ways,
//   - USER_INITIATED
//   - SYSTEM_INITIATED
//   - POWER_FAILURE
//
// This field is not updated during reboots; those are
// tracked in the 'last-reboot-reason' leaf.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReasonPath) Trigger() *Component_LastPoweroffReason_TriggerPath {
	ps := &Component_LastPoweroffReason_TriggerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers for the last poweroff
// event. Component power-off can be triggered
// in various ways,
//   - USER_INITIATED
//   - SYSTEM_INITIATED
//   - POWER_FAILURE
//
// This field is not updated during reboots; those are
// tracked in the 'last-reboot-reason' leaf.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-poweroff-reason/trigger"
func (n *Component_LastPoweroffReasonPathAny) Trigger() *Component_LastPoweroffReason_TriggerPathAny {
	ps := &Component_LastPoweroffReason_TriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastPoweroffReasonPath) State() ygnmi.SingletonQuery[*oc.Component_LastPoweroffReason] {
	return ygnmi.NewSingletonQuery[*oc.Component_LastPoweroffReason](
		"Component_LastPoweroffReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastPoweroffReasonPathAny) State() ygnmi.WildcardQuery[*oc.Component_LastPoweroffReason] {
	return ygnmi.NewWildcardQuery[*oc.Component_LastPoweroffReason](
		"Component_LastPoweroffReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverReason_DetailsPath represents the /openconfig-platform/components/component/state/last-switchover-reason/details YANG schema element.
type Component_LastSwitchoverReason_DetailsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastSwitchoverReason_DetailsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason/details YANG schema element.
type Component_LastSwitchoverReason_DetailsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReason_DetailsPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReason_DetailsPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"details"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Details
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverReason_TriggerPath represents the /openconfig-platform/components/component/state/last-switchover-reason/trigger YANG schema element.
type Component_LastSwitchoverReason_TriggerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_LastSwitchoverReason_TriggerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason/trigger YANG schema element.
type Component_LastSwitchoverReason_TriggerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReason_TriggerPath) State() ygnmi.SingletonQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger] {
	return ygnmi.NewSingletonQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReason_TriggerPathAny) State() ygnmi.WildcardQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger] {
	return ygnmi.NewWildcardQuery[oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger](
		"Component_LastSwitchoverReason",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PlatformTypes_ComponentRedundantRoleSwitchoverReasonTrigger, bool) {
			ret := gs.(*oc.Component_LastSwitchoverReason).Trigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_LastSwitchoverReason) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_LastSwitchoverReasonPath represents the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReasonPath struct {
	*ygnmi.NodePath
}

// Component_LastSwitchoverReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReasonPathAny struct {
	*ygnmi.NodePath
}

// Details (leaf): Records detailed description of why the switchover happens.
// For example, when system initiated the switchover, this leaf
// can be used to record the specific reason, e.g. due to critical
// errors of the routing daemon in the primary role.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReasonPath) Details() *Component_LastSwitchoverReason_DetailsPath {
	ps := &Component_LastSwitchoverReason_DetailsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Details (leaf): Records detailed description of why the switchover happens.
// For example, when system initiated the switchover, this leaf
// can be used to record the specific reason, e.g. due to critical
// errors of the routing daemon in the primary role.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "details"
//	Path from root:       "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReasonPathAny) Details() *Component_LastSwitchoverReason_DetailsPathAny {
	ps := &Component_LastSwitchoverReason_DetailsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers, e.g. user or system
// initiated the switchover.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReasonPath) Trigger() *Component_LastSwitchoverReason_TriggerPath {
	ps := &Component_LastSwitchoverReason_TriggerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Trigger (leaf): Records the generic triggers, e.g. user or system
// initiated the switchover.
//
//	Defining module:      "openconfig-platform-types"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "trigger"
//	Path from root:       "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReasonPathAny) Trigger() *Component_LastSwitchoverReason_TriggerPathAny {
	ps := &Component_LastSwitchoverReason_TriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastSwitchoverReasonPath) State() ygnmi.SingletonQuery[*oc.Component_LastSwitchoverReason] {
	return ygnmi.NewSingletonQuery[*oc.Component_LastSwitchoverReason](
		"Component_LastSwitchoverReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_LastSwitchoverReasonPathAny) State() ygnmi.WildcardQuery[*oc.Component_LastSwitchoverReason] {
	return ygnmi.NewWildcardQuery[*oc.Component_LastSwitchoverReason](
		"Component_LastSwitchoverReason",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Memory_AvailablePath represents the /openconfig-platform/components/component/state/memory/available YANG schema element.
type Component_Memory_AvailablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Memory_AvailablePathAny represents the wildcard version of the /openconfig-platform/components/component/state/memory/available YANG schema element.
type Component_Memory_AvailablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "available"
//	Path from root:       "/components/component/state/memory/available"
func (n *Component_Memory_AvailablePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"available"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Memory).Available
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "available"
//	Path from root:       "/components/component/state/memory/available"
func (n *Component_Memory_AvailablePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"available"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Memory).Available
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Memory_UtilizedPath represents the /openconfig-platform/components/component/state/memory/utilized YANG schema element.
type Component_Memory_UtilizedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Memory_UtilizedPathAny represents the wildcard version of the /openconfig-platform/components/component/state/memory/utilized YANG schema element.
type Component_Memory_UtilizedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilized"
//	Path from root:       "/components/component/state/memory/utilized"
func (n *Component_Memory_UtilizedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"utilized"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Memory).Utilized
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilized"
//	Path from root:       "/components/component/state/memory/utilized"
func (n *Component_Memory_UtilizedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"utilized"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Memory).Utilized
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_MemoryPath represents the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_MemoryPath struct {
	*ygnmi.NodePath
}

// Component_MemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_MemoryPathAny struct {
	*ygnmi.NodePath
}

// Available (leaf): The available memory physically installed, or logically
// allocated to the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "available"
//	Path from root:       "/components/component/state/memory/available"
func (n *Component_MemoryPath) Available() *Component_Memory_AvailablePath {
	ps := &Component_Memory_AvailablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"available"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Available (leaf): The available memory physically installed, or logically
// allocated to the component.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "available"
//	Path from root:       "/components/component/state/memory/available"
func (n *Component_MemoryPathAny) Available() *Component_Memory_AvailablePathAny {
	ps := &Component_Memory_AvailablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"available"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilized (leaf): The memory currently in use by processes running on
// the component, not considering reserved memory that is
// not available for use.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilized"
//	Path from root:       "/components/component/state/memory/utilized"
func (n *Component_MemoryPath) Utilized() *Component_Memory_UtilizedPath {
	ps := &Component_Memory_UtilizedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilized"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilized (leaf): The memory currently in use by processes running on
// the component, not considering reserved memory that is
// not available for use.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "utilized"
//	Path from root:       "/components/component/state/memory/utilized"
func (n *Component_MemoryPathAny) Utilized() *Component_Memory_UtilizedPathAny {
	ps := &Component_Memory_UtilizedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilized"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_MemoryPath) State() ygnmi.SingletonQuery[*oc.Component_Memory] {
	return ygnmi.NewSingletonQuery[*oc.Component_Memory](
		"Component_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_MemoryPathAny) State() ygnmi.WildcardQuery[*oc.Component_Memory] {
	return ygnmi.NewWildcardQuery[*oc.Component_Memory](
		"Component_Memory",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_PciePath represents the /openconfig-platform/components/component/state/pcie YANG schema element.
type Component_PciePath struct {
	*ygnmi.NodePath
}

// Component_PciePathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie YANG schema element.
type Component_PciePathAny struct {
	*ygnmi.NodePath
}

// CorrectableErrors (container): The count of the correctable PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "correctable-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors"
func (n *Component_PciePath) CorrectableErrors() *Component_Pcie_CorrectableErrorsPath {
	ps := &Component_Pcie_CorrectableErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"correctable-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CorrectableErrors (container): The count of the correctable PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "correctable-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors"
func (n *Component_PciePathAny) CorrectableErrors() *Component_Pcie_CorrectableErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"correctable-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FatalErrors (container): The count of the fatal PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fatal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors"
func (n *Component_PciePath) FatalErrors() *Component_Pcie_FatalErrorsPath {
	ps := &Component_Pcie_FatalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FatalErrors (container): The count of the fatal PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "fatal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors"
func (n *Component_PciePathAny) FatalErrors() *Component_Pcie_FatalErrorsPathAny {
	ps := &Component_Pcie_FatalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NonFatalErrors (container): The count of the non-fatal PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors"
func (n *Component_PciePath) NonFatalErrors() *Component_Pcie_NonFatalErrorsPath {
	ps := &Component_Pcie_NonFatalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NonFatalErrors (container): The count of the non-fatal PCIe errors.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors"
func (n *Component_PciePathAny) NonFatalErrors() *Component_Pcie_NonFatalErrorsPathAny {
	ps := &Component_Pcie_NonFatalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PciePath) State() ygnmi.SingletonQuery[*oc.Component_Pcie] {
	return ygnmi.NewSingletonQuery[*oc.Component_Pcie](
		"Component_Pcie",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_PciePathAny) State() ygnmi.WildcardQuery[*oc.Component_Pcie] {
	return ygnmi.NewWildcardQuery[*oc.Component_Pcie](
		"Component_Pcie",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "advisory-non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).AdvisoryNonFatalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "advisory-non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).AdvisoryNonFatalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_BadDllpErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-dllp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadDllpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-dllp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-dllp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrors_BadDllpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-dllp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).BadDllpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-dllp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-dllp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).BadDllpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_BadTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-tlp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-tlp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-tlp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrors_BadTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).BadTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-tlp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).BadTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors YANG schema element.
type Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors YANG schema element.
type Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "hdr-log-overflow-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).HdrLogOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "hdr-log-overflow-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).HdrLogOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_InternalErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/internal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_InternalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_InternalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/internal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_InternalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrors_InternalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrors_InternalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_ReceiverErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/receiver-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReceiverErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/receiver-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrors_ReceiverErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).ReceiverErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).ReceiverErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/relay-rollover-errors YANG schema element.
type Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/relay-rollover-errors YANG schema element.
type Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "relay-rollover-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"relay-rollover-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).RelayRolloverErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "relay-rollover-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"relay-rollover-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).RelayRolloverErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/replay-timeout-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/replay-timeout-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "replay-timeout-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"replay-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).ReplayTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "replay-timeout-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"replay-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).ReplayTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrors_TotalErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/total-errors YANG schema element.
type Component_Pcie_CorrectableErrors_TotalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_CorrectableErrors_TotalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/total-errors YANG schema element.
type Component_Pcie_CorrectableErrors_TotalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrors_TotalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrors_TotalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_CorrectableErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_CorrectableErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_CorrectableErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type Component_Pcie_CorrectableErrorsPath struct {
	*ygnmi.NodePath
}

// Component_Pcie_CorrectableErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type Component_Pcie_CorrectableErrorsPathAny struct {
	*ygnmi.NodePath
}

// AdvisoryNonFatalErrors (leaf): Number of advisory non fatal errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "advisory-non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrorsPath) AdvisoryNonFatalErrors() *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvisoryNonFatalErrors (leaf): Number of advisory non fatal errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "advisory-non-fatal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) AdvisoryNonFatalErrors() *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadDllpErrors (leaf): Number of DLLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-dllp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrorsPath) BadDllpErrors() *Component_Pcie_CorrectableErrors_BadDllpErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_BadDllpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-dllp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadDllpErrors (leaf): Number of DLLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-dllp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) BadDllpErrors() *Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-dllp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadTlpErrors (leaf): Number of TLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-tlp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrorsPath) BadTlpErrors() *Component_Pcie_CorrectableErrors_BadTlpErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_BadTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadTlpErrors (leaf): Number of TLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "bad-tlp-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) BadTlpErrors() *Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HdrLogOverflowErrors (leaf): Number of header log overflow errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "hdr-log-overflow-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrorsPath) HdrLogOverflowErrors() *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HdrLogOverflowErrors (leaf): Number of header log overflow errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "hdr-log-overflow-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) HdrLogOverflowErrors() *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrorsPath) InternalErrors() *Component_Pcie_CorrectableErrors_InternalErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_InternalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) InternalErrors() *Component_Pcie_CorrectableErrors_InternalErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_InternalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverErrors (leaf): Number of receiver errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrorsPath) ReceiverErrors() *Component_Pcie_CorrectableErrors_ReceiverErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_ReceiverErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverErrors (leaf): Number of receiver errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) ReceiverErrors() *Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RelayRolloverErrors (leaf): Number of relay rollover errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "relay-rollover-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrorsPath) RelayRolloverErrors() *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"relay-rollover-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RelayRolloverErrors (leaf): Number of relay rollover errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "relay-rollover-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) RelayRolloverErrors() *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"relay-rollover-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplayTimeoutErrors (leaf): Number of replay timeout errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "replay-timeout-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrorsPath) ReplayTimeoutErrors() *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"replay-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplayTimeoutErrors (leaf): Number of replay timeout errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "replay-timeout-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) ReplayTimeoutErrors() *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"replay-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of correctable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrorsPath) TotalErrors() *Component_Pcie_CorrectableErrors_TotalErrorsPath {
	ps := &Component_Pcie_CorrectableErrors_TotalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of correctable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) TotalErrors() *Component_Pcie_CorrectableErrors_TotalErrorsPathAny {
	ps := &Component_Pcie_CorrectableErrors_TotalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_CorrectableErrorsPath) State() ygnmi.SingletonQuery[*oc.Component_Pcie_CorrectableErrors] {
	return ygnmi.NewSingletonQuery[*oc.Component_Pcie_CorrectableErrors](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_CorrectableErrorsPathAny) State() ygnmi.WildcardQuery[*oc.Component_Pcie_CorrectableErrors] {
	return ygnmi.NewWildcardQuery[*oc.Component_Pcie_CorrectableErrors](
		"Component_Pcie_CorrectableErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_AcsViolationErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_FatalErrors_AcsViolationErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_AcsViolationErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_FatalErrors_AcsViolationErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrors_AcsViolationErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).AcsViolationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrors_AcsViolationErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).AcsViolationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).AtomicOpBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).AtomicOpBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_BlockedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_BlockedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrors_BlockedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).BlockedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).BlockedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_CompletionAbortErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionAbortErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrors_CompletionAbortErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).CompletionAbortErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).CompletionAbortErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).CompletionTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).CompletionTimeoutErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_DataLinkErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_FatalErrors_DataLinkErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_DataLinkErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_FatalErrors_DataLinkErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrors_DataLinkErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).DataLinkErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrors_DataLinkErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).DataLinkErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_EcrcErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_FatalErrors_EcrcErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_EcrcErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_FatalErrors_EcrcErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrors_EcrcErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).EcrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrors_EcrcErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).EcrcErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).FlowControlProtocolErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).FlowControlProtocolErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_InternalErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/internal-errors YANG schema element.
type Component_Pcie_FatalErrors_InternalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_InternalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/internal-errors YANG schema element.
type Component_Pcie_FatalErrors_InternalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrors_InternalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrors_InternalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"internal-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).InternalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_MalformedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_MalformedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrors_MalformedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).MalformedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).MalformedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_PoisonedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_PoisonedTlpErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrors_PoisonedTlpErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).PoisonedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).PoisonedTlpErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).ReceiverOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).ReceiverOverflowErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_SurpriseDownErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_FatalErrors_SurpriseDownErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrors_SurpriseDownErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).SurpriseDownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).SurpriseDownErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).TlpPrefixBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).TlpPrefixBlockedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_TotalErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/total-errors YANG schema element.
type Component_Pcie_FatalErrors_TotalErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_TotalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/total-errors YANG schema element.
type Component_Pcie_FatalErrors_TotalErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrors_TotalErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrors_TotalErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).TotalErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_UndefinedErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_FatalErrors_UndefinedErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_UndefinedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_FatalErrors_UndefinedErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrors_UndefinedErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UndefinedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrors_UndefinedErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UndefinedErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UnexpectedCompletionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UnexpectedCompletionErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UnsupportedRequestErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_FatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_FatalErrors).UnsupportedRequestErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_FatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_FatalErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type Component_Pcie_FatalErrorsPath struct {
	*ygnmi.NodePath
}

// Component_Pcie_FatalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type Component_Pcie_FatalErrorsPathAny struct {
	*ygnmi.NodePath
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrorsPath) AcsViolationErrors() *Component_Pcie_FatalErrors_AcsViolationErrorsPath {
	ps := &Component_Pcie_FatalErrors_AcsViolationErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrorsPathAny) AcsViolationErrors() *Component_Pcie_FatalErrors_AcsViolationErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_AcsViolationErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrorsPath) AtomicOpBlockedErrors() *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath {
	ps := &Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "atomic-op-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrorsPathAny) AtomicOpBlockedErrors() *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrorsPath) BlockedTlpErrors() *Component_Pcie_FatalErrors_BlockedTlpErrorsPath {
	ps := &Component_Pcie_FatalErrors_BlockedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "blocked-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrorsPathAny) BlockedTlpErrors() *Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrorsPath) CompletionAbortErrors() *Component_Pcie_FatalErrors_CompletionAbortErrorsPath {
	ps := &Component_Pcie_FatalErrors_CompletionAbortErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-abort-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrorsPathAny) CompletionAbortErrors() *Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrorsPath) CompletionTimeoutErrors() *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath {
	ps := &Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "completion-timeout-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrorsPathAny) CompletionTimeoutErrors() *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrorsPath) DataLinkErrors() *Component_Pcie_FatalErrors_DataLinkErrorsPath {
	ps := &Component_Pcie_FatalErrors_DataLinkErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "data-link-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrorsPathAny) DataLinkErrors() *Component_Pcie_FatalErrors_DataLinkErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_DataLinkErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrorsPath) EcrcErrors() *Component_Pcie_FatalErrors_EcrcErrorsPath {
	ps := &Component_Pcie_FatalErrors_EcrcErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "ecrc-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrorsPathAny) EcrcErrors() *Component_Pcie_FatalErrors_EcrcErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_EcrcErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrorsPath) FlowControlProtocolErrors() *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath {
	ps := &Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "flow-control-protocol-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrorsPathAny) FlowControlProtocolErrors() *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrorsPath) InternalErrors() *Component_Pcie_FatalErrors_InternalErrorsPath {
	ps := &Component_Pcie_FatalErrors_InternalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "internal-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrorsPathAny) InternalErrors() *Component_Pcie_FatalErrors_InternalErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_InternalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrorsPath) MalformedTlpErrors() *Component_Pcie_FatalErrors_MalformedTlpErrorsPath {
	ps := &Component_Pcie_FatalErrors_MalformedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "malformed-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrorsPathAny) MalformedTlpErrors() *Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrorsPath) PoisonedTlpErrors() *Component_Pcie_FatalErrors_PoisonedTlpErrorsPath {
	ps := &Component_Pcie_FatalErrors_PoisonedTlpErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "poisoned-tlp-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrorsPathAny) PoisonedTlpErrors() *Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrorsPath) ReceiverOverflowErrors() *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath {
	ps := &Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "receiver-overflow-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrorsPathAny) ReceiverOverflowErrors() *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrorsPath) SurpriseDownErrors() *Component_Pcie_FatalErrors_SurpriseDownErrorsPath {
	ps := &Component_Pcie_FatalErrors_SurpriseDownErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "surprise-down-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrorsPathAny) SurpriseDownErrors() *Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrorsPath) TlpPrefixBlockedErrors() *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath {
	ps := &Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "tlp-prefix-blocked-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrorsPathAny) TlpPrefixBlockedErrors() *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrorsPath) TotalErrors() *Component_Pcie_FatalErrors_TotalErrorsPath {
	ps := &Component_Pcie_FatalErrors_TotalErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "total-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrorsPathAny) TotalErrors() *Component_Pcie_FatalErrors_TotalErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_TotalErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrorsPath) UndefinedErrors() *Component_Pcie_FatalErrors_UndefinedErrorsPath {
	ps := &Component_Pcie_FatalErrors_UndefinedErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "undefined-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrorsPathAny) UndefinedErrors() *Component_Pcie_FatalErrors_UndefinedErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_UndefinedErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrorsPath) UnexpectedCompletionErrors() *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath {
	ps := &Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unexpected-completion-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrorsPathAny) UnexpectedCompletionErrors() *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrorsPath) UnsupportedRequestErrors() *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath {
	ps := &Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "unsupported-request-errors"
//	Path from root:       "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrorsPathAny) UnsupportedRequestErrors() *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny {
	ps := &Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_FatalErrorsPath) State() ygnmi.SingletonQuery[*oc.Component_Pcie_FatalErrors] {
	return ygnmi.NewSingletonQuery[*oc.Component_Pcie_FatalErrors](
		"Component_Pcie_FatalErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Component_Pcie_FatalErrorsPathAny) State() ygnmi.WildcardQuery[*oc.Component_Pcie_FatalErrors] {
	return ygnmi.NewWildcardQuery[*oc.Component_Pcie_FatalErrors](
		"Component_Pcie_FatalErrors",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Component_Pcie_NonFatalErrors_AcsViolationErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AcsViolationErrorsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrors_AcsViolationErrorsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).AcsViolationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-platform"
//	Instantiating module: "openconfig-platform"
//	Path from parent:     "acs-violation-errors"
//	Path from root:       "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Component_Pcie_NonFatalErrors",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"acs-violation-errors"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Component_Pcie_NonFatalErrors).AcsViolationErrors
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Component_Pcie_NonFatalErrors) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
