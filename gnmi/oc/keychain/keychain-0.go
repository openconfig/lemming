/*
Package keychain is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by ygnmi version: v0.3.1: (ygot: v0.25.2)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package keychain

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Keychain_NamePath represents the /openconfig-keychain/keychains/keychain/state/name YANG schema element.
type Keychain_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_NamePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/state/name YANG schema element.
type Keychain_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *KeychainPath) State() ygnmi.SingletonQuery[*oc.Keychain] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.Keychain](
		"Keychain",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *KeychainPathAny) State() ygnmi.WildcardQuery[*oc.Keychain] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Keychain](
		"Keychain",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *KeychainPath) Config() ygnmi.ConfigQuery[*oc.Keychain] {
	return ygnmi.NewNonLeafConfigQuery[*oc.Keychain](
		"Keychain",
		false,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *KeychainPathAny) Config() ygnmi.WildcardQuery[*oc.Keychain] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Keychain](
		"Keychain",
		false,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/name"
//	Path from root:       "/keychains/keychain/state/name"
func (n *Keychain_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"Keychain",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Keychain).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/name"
//	Path from root:       "/keychains/keychain/state/name"
func (n *Keychain_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"Keychain",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Keychain).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/name"
//	Path from root:       "/keychains/keychain/config/name"
func (n *Keychain_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"Keychain",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Keychain).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/name"
//	Path from root:       "/keychains/keychain/config/name"
func (n *Keychain_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"Keychain",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Keychain).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/tolerance"
//	Path from root:       "/keychains/keychain/state/tolerance"
func (n *Keychain_TolerancePath) State() ygnmi.SingletonQuery[oc.Keychain_Tolerance_Union] {
	return ygnmi.NewLeafSingletonQuery[oc.Keychain_Tolerance_Union](
		"Keychain",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tolerance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Keychain_Tolerance_Union, bool) {
			ret := gs.(*oc.Keychain).Tolerance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/tolerance"
//	Path from root:       "/keychains/keychain/state/tolerance"
func (n *Keychain_TolerancePathAny) State() ygnmi.WildcardQuery[oc.Keychain_Tolerance_Union] {
	return ygnmi.NewLeafWildcardQuery[oc.Keychain_Tolerance_Union](
		"Keychain",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tolerance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Keychain_Tolerance_Union, bool) {
			ret := gs.(*oc.Keychain).Tolerance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/tolerance"
//	Path from root:       "/keychains/keychain/config/tolerance"
func (n *Keychain_TolerancePath) Config() ygnmi.ConfigQuery[oc.Keychain_Tolerance_Union] {
	return ygnmi.NewLeafConfigQuery[oc.Keychain_Tolerance_Union](
		"Keychain",
		false,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tolerance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Keychain_Tolerance_Union, bool) {
			ret := gs.(*oc.Keychain).Tolerance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/tolerance"
//	Path from root:       "/keychains/keychain/config/tolerance"
func (n *Keychain_TolerancePathAny) Config() ygnmi.WildcardQuery[oc.Keychain_Tolerance_Union] {
	return ygnmi.NewLeafWildcardQuery[oc.Keychain_Tolerance_Union](
		"Keychain",
		false,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tolerance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Keychain_Tolerance_Union, bool) {
			ret := gs.(*oc.Keychain).Tolerance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Keychain_TolerancePath represents the /openconfig-keychain/keychains/keychain/state/tolerance YANG schema element.
type Keychain_TolerancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_TolerancePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/state/tolerance YANG schema element.
type Keychain_TolerancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// KeychainPath represents the /openconfig-keychain/keychains/keychain YANG schema element.
type KeychainPath struct {
	*ygnmi.NodePath
}

// KeychainPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain YANG schema element.
type KeychainPathAny struct {
	*ygnmi.NodePath
}

// KeyAny (list): List of configured keys for the keychain.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "keys/key"
//	Path from root:       "/keychains/keychain/keys/key"
func (n *KeychainPath) KeyAny() *Keychain_KeyPathAny {
	return &Keychain_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// KeyAny (list): List of configured keys for the keychain.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "keys/key"
//	Path from root:       "/keychains/keychain/keys/key"
func (n *KeychainPathAny) KeyAny() *Keychain_KeyPathAny {
	return &Keychain_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// Key (list): List of configured keys for the keychain.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "keys/key"
//	Path from root:       "/keychains/keychain/keys/key"
//
//	KeyId: uint64
func (n *KeychainPath) Key(KeyId uint64) *Keychain_KeyPath {
	return &Keychain_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// Key (list): List of configured keys for the keychain.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "keys/key"
//	Path from root:       "/keychains/keychain/keys/key"
//
//	KeyId: uint64
func (n *KeychainPathAny) Key(KeyId uint64) *Keychain_KeyPathAny {
	return &Keychain_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// Name (leaf): Keychain name.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/name"
//	Path from root:       "/keychains/keychain/*/name"
func (n *KeychainPath) Name() *Keychain_NamePath {
	return &Keychain_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Name (leaf): Keychain name.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/name"
//	Path from root:       "/keychains/keychain/*/name"
func (n *KeychainPathAny) Name() *Keychain_NamePathAny {
	return &Keychain_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Tolerance (leaf): Tolerance (overlap time) that a receive key should be accepted.  May be
// expressed as range in seconds, or using the FOREVER value to indicate
// that the key does not expire.  The default value should be 0, i.e., no
// tolerance.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/tolerance"
//	Path from root:       "/keychains/keychain/*/tolerance"
func (n *KeychainPath) Tolerance() *Keychain_TolerancePath {
	return &Keychain_TolerancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tolerance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Tolerance (leaf): Tolerance (overlap time) that a receive key should be accepted.  May be
// expressed as range in seconds, or using the FOREVER value to indicate
// that the key does not expire.  The default value should be 0, i.e., no
// tolerance.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/tolerance"
//	Path from root:       "/keychains/keychain/*/tolerance"
func (n *KeychainPathAny) Tolerance() *Keychain_TolerancePathAny {
	return &Keychain_TolerancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tolerance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Keychain_Key_CryptoAlgorithmPath represents the /openconfig-keychain/keychains/keychain/keys/key/state/crypto-algorithm YANG schema element.
type Keychain_Key_CryptoAlgorithmPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_CryptoAlgorithmPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/state/crypto-algorithm YANG schema element.
type Keychain_Key_CryptoAlgorithmPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPath) State() ygnmi.SingletonQuery[*oc.Keychain_Key] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.Keychain_Key](
		"Keychain_Key",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPathAny) State() ygnmi.WildcardQuery[*oc.Keychain_Key] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Keychain_Key](
		"Keychain_Key",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPath) Config() ygnmi.ConfigQuery[*oc.Keychain_Key] {
	return ygnmi.NewNonLeafConfigQuery[*oc.Keychain_Key](
		"Keychain_Key",
		false,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPathAny) Config() ygnmi.WildcardQuery[*oc.Keychain_Key] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Keychain_Key](
		"Keychain_Key",
		false,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/crypto-algorithm"
//	Path from root:       "/keychains/keychain/keys/key/state/crypto-algorithm"
func (n *Keychain_Key_CryptoAlgorithmPath) State() ygnmi.SingletonQuery[oc.E_KeychainTypes_CRYPTO_TYPE] {
	return ygnmi.NewLeafSingletonQuery[oc.E_KeychainTypes_CRYPTO_TYPE](
		"Keychain_Key",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "crypto-algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_CRYPTO_TYPE, bool) {
			ret := gs.(*oc.Keychain_Key).CryptoAlgorithm
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/crypto-algorithm"
//	Path from root:       "/keychains/keychain/keys/key/state/crypto-algorithm"
func (n *Keychain_Key_CryptoAlgorithmPathAny) State() ygnmi.WildcardQuery[oc.E_KeychainTypes_CRYPTO_TYPE] {
	return ygnmi.NewLeafWildcardQuery[oc.E_KeychainTypes_CRYPTO_TYPE](
		"Keychain_Key",
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "crypto-algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_CRYPTO_TYPE, bool) {
			ret := gs.(*oc.Keychain_Key).CryptoAlgorithm
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/crypto-algorithm"
//	Path from root:       "/keychains/keychain/keys/key/config/crypto-algorithm"
func (n *Keychain_Key_CryptoAlgorithmPath) Config() ygnmi.ConfigQuery[oc.E_KeychainTypes_CRYPTO_TYPE] {
	return ygnmi.NewLeafConfigQuery[oc.E_KeychainTypes_CRYPTO_TYPE](
		"Keychain_Key",
		false,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "crypto-algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_CRYPTO_TYPE, bool) {
			ret := gs.(*oc.Keychain_Key).CryptoAlgorithm
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/crypto-algorithm"
//	Path from root:       "/keychains/keychain/keys/key/config/crypto-algorithm"
func (n *Keychain_Key_CryptoAlgorithmPathAny) Config() ygnmi.WildcardQuery[oc.E_KeychainTypes_CRYPTO_TYPE] {
	return ygnmi.NewLeafWildcardQuery[oc.E_KeychainTypes_CRYPTO_TYPE](
		"Keychain_Key",
		false,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "crypto-algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_CRYPTO_TYPE, bool) {
			ret := gs.(*oc.Keychain_Key).CryptoAlgorithm
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/key-id"
//	Path from root:       "/keychains/keychain/keys/key/state/key-id"
func (n *Keychain_Key_KeyIdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Keychain_Key",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key).KeyId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/key-id"
//	Path from root:       "/keychains/keychain/keys/key/state/key-id"
func (n *Keychain_Key_KeyIdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key).KeyId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/key-id"
//	Path from root:       "/keychains/keychain/keys/key/config/key-id"
func (n *Keychain_Key_KeyIdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewLeafConfigQuery[uint64](
		"Keychain_Key",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key).KeyId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/key-id"
//	Path from root:       "/keychains/keychain/keys/key/config/key-id"
func (n *Keychain_Key_KeyIdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "key-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key).KeyId
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/keychains/keychain/keys/key/state/secret-key"
func (n *Keychain_Key_SecretKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"Keychain_Key",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Keychain_Key).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/secret-key"
//	Path from root:       "/keychains/keychain/keys/key/state/secret-key"
func (n *Keychain_Key_SecretKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"Keychain_Key",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Keychain_Key).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/keychains/keychain/keys/key/config/secret-key"
func (n *Keychain_Key_SecretKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"Keychain_Key",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Keychain_Key).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/secret-key"
//	Path from root:       "/keychains/keychain/keys/key/config/secret-key"
func (n *Keychain_Key_SecretKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"Keychain_Key",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "secret-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Keychain_Key).SecretKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Keychain_Key_KeyIdPath represents the /openconfig-keychain/keychains/keychain/keys/key/state/key-id YANG schema element.
type Keychain_Key_KeyIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_KeyIdPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/state/key-id YANG schema element.
type Keychain_Key_KeyIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_SecretKeyPath represents the /openconfig-keychain/keychains/keychain/keys/key/state/secret-key YANG schema element.
type Keychain_Key_SecretKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_SecretKeyPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/state/secret-key YANG schema element.
type Keychain_Key_SecretKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_KeyPath represents the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPath struct {
	*ygnmi.NodePath
}

// Keychain_KeyPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPathAny struct {
	*ygnmi.NodePath
}

// CryptoAlgorithm (leaf): Cryptographic algorithm associated with the key.  Note that not all cryptographic
// algorithms are available in all contexts (e.g., across different protocols).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/crypto-algorithm"
//	Path from root:       "/keychains/keychain/keys/key/*/crypto-algorithm"
func (n *Keychain_KeyPath) CryptoAlgorithm() *Keychain_Key_CryptoAlgorithmPath {
	return &Keychain_Key_CryptoAlgorithmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "crypto-algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// CryptoAlgorithm (leaf): Cryptographic algorithm associated with the key.  Note that not all cryptographic
// algorithms are available in all contexts (e.g., across different protocols).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/crypto-algorithm"
//	Path from root:       "/keychains/keychain/keys/key/*/crypto-algorithm"
func (n *Keychain_KeyPathAny) CryptoAlgorithm() *Keychain_Key_CryptoAlgorithmPathAny {
	return &Keychain_Key_CryptoAlgorithmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "crypto-algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// KeyId (leaf): Identifier for the key within the keychain.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/key-id"
//	Path from root:       "/keychains/keychain/keys/key/*/key-id"
func (n *Keychain_KeyPath) KeyId() *Keychain_Key_KeyIdPath {
	return &Keychain_Key_KeyIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// KeyId (leaf): Identifier for the key within the keychain.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/key-id"
//	Path from root:       "/keychains/keychain/keys/key/*/key-id"
func (n *Keychain_KeyPathAny) KeyId() *Keychain_Key_KeyIdPathAny {
	return &Keychain_Key_KeyIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// ReceiveLifetime (container): Specify the validity lifetime of the key in the receive direction.
// Some platforms may only support symmetric send and receive lifetimes,
// in which case the receive-lifetime is typically not specified.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "receive-lifetime"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime"
func (n *Keychain_KeyPath) ReceiveLifetime() *Keychain_Key_ReceiveLifetimePath {
	return &Keychain_Key_ReceiveLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"receive-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiveLifetime (container): Specify the validity lifetime of the key in the receive direction.
// Some platforms may only support symmetric send and receive lifetimes,
// in which case the receive-lifetime is typically not specified.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "receive-lifetime"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime"
func (n *Keychain_KeyPathAny) ReceiveLifetime() *Keychain_Key_ReceiveLifetimePathAny {
	return &Keychain_Key_ReceiveLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"receive-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): Authentication key supplied as an encrypted value.  The system should store and
// return the key in encrypted form.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/keychains/keychain/keys/key/*/secret-key"
func (n *Keychain_KeyPath) SecretKey() *Keychain_Key_SecretKeyPath {
	return &Keychain_Key_SecretKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SecretKey (leaf): Authentication key supplied as an encrypted value.  The system should store and
// return the key in encrypted form.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/keychains/keychain/keys/key/*/secret-key"
func (n *Keychain_KeyPathAny) SecretKey() *Keychain_Key_SecretKeyPathAny {
	return &Keychain_Key_SecretKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SendLifetime (container): Specifies the lifetime of the key for sending authentication
// information to the peer.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "send-lifetime"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime"
func (n *Keychain_KeyPath) SendLifetime() *Keychain_Key_SendLifetimePath {
	return &Keychain_Key_SendLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"send-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendLifetime (container): Specifies the lifetime of the key for sending authentication
// information to the peer.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "send-lifetime"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime"
func (n *Keychain_KeyPathAny) SendLifetime() *Keychain_Key_SendLifetimePathAny {
	return &Keychain_Key_SendLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"send-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Keychain_Key_ReceiveLifetime_EndTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/state/end-time YANG schema element.
type Keychain_Key_ReceiveLifetime_EndTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_ReceiveLifetime_EndTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/state/end-time YANG schema element.
type Keychain_Key_ReceiveLifetime_EndTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_Key_ReceiveLifetimePath) State() ygnmi.SingletonQuery[*oc.Keychain_Key_ReceiveLifetime] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.Keychain_Key_ReceiveLifetime](
		"Keychain_Key_ReceiveLifetime",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_Key_ReceiveLifetimePathAny) State() ygnmi.WildcardQuery[*oc.Keychain_Key_ReceiveLifetime] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Keychain_Key_ReceiveLifetime](
		"Keychain_Key_ReceiveLifetime",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_Key_ReceiveLifetimePath) Config() ygnmi.ConfigQuery[*oc.Keychain_Key_ReceiveLifetime] {
	return ygnmi.NewNonLeafConfigQuery[*oc.Keychain_Key_ReceiveLifetime](
		"Keychain_Key_ReceiveLifetime",
		false,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_Key_ReceiveLifetimePathAny) Config() ygnmi.WildcardQuery[*oc.Keychain_Key_ReceiveLifetime] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Keychain_Key_ReceiveLifetime](
		"Keychain_Key_ReceiveLifetime",
		false,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/state/end-time"
func (n *Keychain_Key_ReceiveLifetime_EndTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/state/end-time"
func (n *Keychain_Key_ReceiveLifetime_EndTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/config/end-time"
func (n *Keychain_Key_ReceiveLifetime_EndTimePath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewLeafConfigQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/config/end-time"
func (n *Keychain_Key_ReceiveLifetime_EndTimePathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/start-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/state/start-time"
func (n *Keychain_Key_ReceiveLifetime_StartTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/start-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/state/start-time"
func (n *Keychain_Key_ReceiveLifetime_StartTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/start-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/config/start-time"
func (n *Keychain_Key_ReceiveLifetime_StartTimePath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewLeafConfigQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/start-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/config/start-time"
func (n *Keychain_Key_ReceiveLifetime_StartTimePathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Keychain_Key_ReceiveLifetime_StartTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/state/start-time YANG schema element.
type Keychain_Key_ReceiveLifetime_StartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_ReceiveLifetime_StartTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/state/start-time YANG schema element.
type Keychain_Key_ReceiveLifetime_StartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_ReceiveLifetimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime YANG schema element.
type Keychain_Key_ReceiveLifetimePath struct {
	*ygnmi.NodePath
}

// Keychain_Key_ReceiveLifetimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime YANG schema element.
type Keychain_Key_ReceiveLifetimePathAny struct {
	*ygnmi.NodePath
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/*/end-time"
func (n *Keychain_Key_ReceiveLifetimePath) EndTime() *Keychain_Key_ReceiveLifetime_EndTimePath {
	return &Keychain_Key_ReceiveLifetime_EndTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/*/end-time"
func (n *Keychain_Key_ReceiveLifetimePathAny) EndTime() *Keychain_Key_ReceiveLifetime_EndTimePathAny {
	return &Keychain_Key_ReceiveLifetime_EndTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/start-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/*/start-time"
func (n *Keychain_Key_ReceiveLifetimePath) StartTime() *Keychain_Key_ReceiveLifetime_StartTimePath {
	return &Keychain_Key_ReceiveLifetime_StartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/start-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/*/start-time"
func (n *Keychain_Key_ReceiveLifetimePathAny) StartTime() *Keychain_Key_ReceiveLifetime_StartTimePathAny {
	return &Keychain_Key_ReceiveLifetime_StartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Keychain_Key_SendLifetime_EndTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/state/end-time YANG schema element.
type Keychain_Key_SendLifetime_EndTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_SendLifetime_EndTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/state/end-time YANG schema element.
type Keychain_Key_SendLifetime_EndTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_Key_SendLifetimePath) State() ygnmi.SingletonQuery[*oc.Keychain_Key_SendLifetime] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.Keychain_Key_SendLifetime](
		"Keychain_Key_SendLifetime",
		true,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_Key_SendLifetimePathAny) State() ygnmi.WildcardQuery[*oc.Keychain_Key_SendLifetime] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Keychain_Key_SendLifetime](
		"Keychain_Key_SendLifetime",
		true,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_Key_SendLifetimePath) Config() ygnmi.ConfigQuery[*oc.Keychain_Key_SendLifetime] {
	return ygnmi.NewNonLeafConfigQuery[*oc.Keychain_Key_SendLifetime](
		"Keychain_Key_SendLifetime",
		false,
		n,
		nil,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_Key_SendLifetimePathAny) Config() ygnmi.WildcardQuery[*oc.Keychain_Key_SendLifetime] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.Keychain_Key_SendLifetime](
		"Keychain_Key_SendLifetime",
		false,
		n,
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/end-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/state/end-time"
func (n *Keychain_Key_SendLifetime_EndTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Keychain_Key_SendLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/end-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/state/end-time"
func (n *Keychain_Key_SendLifetime_EndTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key_SendLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/end-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/config/end-time"
func (n *Keychain_Key_SendLifetime_EndTimePath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewLeafConfigQuery[uint64](
		"Keychain_Key_SendLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/end-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/config/end-time"
func (n *Keychain_Key_SendLifetime_EndTimePathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key_SendLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/send-and-receive"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/state/send-and-receive"
func (n *Keychain_Key_SendLifetime_SendAndReceivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewLeafSingletonQuery[bool](
		"Keychain_Key_SendLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "send-and-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).SendAndReceive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/send-and-receive"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/state/send-and-receive"
func (n *Keychain_Key_SendLifetime_SendAndReceivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewLeafWildcardQuery[bool](
		"Keychain_Key_SendLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "send-and-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).SendAndReceive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/send-and-receive"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/config/send-and-receive"
func (n *Keychain_Key_SendLifetime_SendAndReceivePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewLeafConfigQuery[bool](
		"Keychain_Key_SendLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "send-and-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).SendAndReceive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/send-and-receive"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/config/send-and-receive"
func (n *Keychain_Key_SendLifetime_SendAndReceivePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewLeafWildcardQuery[bool](
		"Keychain_Key_SendLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "send-and-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).SendAndReceive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/start-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/state/start-time"
func (n *Keychain_Key_SendLifetime_StartTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewLeafSingletonQuery[uint64](
		"Keychain_Key_SendLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/start-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/state/start-time"
func (n *Keychain_Key_SendLifetime_StartTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key_SendLifetime",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/start-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/config/start-time"
func (n *Keychain_Key_SendLifetime_StartTimePath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewLeafConfigQuery[uint64](
		"Keychain_Key_SendLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/start-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/config/start-time"
func (n *Keychain_Key_SendLifetime_StartTimePathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewLeafWildcardQuery[uint64](
		"Keychain_Key_SendLifetime",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "start-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_SendLifetime).StartTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_SendLifetime) },
		&ytypes.Schema{
			Root:       &oc.Root{},
			SchemaTree: oc.SchemaTree,
			Unmarshal:  oc.Unmarshal,
		},
	)
}

// Keychain_Key_SendLifetime_SendAndReceivePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/state/send-and-receive YANG schema element.
type Keychain_Key_SendLifetime_SendAndReceivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_SendLifetime_SendAndReceivePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/state/send-and-receive YANG schema element.
type Keychain_Key_SendLifetime_SendAndReceivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_SendLifetime_StartTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/state/start-time YANG schema element.
type Keychain_Key_SendLifetime_StartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_SendLifetime_StartTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/state/start-time YANG schema element.
type Keychain_Key_SendLifetime_StartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_SendLifetimePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime YANG schema element.
type Keychain_Key_SendLifetimePath struct {
	*ygnmi.NodePath
}

// Keychain_Key_SendLifetimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime YANG schema element.
type Keychain_Key_SendLifetimePathAny struct {
	*ygnmi.NodePath
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/end-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/*/end-time"
func (n *Keychain_Key_SendLifetimePath) EndTime() *Keychain_Key_SendLifetime_EndTimePath {
	return &Keychain_Key_SendLifetime_EndTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/end-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/*/end-time"
func (n *Keychain_Key_SendLifetimePathAny) EndTime() *Keychain_Key_SendLifetime_EndTimePathAny {
	return &Keychain_Key_SendLifetime_EndTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SendAndReceive (leaf): When this is set to true (the default value), the specified
// send lifetime is also used in the receive direction.  When set
// to false, the device should use the specified receive-lifetime
// for the receive direction (asymmetric mode).  If send-and-receive
// is false, and the device does not support asymmetric configuration,
// the config should be rejected as unsupported.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/send-and-receive"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/*/send-and-receive"
func (n *Keychain_Key_SendLifetimePath) SendAndReceive() *Keychain_Key_SendLifetime_SendAndReceivePath {
	return &Keychain_Key_SendLifetime_SendAndReceivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "send-and-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SendAndReceive (leaf): When this is set to true (the default value), the specified
// send lifetime is also used in the receive direction.  When set
// to false, the device should use the specified receive-lifetime
// for the receive direction (asymmetric mode).  If send-and-receive
// is false, and the device does not support asymmetric configuration,
// the config should be rejected as unsupported.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/send-and-receive"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/*/send-and-receive"
func (n *Keychain_Key_SendLifetimePathAny) SendAndReceive() *Keychain_Key_SendLifetime_SendAndReceivePathAny {
	return &Keychain_Key_SendLifetime_SendAndReceivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "send-and-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/start-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/*/start-time"
func (n *Keychain_Key_SendLifetimePath) StartTime() *Keychain_Key_SendLifetime_StartTimePath {
	return &Keychain_Key_SendLifetime_StartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/start-time"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime/*/start-time"
func (n *Keychain_Key_SendLifetimePathAny) StartTime() *Keychain_Key_SendLifetime_StartTimePathAny {
	return &Keychain_Key_SendLifetime_StartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}
