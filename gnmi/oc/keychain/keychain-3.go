/*
Package keychain is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package keychain

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Keychain_KeyPath represents the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPath struct {
	*ygnmi.NodePath
}

// Keychain_KeyPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPathAny struct {
	*ygnmi.NodePath
}

// Keychain_KeyPathMap represents the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPathMap struct {
	*ygnmi.NodePath
}

// Keychain_KeyPathMapAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPathMapAny struct {
	*ygnmi.NodePath
}

// CryptoAlgorithm (leaf): Cryptographic algorithm associated with the key.  Note that not all cryptographic
// algorithms are available in all contexts (e.g., across different protocols).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/crypto-algorithm"
//	Path from root:       "/keychains/keychain/keys/key/*/crypto-algorithm"
func (n *Keychain_KeyPath) CryptoAlgorithm() *Keychain_Key_CryptoAlgorithmPath {
	ps := &Keychain_Key_CryptoAlgorithmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "crypto-algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CryptoAlgorithm (leaf): Cryptographic algorithm associated with the key.  Note that not all cryptographic
// algorithms are available in all contexts (e.g., across different protocols).
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/crypto-algorithm"
//	Path from root:       "/keychains/keychain/keys/key/*/crypto-algorithm"
func (n *Keychain_KeyPathAny) CryptoAlgorithm() *Keychain_Key_CryptoAlgorithmPathAny {
	ps := &Keychain_Key_CryptoAlgorithmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "crypto-algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyId (leaf): Identifier for the key within the keychain.  Note that the
// hex-string type is deprecated and will be removed from a future
// version of this model. Implementations should transition to using
// the hex-string-prefixed type.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/key-id"
//	Path from root:       "/keychains/keychain/keys/key/*/key-id"
func (n *Keychain_KeyPath) KeyId() *Keychain_Key_KeyIdPath {
	ps := &Keychain_Key_KeyIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// KeyId (leaf): Identifier for the key within the keychain.  Note that the
// hex-string type is deprecated and will be removed from a future
// version of this model. Implementations should transition to using
// the hex-string-prefixed type.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/key-id"
//	Path from root:       "/keychains/keychain/keys/key/*/key-id"
func (n *Keychain_KeyPathAny) KeyId() *Keychain_Key_KeyIdPathAny {
	ps := &Keychain_Key_KeyIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceiveLifetime (container): Specify the validity lifetime of the key in the receive direction.
// Some platforms may only support symmetric send and receive lifetimes,
// in which case the receive-lifetime is typically not specified.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "receive-lifetime"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime"
func (n *Keychain_KeyPath) ReceiveLifetime() *Keychain_Key_ReceiveLifetimePath {
	ps := &Keychain_Key_ReceiveLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"receive-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ReceiveLifetime (container): Specify the validity lifetime of the key in the receive direction.
// Some platforms may only support symmetric send and receive lifetimes,
// in which case the receive-lifetime is typically not specified.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "receive-lifetime"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime"
func (n *Keychain_KeyPathAny) ReceiveLifetime() *Keychain_Key_ReceiveLifetimePathAny {
	ps := &Keychain_Key_ReceiveLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"receive-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SecretKey (leaf): Authentication key supplied as an encrypted value.  The system should store and
// return the key in encrypted form.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/keychains/keychain/keys/key/*/secret-key"
func (n *Keychain_KeyPath) SecretKey() *Keychain_Key_SecretKeyPath {
	ps := &Keychain_Key_SecretKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecretKey (leaf): Authentication key supplied as an encrypted value.  The system should store and
// return the key in encrypted form.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "*/secret-key"
//	Path from root:       "/keychains/keychain/keys/key/*/secret-key"
func (n *Keychain_KeyPathAny) SecretKey() *Keychain_Key_SecretKeyPathAny {
	ps := &Keychain_Key_SecretKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secret-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SendLifetime (container): Specifies the lifetime of the key for sending authentication
// information to the peer.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "send-lifetime"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime"
func (n *Keychain_KeyPath) SendLifetime() *Keychain_Key_SendLifetimePath {
	ps := &Keychain_Key_SendLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"send-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SendLifetime (container): Specifies the lifetime of the key for sending authentication
// information to the peer.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "send-lifetime"
//	Path from root:       "/keychains/keychain/keys/key/send-lifetime"
func (n *Keychain_KeyPathAny) SendLifetime() *Keychain_Key_SendLifetimePathAny {
	ps := &Keychain_Key_SendLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"send-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPath) State() ygnmi.SingletonQuery[*oc.Keychain_Key] {
	return ygnmi.NewSingletonQuery[*oc.Keychain_Key](
		"Keychain_Key",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPathAny) State() ygnmi.WildcardQuery[*oc.Keychain_Key] {
	return ygnmi.NewWildcardQuery[*oc.Keychain_Key](
		"Keychain_Key",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPath) Config() ygnmi.ConfigQuery[*oc.Keychain_Key] {
	return ygnmi.NewConfigQuery[*oc.Keychain_Key](
		"Keychain_Key",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPathAny) Config() ygnmi.WildcardQuery[*oc.Keychain_Key] {
	return ygnmi.NewWildcardQuery[*oc.Keychain_Key](
		"Keychain_Key",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPathMap) State() ygnmi.SingletonQuery[map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key] {
	return ygnmi.NewSingletonQuery[map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key](
		"Keychain",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key, bool) {
			ret := gs.(*oc.Keychain).Key
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-keychain:keys"},
			PostRelPath: []string{"openconfig-keychain:key"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPathMapAny) State() ygnmi.WildcardQuery[map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key] {
	return ygnmi.NewWildcardQuery[map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key](
		"Keychain",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key, bool) {
			ret := gs.(*oc.Keychain).Key
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-keychain:keys"},
			PostRelPath: []string{"openconfig-keychain:key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPathMap) Config() ygnmi.ConfigQuery[map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key] {
	return ygnmi.NewConfigQuery[map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key](
		"Keychain",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key, bool) {
			ret := gs.(*oc.Keychain).Key
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-keychain:keys"},
			PostRelPath: []string{"openconfig-keychain:key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Keychain_KeyPathMapAny) Config() ygnmi.WildcardQuery[map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key] {
	return ygnmi.NewWildcardQuery[map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key](
		"Keychain",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Keychain_Key_KeyId_Union]*oc.Keychain_Key, bool) {
			ret := gs.(*oc.Keychain).Key
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-keychain:keys"},
			PostRelPath: []string{"openconfig-keychain:key"},
		},
	)
}

// Keychain_Key_ReceiveLifetime_EndTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/state/end-time YANG schema element.
type Keychain_Key_ReceiveLifetime_EndTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Keychain_Key_ReceiveLifetime_EndTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/state/end-time YANG schema element.
type Keychain_Key_ReceiveLifetime_EndTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/state/end-time"
func (n *Keychain_Key_ReceiveLifetime_EndTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "state/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/state/end-time"
func (n *Keychain_Key_ReceiveLifetime_EndTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/config/end-time"
func (n *Keychain_Key_ReceiveLifetime_EndTimePath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-keychain"
//	Instantiating module: "openconfig-keychain"
//	Path from parent:     "config/end-time"
//	Path from root:       "/keychains/keychain/keys/key/receive-lifetime/config/end-time"
func (n *Keychain_Key_ReceiveLifetime_EndTimePathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Keychain_Key_ReceiveLifetime",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Keychain_Key_ReceiveLifetime).EndTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Keychain_Key_ReceiveLifetime) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
