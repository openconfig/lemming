/*
Package netinstisis is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package netinstisis

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-number YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-number YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adj-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-number"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adj-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).AdjNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adj-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-number"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adj-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).AdjNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-fails YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-fails YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-fails"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).AuthFails
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-fails"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).AuthFails
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-type-fails YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-type-fails YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-type-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-type-fails"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).AuthTypeFails
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-type-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-type-fails"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).AuthTypeFails
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/id-field-len-mismatches YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/id-field-len-mismatches YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id-field-len-mismatches"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/id-field-len-mismatches"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id-field-len-mismatches"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).IdFieldLenMismatches
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id-field-len-mismatches"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/id-field-len-mismatches"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id-field-len-mismatches"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).IdFieldLenMismatches
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/init-fails YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/init-fails YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/init-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/init-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "init-fails"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).InitFails
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/init-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/init-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "init-fails"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).InitFails
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/lan-dis-changes YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/lan-dis-changes YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lan-dis-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/lan-dis-changes"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lan-dis-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).LanDisChanges
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lan-dis-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/lan-dis-changes"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lan-dis-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).LanDisChanges
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/max-area-address-mismatches YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/max-area-address-mismatches YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-area-address-mismatches"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/max-area-address-mismatches"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-area-address-mismatches"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).MaxAreaAddressMismatches
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-area-address-mismatches"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/max-area-address-mismatches"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-area-address-mismatches"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).MaxAreaAddressMismatches
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/rejected-adj YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/rejected-adj YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/rejected-adj"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/rejected-adj"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rejected-adj"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).RejectedAdj
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/rejected-adj"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/rejected-adj"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rejected-adj"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).RejectedAdj
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny struct {
	*ygnmi.NodePath
}

// AdjChanges (leaf): Number of times an adjacency state change has occurred on this circuit.
// MIB Entry: CircAdjChanges.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adj-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-changes"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) AdjChanges() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adj-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjChanges (leaf): Number of times an adjacency state change has occurred on this circuit.
// MIB Entry: CircAdjChanges.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adj-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-changes"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) AdjChanges() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adj-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjNumber (leaf): Number of adjacencies on this circuit.
// MIB Entry: CircNumAdj.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adj-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-number"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) AdjNumber() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adj-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjNumber (leaf): Number of adjacencies on this circuit.
// MIB Entry: CircNumAdj.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adj-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-number"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) AdjNumber() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adj-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthFails (leaf): Number of times an IS-IS control PDU with the correct auth type has
// failed to pass authentication validation. MIB Entry: CircAuthFails.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) AuthFails() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auth-fails"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthFails (leaf): Number of times an IS-IS control PDU with the correct auth type has
// failed to pass authentication validation. MIB Entry: CircAuthFails.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) AuthFails() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthFailsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auth-fails"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthTypeFails (leaf): Number of times an IS-IS control PDU with an auth type field different
// from that for this system has been received. MIB Entry:
// CircAuthTypeFails.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-type-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) AuthTypeFails() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auth-type-fails"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthTypeFails (leaf): Number of times an IS-IS control PDU with an auth type field different
// from that for this system has been received. MIB Entry:
// CircAuthTypeFails.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/auth-type-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) AuthTypeFails() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AuthTypeFailsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auth-type-fails"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IdFieldLenMismatches (leaf): Number of times an IS-IS control PDU with an ID field length different
// from that for this system has been received.
// MIB Entry: CircIDFieldLenMismatches.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id-field-len-mismatches"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/id-field-len-mismatches"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) IdFieldLenMismatches() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id-field-len-mismatches"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IdFieldLenMismatches (leaf): Number of times an IS-IS control PDU with an ID field length different
// from that for this system has been received.
// MIB Entry: CircIDFieldLenMismatches.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id-field-len-mismatches"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/id-field-len-mismatches"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) IdFieldLenMismatches() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_IdFieldLenMismatchesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id-field-len-mismatches"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InitFails (leaf): Number of times initialization of this circuit has failed. This counts
// events such as PPP NCP failures. MIB Entry: CircInitFails.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/init-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/init-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) InitFails() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "init-fails"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InitFails (leaf): Number of times initialization of this circuit has failed. This counts
// events such as PPP NCP failures. MIB Entry: CircInitFails.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/init-fails"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/init-fails"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) InitFails() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_InitFailsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "init-fails"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LanDisChanges (leaf): Number of times the Designated IS has changed on this circuit at this
// level. If the circuit is point to point, this count is zero. MIB Entry:
// CircLANDesISChanges.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lan-dis-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/lan-dis-changes"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) LanDisChanges() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lan-dis-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LanDisChanges (leaf): Number of times the Designated IS has changed on this circuit at this
// level. If the circuit is point to point, this count is zero. MIB Entry:
// CircLANDesISChanges.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lan-dis-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/lan-dis-changes"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) LanDisChanges() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_LanDisChangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lan-dis-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxAreaAddressMismatches (leaf): Number of times an IS-IS control PDU with a max area address field
// different from that for this system has been received. MIB Entry:
// CircMaxAreaAddrMismatches.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-area-address-mismatches"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/max-area-address-mismatches"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) MaxAreaAddressMismatches() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-area-address-mismatches"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxAreaAddressMismatches (leaf): Number of times an IS-IS control PDU with a max area address field
// different from that for this system has been received. MIB Entry:
// CircMaxAreaAddrMismatches.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-area-address-mismatches"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/max-area-address-mismatches"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) MaxAreaAddressMismatches() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_MaxAreaAddressMismatchesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-area-address-mismatches"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RejectedAdj (leaf): Number of times an adjacency has been rejected on this circuit. MIB
// Entry: CircRejAdjs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/rejected-adj"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/rejected-adj"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) RejectedAdj() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rejected-adj"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RejectedAdj (leaf): Number of times an adjacency has been rejected on this circuit. MIB
// Entry: CircRejAdjs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/rejected-adj"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/rejected-adj"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) RejectedAdj() *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCounters_RejectedAdjPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "rejected-adj"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/desired-minimum-tx-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/desired-minimum-tx-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/config/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/config/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "desired-minimum-tx-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).DesiredMinimumTxInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/detection-multiplier YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/detection-multiplier YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/detection-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/detection-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/config/detection-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/config/detection-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detection-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).DetectionMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/required-minimum-receive YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/required-minimum-receive YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/required-minimum-receive"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/state/required-minimum-receive"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/config/required-minimum-receive"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/config/required-minimum-receive"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "required-minimum-receive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd).RequiredMinimumReceive
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny struct {
	*ygnmi.NodePath
}

// DesiredMinimumTxInterval (leaf): The minimum interval between transmission of BFD control
// packets that the operator desires. This value is advertised to
// the peer, however the actual interval used is specified by
// taking the maximum of desired-minimum-tx-interval and the
// value of the remote required-minimum-receive interval value.
// This value is specified as an integer number of microseconds.
// The value 0 is reserved and cannot be used.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/*/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPath) DesiredMinimumTxInterval() *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "desired-minimum-tx-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DesiredMinimumTxInterval (leaf): The minimum interval between transmission of BFD control
// packets that the operator desires. This value is advertised to
// the peer, however the actual interval used is specified by
// taking the maximum of desired-minimum-tx-interval and the
// value of the remote required-minimum-receive interval value.
// This value is specified as an integer number of microseconds.
// The value 0 is reserved and cannot be used.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/desired-minimum-tx-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/*/desired-minimum-tx-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny) DesiredMinimumTxInterval() *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfd_DesiredMinimumTxIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "desired-minimum-tx-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectionMultiplier (leaf): The number of packets that must be missed to declare this
// session as down. The detection interval for the BFD session
// is calculated by multiplying the value of the negotiated
// transmission interval by this value.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/*/detection-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPath) DetectionMultiplier() *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detection-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectionMultiplier (leaf): The number of packets that must be missed to declare this
// session as down. The detection interval for the BFD session
// is calculated by multiplying the value of the negotiated
// transmission interval by this value.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detection-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/*/detection-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny) DetectionMultiplier() *NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfd_DetectionMultiplierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detection-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPath) Enabled() *NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, BFD is used to detect the
// liveliness of the remote peer or next-hop.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny) Enabled() *NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfd_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequiredMinimumReceive (leaf): The minimum interval between received BFD control packets that
// this system should support. This value is advertised to the
// remote peer to indicate the maximum frequency (i.e., minimum
// inter-packet interval) between BFD control packets that is
// acceptable to the local system.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/*/required-minimum-receive"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPath) RequiredMinimumReceive() *NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "required-minimum-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RequiredMinimumReceive (leaf): The minimum interval between received BFD control packets that
// this system should support. This value is advertised to the
// remote peer to indicate the maximum frequency (i.e., minimum
// inter-packet interval) between BFD control packets that is
// acceptable to the local system.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/required-minimum-receive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd/*/required-minimum-receive"
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny) RequiredMinimumReceive() *NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfd_RequiredMinimumReceivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "required-minimum-receive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_EnableBfd](
		"NetworkInstance_Protocol_Isis_Interface_EnableBfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state/interface-time-expirations YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state/interface-time-expirations YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-time-expirations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart).InterfaceTimeExpirations
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-time-expirations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart).InterfaceTimeExpirations
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/config/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPath) Config() ygnmi.ConfigQuery[int64] {
	return ygnmi.NewConfigQuery[int64](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-time-expirations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart).InterfaceTimeExpirations
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/config/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPathAny) Config() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-time-expirations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart).InterfaceTimeExpirations
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state/interface-timer YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state/interface-timer YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart).InterfaceTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/state/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart).InterfaceTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/config/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart).InterfaceTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/config/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart).InterfaceTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_GracefulRestartPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_GracefulRestartPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_GracefulRestartPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_GracefulRestartPathAny struct {
	*ygnmi.NodePath
}

// InterfaceTimeExpirations (leaf): Number of times T1 expires before IIH without Restart TLV's RR flag
// set is sent. That is GR helper is not supported by adjacents
// Inermediate System
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/*/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPath) InterfaceTimeExpirations() *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-time-expirations"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTimeExpirations (leaf): Number of times T1 expires before IIH without Restart TLV's RR flag
// set is sent. That is GR helper is not supported by adjacents
// Inermediate System
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/*/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPathAny) InterfaceTimeExpirations() *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimeExpirationsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-time-expirations"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTimer (leaf): Value of RFC5306/RFC8706 T1 timer
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/*/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPath) InterfaceTimer() *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTimer (leaf): Value of RFC5306/RFC8706 T1 timer
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart/*/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPathAny) InterfaceTimer() *NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_GracefulRestart_InterfaceTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Interface_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPath) Interface() *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Isis_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/level-number YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/level-number YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/level-number"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).LevelNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/level-number"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).LevelNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/config/level-number"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).LevelNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/config/level-number"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).LevelNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PassivePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/passive YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PassivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PassivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/passive YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PassivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PassivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "passive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Passive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PassivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "passive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Passive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/config/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PassivePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "passive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Passive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/config/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PassivePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "passive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Passive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PriorityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/priority YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/priority YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/state/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/config/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/config/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_LevelPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_LevelPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_LevelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_LevelPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_LevelPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_LevelPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_LevelPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_LevelPathMapAny struct {
	*ygnmi.NodePath
}

// AdjacencyAny (list): List of the local system's IS-IS adjacencies.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacencies/adjacency"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) AdjacencyAny() *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacencies", "adjacency"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// AdjacencyAny (list): List of the local system's IS-IS adjacencies.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacencies/adjacency"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) AdjacencyAny() *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacencies", "adjacency"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// Adjacency (list): List of the local system's IS-IS adjacencies.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacencies/adjacency"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency"
//
//	SystemId: string
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) Adjacency(SystemId string) *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacencies", "adjacency"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// Adjacency (list): List of the local system's IS-IS adjacencies.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacencies/adjacency"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency"
//
//	SystemId: string
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) Adjacency(SystemId string) *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacencies", "adjacency"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// AdjacencyMap (list): List of the local system's IS-IS adjacencies.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacencies/adjacency"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) AdjacencyMap() *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMap {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacencies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdjacencyMap (list): List of the local system's IS-IS adjacencies.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacencies/adjacency"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) AdjacencyMap() *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacencies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AfAny (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) AfAny() *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": "*", "safi-name": "*"},
			n,
		),
	}
	return ps
}

// AfAny (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) AfAny() *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": "*", "safi-name": "*"},
			n,
		),
	}
	return ps
}

// WithAfiName sets NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny's key "afi-name" to the specified value.
// AfiName: oc.E_IsisTypes_AFI_TYPE
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny) WithAfiName(AfiName oc.E_IsisTypes_AFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny {
	ygnmi.ModifyKey(n.NodePath, "afi-name", AfiName)
	return n
}

// WithSafiName sets NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny's key "safi-name" to the specified value.
// SafiName: oc.E_IsisTypes_SAFI_TYPE
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny) WithSafiName(SafiName oc.E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny {
	ygnmi.ModifyKey(n.NodePath, "safi-name", SafiName)
	return n
}

// Af (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af"
//
//	AfiName: oc.E_IsisTypes_AFI_TYPE
//	SafiName: oc.E_IsisTypes_SAFI_TYPE
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) Af(AfiName oc.E_IsisTypes_AFI_TYPE, SafiName oc.E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_Level_AfPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": AfiName, "safi-name": SafiName},
			n,
		),
	}
	return ps
}

// Af (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af"
//
//	AfiName: oc.E_IsisTypes_AFI_TYPE
//	SafiName: oc.E_IsisTypes_SAFI_TYPE
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) Af(AfiName oc.E_IsisTypes_AFI_TYPE, SafiName oc.E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": AfiName, "safi-name": SafiName},
			n,
		),
	}
	return ps
}

// AfMap (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) AfMap() *NetworkInstance_Protocol_Isis_Interface_Level_AfPathMap {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AfPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AfMap (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) AfMap() *NetworkInstance_Protocol_Isis_Interface_Level_AfPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_AfPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) Enabled() *NetworkInstance_Protocol_Isis_Interface_Level_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) Enabled() *NetworkInstance_Protocol_Isis_Interface_Level_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloAuthentication (container): This container defines ISIS authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-authentication"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) HelloAuthentication() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HelloAuthentication (container): This container defines ISIS authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-authentication"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) HelloAuthentication() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LevelNumber (leaf): ISIS level number(level-1, level-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/*/level-number"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) LevelNumber() *NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LevelNumber (leaf): ISIS level number(level-1, level-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/*/level-number"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) LevelNumber() *NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_LevelNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketCounters (container): This container defines ISIS interface packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packet-counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) PacketCounters() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packet-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PacketCounters (container): This container defines ISIS interface packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packet-counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) PacketCounters() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packet-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Passive (leaf): ISIS passive interface admin enable/disable function.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/*/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) Passive() *NetworkInstance_Protocol_Isis_Interface_Level_PassivePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PassivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "passive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Passive (leaf): ISIS passive interface admin enable/disable function.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/*/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) Passive() *NetworkInstance_Protocol_Isis_Interface_Level_PassivePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PassivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "passive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): ISIS neighbor priority(LAN hello PDU only).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/*/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) Priority() *NetworkInstance_Protocol_Isis_Interface_Level_PriorityPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): ISIS neighbor priority(LAN hello PDU only).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/*/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) Priority() *NetworkInstance_Protocol_Isis_Interface_Level_PriorityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timers (container): This container defines ISIS timers.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "timers"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) Timers() *NetworkInstance_Protocol_Isis_Interface_Level_TimersPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_TimersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Timers (container): This container defines ISIS timers.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "timers"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers"
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) Timers() *NetworkInstance_Protocol_Isis_Interface_Level_TimersPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_TimersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Level
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:levels"},
			PostRelPath: []string{"openconfig-network-instance:level"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Level
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:levels"},
			PostRelPath: []string{"openconfig-network-instance:level"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Level
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:levels"},
			PostRelPath: []string{"openconfig-network-instance:level"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_LevelPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Interface_Level, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Level
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:levels"},
			PostRelPath: []string{"openconfig-network-instance:level"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-state"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_IsisInterfaceAdjState] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_IsisInterfaceAdjState](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacency-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_IsisInterfaceAdjState, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).AdjacencyState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-state"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_IsisInterfaceAdjState] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_IsisInterfaceAdjState](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacency-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_IsisInterfaceAdjState, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).AdjacencyState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).AdjacencyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).AdjacencyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/area-address YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/area-address YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/area-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/area-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "area-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).AreaAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/area-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/area-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "area-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).AreaAddress
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dis-system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dis-system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).DisSystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dis-system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dis-system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).DisSystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-extended-circuit-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-extended-circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).LocalExtendedCircuitId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-extended-circuit-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-extended-circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).LocalExtendedCircuitId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multi-topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multi-topology"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).MultiTopology
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multi-topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multi-topology"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).MultiTopology
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-circuit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborCircuitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-circuit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborCircuitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-extended-circuit-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-extended-circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborExtendedCircuitId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-extended-circuit-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-extended-circuit-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborExtendedCircuitId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-ipv4-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborIpv4Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-ipv4-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborIpv4Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-ipv6-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborIpv6Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-ipv6-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborIpv6Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-snpa"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-snpa"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborSnpa
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-snpa"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-snpa"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).NeighborSnpa
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nlpid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPath) State() ygnmi.SingletonQuery[[]oc.E_Adjacency_Nlpid] {
	return ygnmi.NewSingletonQuery[[]oc.E_Adjacency_Nlpid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nlpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Adjacency_Nlpid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).Nlpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nlpid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPathAny) State() ygnmi.WildcardQuery[[]oc.E_Adjacency_Nlpid] {
	return ygnmi.NewWildcardQuery[[]oc.E_Adjacency_Nlpid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nlpid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Adjacency_Nlpid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).Nlpid
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/priority YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/priority YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).Priority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-status"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).RestartStatus
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-status"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).RestartStatus
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-support"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-support"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).RestartSupport
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-support"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-support"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).RestartSupport
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-suppress"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).RestartSuppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-suppress"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-suppress"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).RestartSuppress
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/topology YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/topology YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/topology"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPath) State() ygnmi.SingletonQuery[[]oc.E_IsisTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewSingletonQuery[[]oc.E_IsisTypes_AFI_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "topology"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_IsisTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).Topology
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/topology"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPathAny) State() ygnmi.WildcardQuery[[]oc.E_IsisTypes_AFI_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[[]oc.E_IsisTypes_AFI_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "topology"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_IsisTypes_AFI_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).Topology
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/up-timestamp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/up-timestamp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-timestamp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/up-timestamp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-timestamp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).UpTimestamp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-timestamp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/up-timestamp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-timestamp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency).UpTimestamp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMapAny struct {
	*ygnmi.NodePath
}

// AdjacencyState (leaf): P2P 3-way ISIS adjacency state(up, down, init, failed).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-state"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) AdjacencyState() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjacencyState (leaf): P2P 3-way ISIS adjacency state(up, down, init, failed).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-state"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-state"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) AdjacencyState() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjacencyType (leaf): Formed ISIS adjacency type(level-1, level-2, level-1-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) AdjacencyType() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjacencyType (leaf): Formed ISIS adjacency type(level-1, level-2, level-1-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/adjacency-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) AdjacencyType() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AdjacencyTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AreaAddress (leaf-list): List of ISIS area-address(es).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/area-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/area-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) AreaAddress() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "area-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AreaAddress (leaf-list): List of ISIS area-address(es).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/area-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/area-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) AreaAddress() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_AreaAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "area-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisSystemId (leaf): DIS System ID(LAN hello only).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dis-system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) DisSystemId() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dis-system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisSystemId (leaf): DIS System ID(LAN hello only).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dis-system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/dis-system-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) DisSystemId() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_DisSystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dis-system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalExtendedCircuitId (leaf): Local extended circuit ID.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-extended-circuit-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) LocalExtendedCircuitId() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-extended-circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalExtendedCircuitId (leaf): Local extended circuit ID.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-extended-circuit-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/local-extended-circuit-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) LocalExtendedCircuitId() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_LocalExtendedCircuitIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "local-extended-circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultiTopology (leaf): When set to true, ISIS multi-topology is supported.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multi-topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) MultiTopology() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multi-topology"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultiTopology (leaf): When set to true, ISIS multi-topology is supported.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multi-topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/multi-topology"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) MultiTopology() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_MultiTopologyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multi-topology"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborCircuitType (leaf): Received ISIS circuit type (level-1, level-2, level-1-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) NeighborCircuitType() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-circuit-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborCircuitType (leaf): Received ISIS circuit type (level-1, level-2, level-1-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-circuit-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) NeighborCircuitType() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborCircuitTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-circuit-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborExtendedCircuitId (leaf): ISIS neighbor extended circuit ID.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-extended-circuit-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) NeighborExtendedCircuitId() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-extended-circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborExtendedCircuitId (leaf): ISIS neighbor extended circuit ID.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-extended-circuit-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-extended-circuit-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) NeighborExtendedCircuitId() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborExtendedCircuitIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-extended-circuit-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborIpv4Address (leaf): ISIS Neighbor IPv4 address.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-ipv4-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) NeighborIpv4Address() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborIpv4Address (leaf): ISIS Neighbor IPv4 address.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-ipv4-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv4-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) NeighborIpv4Address() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv4AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborIpv6Address (leaf): ISIS Neighbor IPv6 address.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-ipv6-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) NeighborIpv6Address() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborIpv6Address (leaf): ISIS Neighbor IPv6 address.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-ipv6-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-ipv6-address"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) NeighborIpv6Address() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborIpv6AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborSnpa (leaf): ISIS neighbor SNPA.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-snpa"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) NeighborSnpa() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-snpa"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborSnpa (leaf): ISIS neighbor SNPA.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-snpa"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/neighbor-snpa"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) NeighborSnpa() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NeighborSnpaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-snpa"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Nlpid (leaf-list): Supported Protocol. IPv4 is defined as (0xcc)
// and IPv6 - (0x8e). ISIS reference is TLV 129.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nlpid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) Nlpid() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nlpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Nlpid (leaf-list): Supported Protocol. IPv4 is defined as (0xcc)
// and IPv6 - (0x8e). ISIS reference is TLV 129.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nlpid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/nlpid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) Nlpid() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_NlpidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "nlpid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Priority of the neighboring IS(LAN Hello only).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) Priority() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): Priority of the neighboring IS(LAN Hello only).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/priority"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) Priority() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartStatus (leaf): When set to true, neighbor is being helped. The RR bit is used by a
// (re)starting router to signal to its neighbors that a (re)start is in
// progress.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-status"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) RestartStatus() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "restart-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartStatus (leaf): When set to true, neighbor is being helped. The RR bit is used by a
// (re)starting router to signal to its neighbors that a (re)start is in
// progress.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-status"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-status"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) RestartStatus() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "restart-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartSupport (leaf): When set to true, Graceful-restart signaling is supported.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-support"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) RestartSupport() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "restart-support"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartSupport (leaf): When set to true, Graceful-restart signaling is supported.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-support"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-support"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) RestartSupport() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSupportPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "restart-support"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartSuppress (leaf): When set to true, adjacency is not advertised. The SA bit is used by a
// starting router to  request that its neighbor suppress advertisement of
// the adjacency  to the starting router in the neighbor's LSPs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-suppress"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) RestartSuppress() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "restart-suppress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartSuppress (leaf): When set to true, adjacency is not advertised. The SA bit is used by a
// starting router to  request that its neighbor suppress advertisement of
// the adjacency  to the starting router in the neighbor's LSPs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-suppress"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/restart-suppress"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) RestartSuppress() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_RestartSuppressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "restart-suppress"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): ISIS neighbor system-id.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/*/system-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) SystemId() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): ISIS neighbor system-id.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/*/system-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) SystemId() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_SystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Topology (leaf-list): ISIS topology type support(ipv4-unicast, ipv6-unicast,
// ipv4-multicast, ipv6-multicast).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/topology"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) Topology() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "topology"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Topology (leaf-list): ISIS topology type support(ipv4-unicast, ipv6-unicast,
// ipv4-multicast, ipv6-multicast).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/topology"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) Topology() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_TopologyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "topology"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpTimestamp (leaf): Time at which the adjacency transitioned into the up state, expressed
// as number of nanoseconds since the Unix epoch (Jan 1, 1970 00:00:00
// UTC).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-timestamp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/up-timestamp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) UpTimestamp() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-timestamp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpTimestamp (leaf): Time at which the adjacency transitioned into the up state, expressed
// as number of nanoseconds since the Unix epoch (Jan 1, 1970 00:00:00
// UTC).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-timestamp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/adjacencies/adjacency/state/up-timestamp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) UpTimestamp() *NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Adjacency_UpTimestampPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-timestamp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency](
		"NetworkInstance_Protocol_Isis_Interface_Level_Adjacency",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Adjacency
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:adjacencies"},
			PostRelPath: []string{"openconfig-network-instance:adjacency"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AdjacencyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Adjacency, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Adjacency
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:adjacencies"},
			PostRelPath: []string{"openconfig-network-instance:adjacency"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/metric"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/metric"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/config/metric"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/config/metric"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/safi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/safi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/state/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/config/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/config/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_AfPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_AfPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_AfPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_AfPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_AfPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_AfPathMapAny struct {
	*ygnmi.NodePath
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPath) AfiName() *NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny) AfiName() *NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_AfiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPath) Enabled() *NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny) Enabled() *NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS metric value(default=10).
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/*/metric"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPath) Metric() *NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS metric value(default=10).
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/*/metric"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny) Metric() *NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SafiName (leaf): Subsequent address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/*/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPath) SafiName() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SafiName (leaf): Subsequent address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/*/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny) SafiName() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SafiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SegmentRouting (container): Configuration and operatioanl state parameters relating to segment
// routing for an interface within the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPath) SegmentRouting() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRouting (container): Configuration and operatioanl state parameters relating to segment
// routing for an interface within the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny) SegmentRouting() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_AfPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af](
		"NetworkInstance_Protocol_Isis_Interface_Level",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny struct {
	*ygnmi.NodePath
}

// AdjacencySidAny (list): An Adjacency SID to be advertised for the specified interface.
// The Adj-SID's identifier (the SID ID) must be unique, with flags
// specified indicating the parameters that should be set for the SID.
// Where a SID value is specified that is allocated from the SRGB, the
// global flag must be set by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) AdjacencySidAny() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids", "adjacency-sid"},
			map[string]interface{}{"neighbor": "*", "sid-id": "*"},
			n,
		),
	}
	return ps
}

// AdjacencySidAny (list): An Adjacency SID to be advertised for the specified interface.
// The Adj-SID's identifier (the SID ID) must be unique, with flags
// specified indicating the parameters that should be set for the SID.
// Where a SID value is specified that is allocated from the SRGB, the
// global flag must be set by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) AdjacencySidAny() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids", "adjacency-sid"},
			map[string]interface{}{"neighbor": "*", "sid-id": "*"},
			n,
		),
	}
	return ps
}

// WithNeighbor sets NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny's key "neighbor" to the specified value.
// Neighbor: string
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny) WithNeighbor(Neighbor string) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny {
	ygnmi.ModifyKey(n.NodePath, "neighbor", Neighbor)
	return n
}

// WithSidId sets NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny's key "sid-id" to the specified value.
// SidId: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum, oc.UnionString, oc.E_AdjacencySid_SidId_Enum]
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny) WithSidId(SidId oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny {
	ygnmi.ModifyKey(n.NodePath, "sid-id", SidId)
	return n
}

// AdjacencySid (list): An Adjacency SID to be advertised for the specified interface.
// The Adj-SID's identifier (the SID ID) must be unique, with flags
// specified indicating the parameters that should be set for the SID.
// Where a SID value is specified that is allocated from the SRGB, the
// global flag must be set by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid"
//
//	Neighbor: string
//	SidId: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum, oc.UnionString, oc.E_AdjacencySid_SidId_Enum]
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) AdjacencySid(Neighbor string, SidId oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids", "adjacency-sid"},
			map[string]interface{}{"neighbor": Neighbor, "sid-id": SidId},
			n,
		),
	}
	return ps
}

// AdjacencySid (list): An Adjacency SID to be advertised for the specified interface.
// The Adj-SID's identifier (the SID ID) must be unique, with flags
// specified indicating the parameters that should be set for the SID.
// Where a SID value is specified that is allocated from the SRGB, the
// global flag must be set by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid"
//
//	Neighbor: string
//	SidId: [oc.UnionUint32, oc.E_MplsTypes_MplsLabel_Enum, oc.UnionString, oc.E_AdjacencySid_SidId_Enum]
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) AdjacencySid(Neighbor string, SidId oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids", "adjacency-sid"},
			map[string]interface{}{"neighbor": Neighbor, "sid-id": SidId},
			n,
		),
	}
	return ps
}

// AdjacencySidMap (list): An Adjacency SID to be advertised for the specified interface.
// The Adj-SID's identifier (the SID ID) must be unique, with flags
// specified indicating the parameters that should be set for the SID.
// Where a SID value is specified that is allocated from the SRGB, the
// global flag must be set by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) AdjacencySidMap() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMap {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdjacencySidMap (list): An Adjacency SID to be advertised for the specified interface.
// The Adj-SID's identifier (the SID ID) must be unique, with flags
// specified indicating the parameters that should be set for the SID.
// Where a SID value is specified that is allocated from the SRGB, the
// global flag must be set by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) AdjacencySidMap() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FlexAlgoPrefixSidAny (list): IGP prefix segments allocated for Flexible Algorithms
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algo-prefix-sids/flex-algo-prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) FlexAlgoPrefixSidAny() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algo-prefix-sids", "flex-algo-prefix-sid"},
			map[string]interface{}{"prefix": "*", "flex-algo-id": "*"},
			n,
		),
	}
	return ps
}

// FlexAlgoPrefixSidAny (list): IGP prefix segments allocated for Flexible Algorithms
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algo-prefix-sids/flex-algo-prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) FlexAlgoPrefixSidAny() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algo-prefix-sids", "flex-algo-prefix-sid"},
			map[string]interface{}{"prefix": "*", "flex-algo-id": "*"},
			n,
		),
	}
	return ps
}

// WithPrefix sets NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny's key "prefix" to the specified value.
// Prefix: string
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny) WithPrefix(Prefix string) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny {
	ygnmi.ModifyKey(n.NodePath, "prefix", Prefix)
	return n
}

// WithFlexAlgoId sets NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny's key "flex-algo-id" to the specified value.
// FlexAlgoId: uint8
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny) WithFlexAlgoId(FlexAlgoId uint8) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny {
	ygnmi.ModifyKey(n.NodePath, "flex-algo-id", FlexAlgoId)
	return n
}

// FlexAlgoPrefixSid (list): IGP prefix segments allocated for Flexible Algorithms
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algo-prefix-sids/flex-algo-prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid"
//
//	Prefix: string
//	FlexAlgoId: uint8
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) FlexAlgoPrefixSid(Prefix string, FlexAlgoId uint8) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algo-prefix-sids", "flex-algo-prefix-sid"},
			map[string]interface{}{"prefix": Prefix, "flex-algo-id": FlexAlgoId},
			n,
		),
	}
	return ps
}

// FlexAlgoPrefixSid (list): IGP prefix segments allocated for Flexible Algorithms
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algo-prefix-sids/flex-algo-prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid"
//
//	Prefix: string
//	FlexAlgoId: uint8
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) FlexAlgoPrefixSid(Prefix string, FlexAlgoId uint8) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algo-prefix-sids", "flex-algo-prefix-sid"},
			map[string]interface{}{"prefix": Prefix, "flex-algo-id": FlexAlgoId},
			n,
		),
	}
	return ps
}

// FlexAlgoPrefixSidMap (list): IGP prefix segments allocated for Flexible Algorithms
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algo-prefix-sids/flex-algo-prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) FlexAlgoPrefixSidMap() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMap {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algo-prefix-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FlexAlgoPrefixSidMap (list): IGP prefix segments allocated for Flexible Algorithms
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algo-prefix-sids/flex-algo-prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) FlexAlgoPrefixSidMap() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algo-prefix-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSidAny (list): An IGP prefix that should have a segment routing IGP-Prefix SID
// allocated to it. The value of the SID is specified by the SID ID,
// as an absolute value. If the absolute value falls within the SRGB,
// the Global flag should be advertised by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) PrefixSidAny() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixSidAny (list): An IGP prefix that should have a segment routing IGP-Prefix SID
// allocated to it. The value of the SID is specified by the SID ID,
// as an absolute value. If the absolute value falls within the SRGB,
// the Global flag should be advertised by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) PrefixSidAny() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixSid (list): An IGP prefix that should have a segment routing IGP-Prefix SID
// allocated to it. The value of the SID is specified by the SID ID,
// as an absolute value. If the absolute value falls within the SRGB,
// the Global flag should be advertised by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid"
//
//	Prefix: string
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) PrefixSid(Prefix string) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// PrefixSid (list): An IGP prefix that should have a segment routing IGP-Prefix SID
// allocated to it. The value of the SID is specified by the SID ID,
// as an absolute value. If the absolute value falls within the SRGB,
// the Global flag should be advertised by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid"
//
//	Prefix: string
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) PrefixSid(Prefix string) *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// PrefixSidMap (list): An IGP prefix that should have a segment routing IGP-Prefix SID
// allocated to it. The value of the SID is specified by the SID ID,
// as an absolute value. If the absolute value falls within the SRGB,
// the Global flag should be advertised by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) PrefixSidMap() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMap {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSidMap (list): An IGP prefix that should have a segment routing IGP-Prefix SID
// allocated to it. The value of the SID is specified by the SID ID,
// as an absolute value. If the absolute value falls within the SRGB,
// the Global flag should be advertised by the system.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) PrefixSidMap() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRoutingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allocated-dynamic-local"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allocated-dynamic-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).AllocatedDynamicLocal
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allocated-dynamic-local"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "allocated-dynamic-local"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).AllocatedDynamicLocal
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/group YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/group YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/group"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).Group
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/group"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).Group
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/group"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).Group
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/group"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).Group
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/neighbor"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).Neighbor
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/neighbor"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).Neighbor
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/neighbor"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "neighbor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).Neighbor
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/neighbor"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "neighbor"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).Neighbor
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/protection-eligible YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/protection-eligible YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-eligible"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/protection-eligible"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).ProtectionEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-eligible"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/protection-eligible"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).ProtectionEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protection-eligible"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/protection-eligible"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protection-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).ProtectionEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protection-eligible"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/protection-eligible"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protection-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).ProtectionEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/sid-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/sid-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMapAny struct {
	*ygnmi.NodePath
}

// AllocatedDynamicLocal (leaf): Where an Adjacency SID with a dynamic value is to be allocated by
// the system, this leaf reports to the value of the Adj-SID allocated
// to this interface.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allocated-dynamic-local"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath) AllocatedDynamicLocal() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "allocated-dynamic-local"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AllocatedDynamicLocal (leaf): Where an Adjacency SID with a dynamic value is to be allocated by
// the system, this leaf reports to the value of the Adj-SID allocated
// to this interface.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/allocated-dynamic-local"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny) AllocatedDynamicLocal() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "allocated-dynamic-local"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Group (leaf): When set to true, the Adj-SID is indicated to be part of a group, and
// the G flag is set to 1 in the corresponding advertisement in the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/*/group"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath) Group() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Group (leaf): When set to true, the Adj-SID is indicated to be part of a group, and
// the G flag is set to 1 in the corresponding advertisement in the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/*/group"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny) Group() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Neighbor (leaf): The remote system on the interface with which the Adj-SID is
// associated.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/*/neighbor"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath) Neighbor() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Neighbor (leaf): The remote system on the interface with which the Adj-SID is
// associated.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/*/neighbor"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny) Neighbor() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionEligible (leaf): Whether the Adj-SID should be considered to be eligible for protection
// using IP or MPLS FRR during a network failure. When this value is set to
// true, the B-flag of the Adj-SID is set to 1, and the local system should
// provide FRR paths for the associated label forwarding entry. When it is
// set to false, the local system must not provide FRR for the specified
// LFIB entry.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protection-eligible"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/*/protection-eligible"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath) ProtectionEligible() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protection-eligible"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionEligible (leaf): Whether the Adj-SID should be considered to be eligible for protection
// using IP or MPLS FRR during a network failure. When this value is set to
// true, the B-flag of the Adj-SID is set to 1, and the local system should
// provide FRR paths for the associated label forwarding entry. When it is
// set to false, the local system must not provide FRR for the specified
// LFIB entry.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protection-eligible"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/*/protection-eligible"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny) ProtectionEligible() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_ProtectionEligiblePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protection-eligible"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidId (leaf): The value of the Adj-SID to be advertised. Where a static SID
// identifier is specified, this should be advertised directly by the
// system. Where the DYNAMIC value is specified, this should be treated
// as a dynamically allocated value. When the MPLS data plane is in use
// the dynamic value should not fall within a reserved-label-block.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/*/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath) SidId() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidId (leaf): The value of the Adj-SID to be advertised. Where a static SID
// identifier is specified, this should be advertised directly by the
// system. Where the DYNAMIC value is specified, this should be treated
// as a dynamically allocated value. When the MPLS data plane is in use
// the dynamic value should not fall within a reserved-label-block.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/*/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny) SidId() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).AdjacencySid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:adjacency-sids"},
			PostRelPath: []string{"openconfig-network-instance:adjacency-sid"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).AdjacencySid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:adjacency-sids"},
			PostRelPath: []string{"openconfig-network-instance:adjacency-sid"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).AdjacencySid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:adjacency-sids"},
			PostRelPath: []string{"openconfig-network-instance:adjacency-sid"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySidPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).AdjacencySid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:adjacency-sids"},
			PostRelPath: []string{"openconfig-network-instance:adjacency-sid"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/flex-algo-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/flex-algo-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flex-algo-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).FlexAlgoId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flex-algo-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).FlexAlgoId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/config/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flex-algo-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).FlexAlgoId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/config/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flex-algo-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).FlexAlgoId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/config/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/config/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/sid-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/sid-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/state/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/config/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/config/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMapAny struct {
	*ygnmi.NodePath
}

// FlexAlgoId (leaf): Flexible Algorithm identifier for the prefix segment.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/*/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPath) FlexAlgoId() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flex-algo-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlexAlgoId (leaf): Flexible Algorithm identifier for the prefix segment.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/*/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny) FlexAlgoId() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_FlexAlgoIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flex-algo-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): The IP prefix for which the IGP prefix SID should be advertised. The
// value specified is a local prefix on the interface which is advertised
// into the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPath) Prefix() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): The IP prefix for which the IGP prefix SID should be advertised. The
// value specified is a local prefix on the interface which is advertised
// into the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny) Prefix() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidId (leaf): The Segment Identifier to be used when advertising the IGP Prefix SID for
// the Flexible Algorithm.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/*/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPath) SidId() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidId (leaf): The Segment Identifier to be used when advertising the IGP Prefix SID for
// the Flexible Algorithm.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/flex-algo-prefix-sids/flex-algo-prefix-sid/*/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny) SidId() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_SidIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).FlexAlgoPrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:flex-algo-prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:flex-algo-prefix-sid"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).FlexAlgoPrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:flex-algo-prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:flex-algo-prefix-sid"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).FlexAlgoPrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:flex-algo-prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:flex-algo-prefix-sid"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSidPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_FlexAlgoPrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).FlexAlgoPrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:flex-algo-prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:flex-algo-prefix-sid"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/label-options YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/label-options YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/label-options"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPath) State() ygnmi.SingletonQuery[oc.E_PrefixSid_LabelOptions] {
	return ygnmi.NewSingletonQuery[oc.E_PrefixSid_LabelOptions](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSid_LabelOptions, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).LabelOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/label-options"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_PrefixSid_LabelOptions] {
	return ygnmi.NewWildcardQuery[oc.E_PrefixSid_LabelOptions](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSid_LabelOptions, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).LabelOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/label-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/label-options"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPath) Config() ygnmi.ConfigQuery[oc.E_PrefixSid_LabelOptions] {
	return ygnmi.NewConfigQuery[oc.E_PrefixSid_LabelOptions](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "label-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSid_LabelOptions, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).LabelOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/label-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/label-options"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_PrefixSid_LabelOptions] {
	return ygnmi.NewWildcardQuery[oc.E_PrefixSid_LabelOptions](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "label-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSid_LabelOptions, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).LabelOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/sid-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/sid-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/state/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid).SidId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMapAny struct {
	*ygnmi.NodePath
}

// LabelOptions (leaf): The options associated with the IGP prefix SID for MPLS. The value
// of this leaf specifies the option that the SID should be advertised
// into the IGP with.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/label-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/*/label-options"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPath) LabelOptions() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "label-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelOptions (leaf): The options associated with the IGP prefix SID for MPLS. The value
// of this leaf specifies the option that the SID should be advertised
// into the IGP with.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/label-options"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/*/label-options"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny) LabelOptions() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_LabelOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "label-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): The IP prefix for which the IGP prefix SID should be advertised. The
// value specified is a local prefix on the interface which is advertised
// into the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPath) Prefix() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): The IP prefix for which the IGP prefix SID should be advertised. The
// value specified is a local prefix on the interface which is advertised
// into the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny) Prefix() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidId (leaf): The Segment Identifier to be used when advertising the IGP Prefix SID.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/*/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPath) SidId() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidId (leaf): The Segment Identifier to be used when advertising the IGP Prefix SID.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/*/sid-id"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny) SidId() *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).PrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:prefix-sid"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).PrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:prefix-sid"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).PrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:prefix-sid"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSidPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid](
		"NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting).PrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:prefix-sid"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-mode YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-mode YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-password YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-password YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePath) State() ygnmi.SingletonQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePathAny) State() ygnmi.WildcardQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePath) Config() ygnmi.ConfigQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePathAny) Config() ygnmi.WildcardQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/keychain YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/keychain YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/state/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/config/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny struct {
	*ygnmi.NodePath
}

// AuthMode (leaf): The type of authentication used in the applicable IS-IS PDUs.
//
// This leaf along with the sibling leaf 'auth-password' can be used
// to configure the simple key authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath) AuthMode() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthMode (leaf): The type of authentication used in the applicable IS-IS PDUs.
//
// This leaf along with the sibling leaf 'auth-password' can be used
// to configure the simple key authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny) AuthMode() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPassword (leaf): The authentication key used in the applicable IS-IS PDUs. The key in the
// packet may be encrypted according to the configured authentication type.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath) AuthPassword() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPassword (leaf): The authentication key used in the applicable IS-IS PDUs. The key in the
// packet may be encrypted according to the configured authentication type.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny) AuthPassword() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthPasswordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthType (leaf): The type of authentication used in the applicable IS-IS PDUs
// (simple_key, keychain).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath) AuthType() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthType (leaf): The type of authentication used in the applicable IS-IS PDUs
// (simple_key, keychain).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny) AuthType() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_AuthTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enabled or disable ISIS Hello authentication. Hello authentication
// is used on a per-interface basis to authenticate adjacencies on the
// interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath) Enabled() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enabled or disable ISIS Hello authentication. Hello authentication
// is used on a per-interface basis to authenticate adjacencies on the
// interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny) Enabled() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Keychain (leaf): Reference to a keychain that should be used for hello authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath) Keychain() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "keychain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Keychain (leaf): Reference to a keychain that should be used for hello authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/hello-authentication/*/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny) Keychain() *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication_KeychainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "keychain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthenticationPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication](
		"NetworkInstance_Protocol_Isis_Interface_Level_HelloAuthentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny struct {
	*ygnmi.NodePath
}

// Csnp (container): Operational state parameters relating to CSNPs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "csnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath) Csnp() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"csnp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Csnp (container): Operational state parameters relating to CSNPs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "csnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny) Csnp() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"csnp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Esh (container): This container defines ESH packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "esh"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath) Esh() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"esh"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Esh (container): This container defines ESH packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "esh"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny) Esh() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"esh"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Iih (container): This container defines IIH packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "iih"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath) Iih() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"iih"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Iih (container): This container defines IIH packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "iih"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny) Iih() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"iih"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ish (container): This container defines ISH packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ish"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath) Ish() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ish"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ish (container): This container defines ISH packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ish"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny) Ish() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ish"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Lsp (container): This container defines LSP packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath) Lsp() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Lsp (container): This container defines LSP packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny) Lsp() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Psnp (container): This container defines PSNP packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "psnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath) Psnp() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"psnp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Psnp (container): This container defines PSNP packet counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "psnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny) Psnp() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"psnp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unknown (container): Operational state parameters relating to IS-IS PDUs that are not
// otherwise classified - referred to as Unknown PDUs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath) Unknown() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Unknown (container): Operational state parameters relating to IS-IS PDUs that are not
// otherwise classified - referred to as Unknown PDUs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny) Unknown() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCountersPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny struct {
	*ygnmi.NodePath
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_DroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ProcessedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_RetransmitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/csnp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_CsnpPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Csnp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny struct {
	*ygnmi.NodePath
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_DroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ProcessedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_RetransmitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/esh/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_EshPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Esh",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny struct {
	*ygnmi.NodePath
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_DroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ProcessedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_RetransmitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/iih/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IihPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Iih",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny struct {
	*ygnmi.NodePath
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_DroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ProcessedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_RetransmitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/ish/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_IshPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Ish",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny struct {
	*ygnmi.NodePath
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_DroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ProcessedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_RetransmitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/lsp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_LspPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Lsp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
