/*
Package netinstisis is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package netinstisis

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_IsisPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis YANG schema element.
type NetworkInstance_Protocol_IsisPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_IsisPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis YANG schema element.
type NetworkInstance_Protocol_IsisPathAny struct {
	*ygnmi.NodePath
}

// Global (container): This container defines global ISIS configuration and state
// information.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global"
func (n *NetworkInstance_Protocol_IsisPath) Global() *NetworkInstance_Protocol_Isis_GlobalPath {
	ps := &NetworkInstance_Protocol_Isis_GlobalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Global (container): This container defines global ISIS configuration and state
// information.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global"
func (n *NetworkInstance_Protocol_IsisPathAny) Global() *NetworkInstance_Protocol_Isis_GlobalPathAny {
	ps := &NetworkInstance_Protocol_Isis_GlobalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): This list contains ISIS interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface"
func (n *NetworkInstance_Protocol_IsisPath) InterfaceAny() *NetworkInstance_Protocol_Isis_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Isis_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): This list contains ISIS interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface"
func (n *NetworkInstance_Protocol_IsisPathAny) InterfaceAny() *NetworkInstance_Protocol_Isis_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Isis_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): This list contains ISIS interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Protocol_IsisPath) Interface(InterfaceId string) *NetworkInstance_Protocol_Isis_InterfacePath {
	ps := &NetworkInstance_Protocol_Isis_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): This list contains ISIS interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Protocol_IsisPathAny) Interface(InterfaceId string) *NetworkInstance_Protocol_Isis_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Isis_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): This list contains ISIS interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface"
func (n *NetworkInstance_Protocol_IsisPath) InterfaceMap() *NetworkInstance_Protocol_Isis_InterfacePathMap {
	ps := &NetworkInstance_Protocol_Isis_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): This list contains ISIS interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface"
func (n *NetworkInstance_Protocol_IsisPathAny) InterfaceMap() *NetworkInstance_Protocol_Isis_InterfacePathMapAny {
	ps := &NetworkInstance_Protocol_Isis_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LevelAny (list): Configuration and operational state parameters related to a
// particular level within the IS-IS protocol instance
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level"
func (n *NetworkInstance_Protocol_IsisPath) LevelAny() *NetworkInstance_Protocol_Isis_LevelPathAny {
	ps := &NetworkInstance_Protocol_Isis_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels", "level"},
			map[string]interface{}{"level-number": "*"},
			n,
		),
	}
	return ps
}

// LevelAny (list): Configuration and operational state parameters related to a
// particular level within the IS-IS protocol instance
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level"
func (n *NetworkInstance_Protocol_IsisPathAny) LevelAny() *NetworkInstance_Protocol_Isis_LevelPathAny {
	ps := &NetworkInstance_Protocol_Isis_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels", "level"},
			map[string]interface{}{"level-number": "*"},
			n,
		),
	}
	return ps
}

// Level (list): Configuration and operational state parameters related to a
// particular level within the IS-IS protocol instance
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level"
//
//	LevelNumber: uint8
func (n *NetworkInstance_Protocol_IsisPath) Level(LevelNumber uint8) *NetworkInstance_Protocol_Isis_LevelPath {
	ps := &NetworkInstance_Protocol_Isis_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels", "level"},
			map[string]interface{}{"level-number": LevelNumber},
			n,
		),
	}
	return ps
}

// Level (list): Configuration and operational state parameters related to a
// particular level within the IS-IS protocol instance
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level"
//
//	LevelNumber: uint8
func (n *NetworkInstance_Protocol_IsisPathAny) Level(LevelNumber uint8) *NetworkInstance_Protocol_Isis_LevelPathAny {
	ps := &NetworkInstance_Protocol_Isis_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels", "level"},
			map[string]interface{}{"level-number": LevelNumber},
			n,
		),
	}
	return ps
}

// LevelMap (list): Configuration and operational state parameters related to a
// particular level within the IS-IS protocol instance
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level"
func (n *NetworkInstance_Protocol_IsisPath) LevelMap() *NetworkInstance_Protocol_Isis_LevelPathMap {
	ps := &NetworkInstance_Protocol_Isis_LevelPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LevelMap (list): Configuration and operational state parameters related to a
// particular level within the IS-IS protocol instance
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level"
func (n *NetworkInstance_Protocol_IsisPathAny) LevelMap() *NetworkInstance_Protocol_Isis_LevelPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_LevelPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_IsisPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis](
		"NetworkInstance_Protocol_Isis",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_IsisPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis](
		"NetworkInstance_Protocol_Isis",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_IsisPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis](
		"NetworkInstance_Protocol_Isis",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_IsisPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis](
		"NetworkInstance_Protocol_Isis",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/authentication-check YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/authentication-check YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/authentication-check"
func (n *NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-check"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).AuthenticationCheck
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/authentication-check"
func (n *NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-check"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).AuthenticationCheck
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/authentication-check"
func (n *NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-check"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).AuthenticationCheck
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/authentication-check"
func (n *NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-check"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).AuthenticationCheck
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/csnp-enable-on-p2p-links YANG schema element.
type NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/csnp-enable-on-p2p-links YANG schema element.
type NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/csnp-enable-on-p2p-links"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/csnp-enable-on-p2p-links"
func (n *NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "csnp-enable-on-p2p-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).CsnpEnableOnP2PLinks
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/csnp-enable-on-p2p-links"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/csnp-enable-on-p2p-links"
func (n *NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "csnp-enable-on-p2p-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).CsnpEnableOnP2PLinks
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/csnp-enable-on-p2p-links"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/csnp-enable-on-p2p-links"
func (n *NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "csnp-enable-on-p2p-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).CsnpEnableOnP2PLinks
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/csnp-enable-on-p2p-links"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/csnp-enable-on-p2p-links"
func (n *NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "csnp-enable-on-p2p-links"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).CsnpEnableOnP2PLinks
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_FastFloodingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/fast-flooding YANG schema element.
type NetworkInstance_Protocol_Isis_Global_FastFloodingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_FastFloodingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/fast-flooding YANG schema element.
type NetworkInstance_Protocol_Isis_Global_FastFloodingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/fast-flooding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/fast-flooding"
func (n *NetworkInstance_Protocol_Isis_Global_FastFloodingPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fast-flooding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).FastFlooding
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/fast-flooding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/fast-flooding"
func (n *NetworkInstance_Protocol_Isis_Global_FastFloodingPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fast-flooding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).FastFlooding
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/fast-flooding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/fast-flooding"
func (n *NetworkInstance_Protocol_Isis_Global_FastFloodingPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fast-flooding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).FastFlooding
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/fast-flooding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/fast-flooding"
func (n *NetworkInstance_Protocol_Isis_Global_FastFloodingPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fast-flooding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).FastFlooding
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_HelloPaddingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/hello-padding YANG schema element.
type NetworkInstance_Protocol_Isis_Global_HelloPaddingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_HelloPaddingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/hello-padding YANG schema element.
type NetworkInstance_Protocol_Isis_Global_HelloPaddingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/hello-padding"
func (n *NetworkInstance_Protocol_Isis_Global_HelloPaddingPath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_HelloPaddingType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_HelloPaddingType](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-padding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_HelloPaddingType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).HelloPadding
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/hello-padding"
func (n *NetworkInstance_Protocol_Isis_Global_HelloPaddingPathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_HelloPaddingType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_HelloPaddingType](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-padding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_HelloPaddingType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).HelloPadding
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/hello-padding"
func (n *NetworkInstance_Protocol_Isis_Global_HelloPaddingPath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_HelloPaddingType] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_HelloPaddingType](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-padding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_HelloPaddingType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).HelloPadding
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/hello-padding"
func (n *NetworkInstance_Protocol_Isis_Global_HelloPaddingPathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_HelloPaddingType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_HelloPaddingType](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-padding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_HelloPaddingType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).HelloPadding
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_IidTlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/iid-tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Global_IidTlvPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_IidTlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/iid-tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Global_IidTlvPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/iid-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/iid-tlv"
func (n *NetworkInstance_Protocol_Isis_Global_IidTlvPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "iid-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).IidTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/iid-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/iid-tlv"
func (n *NetworkInstance_Protocol_Isis_Global_IidTlvPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "iid-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).IidTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/iid-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/iid-tlv"
func (n *NetworkInstance_Protocol_Isis_Global_IidTlvPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "iid-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).IidTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/iid-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/iid-tlv"
func (n *NetworkInstance_Protocol_Isis_Global_IidTlvPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "iid-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).IidTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_InstancePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/instance YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_InstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/instance YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/instance"
func (n *NetworkInstance_Protocol_Isis_Global_InstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Instance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/instance"
func (n *NetworkInstance_Protocol_Isis_Global_InstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Instance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/instance"
func (n *NetworkInstance_Protocol_Isis_Global_InstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Instance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/instance"
func (n *NetworkInstance_Protocol_Isis_Global_InstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Instance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_InstanceIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/instance-id YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InstanceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_InstanceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/instance-id YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InstanceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/instance-id"
func (n *NetworkInstance_Protocol_Isis_Global_InstanceIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).InstanceId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/instance-id"
func (n *NetworkInstance_Protocol_Isis_Global_InstanceIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).InstanceId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/instance-id"
func (n *NetworkInstance_Protocol_Isis_Global_InstanceIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "instance-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).InstanceId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/instance-id"
func (n *NetworkInstance_Protocol_Isis_Global_InstanceIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "instance-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).InstanceId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LevelCapabilityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/level-capability YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LevelCapabilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_LevelCapabilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/level-capability YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LevelCapabilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/level-capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/level-capability"
func (n *NetworkInstance_Protocol_Isis_Global_LevelCapabilityPath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level-capability"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).LevelCapability
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/level-capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/level-capability"
func (n *NetworkInstance_Protocol_Isis_Global_LevelCapabilityPathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level-capability"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).LevelCapability
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/level-capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/level-capability"
func (n *NetworkInstance_Protocol_Isis_Global_LevelCapabilityPath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level-capability"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).LevelCapability
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/level-capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/level-capability"
func (n *NetworkInstance_Protocol_Isis_Global_LevelCapabilityPathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level-capability"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).LevelCapability
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/max-ecmp-paths YANG schema element.
type NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/max-ecmp-paths YANG schema element.
type NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-ecmp-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).MaxEcmpPaths
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-ecmp-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).MaxEcmpPaths
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-ecmp-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).MaxEcmpPaths
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-ecmp-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).MaxEcmpPaths
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/maximum-area-addresses YANG schema element.
type NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/maximum-area-addresses YANG schema element.
type NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-area-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).MaximumAreaAddresses
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-area-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).MaximumAreaAddresses
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-area-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).MaximumAreaAddresses
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-area-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).MaximumAreaAddresses
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_NetPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/net YANG schema element.
type NetworkInstance_Protocol_Isis_Global_NetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_NetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/net YANG schema element.
type NetworkInstance_Protocol_Isis_Global_NetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/net"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/net"
func (n *NetworkInstance_Protocol_Isis_Global_NetPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "net"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Net
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/net"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/net"
func (n *NetworkInstance_Protocol_Isis_Global_NetPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "net"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Net
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/net"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/net"
func (n *NetworkInstance_Protocol_Isis_Global_NetPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "net"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Net
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/net"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/net"
func (n *NetworkInstance_Protocol_Isis_Global_NetPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "net"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Net
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_PoiTlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/poi-tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Global_PoiTlvPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_PoiTlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/poi-tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Global_PoiTlvPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/poi-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/poi-tlv"
func (n *NetworkInstance_Protocol_Isis_Global_PoiTlvPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "poi-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).PoiTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/poi-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/poi-tlv"
func (n *NetworkInstance_Protocol_Isis_Global_PoiTlvPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "poi-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).PoiTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/poi-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/poi-tlv"
func (n *NetworkInstance_Protocol_Isis_Global_PoiTlvPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "poi-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).PoiTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/poi-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/poi-tlv"
func (n *NetworkInstance_Protocol_Isis_Global_PoiTlvPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "poi-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).PoiTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_WeightedEcmpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/weighted-ecmp YANG schema element.
type NetworkInstance_Protocol_Isis_Global_WeightedEcmpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_WeightedEcmpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/state/weighted-ecmp YANG schema element.
type NetworkInstance_Protocol_Isis_Global_WeightedEcmpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weighted-ecmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/weighted-ecmp"
func (n *NetworkInstance_Protocol_Isis_Global_WeightedEcmpPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weighted-ecmp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).WeightedEcmp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weighted-ecmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/state/weighted-ecmp"
func (n *NetworkInstance_Protocol_Isis_Global_WeightedEcmpPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weighted-ecmp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).WeightedEcmp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/weighted-ecmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/weighted-ecmp"
func (n *NetworkInstance_Protocol_Isis_Global_WeightedEcmpPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weighted-ecmp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).WeightedEcmp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/weighted-ecmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/config/weighted-ecmp"
func (n *NetworkInstance_Protocol_Isis_Global_WeightedEcmpPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "weighted-ecmp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).WeightedEcmp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global YANG schema element.
type NetworkInstance_Protocol_Isis_GlobalPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global YANG schema element.
type NetworkInstance_Protocol_Isis_GlobalPathAny struct {
	*ygnmi.NodePath
}

// AfAny (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) AfAny() *NetworkInstance_Protocol_Isis_Global_AfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_AfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": "*", "safi-name": "*"},
			n,
		),
	}
	return ps
}

// AfAny (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) AfAny() *NetworkInstance_Protocol_Isis_Global_AfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_AfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": "*", "safi-name": "*"},
			n,
		),
	}
	return ps
}

// WithAfiName sets NetworkInstance_Protocol_Isis_Global_AfPathAny's key "afi-name" to the specified value.
// AfiName: oc.E_IsisTypes_AFI_TYPE
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) WithAfiName(AfiName oc.E_IsisTypes_AFI_TYPE) *NetworkInstance_Protocol_Isis_Global_AfPathAny {
	ygnmi.ModifyKey(n.NodePath, "afi-name", AfiName)
	return n
}

// WithSafiName sets NetworkInstance_Protocol_Isis_Global_AfPathAny's key "safi-name" to the specified value.
// SafiName: oc.E_IsisTypes_SAFI_TYPE
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) WithSafiName(SafiName oc.E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Global_AfPathAny {
	ygnmi.ModifyKey(n.NodePath, "safi-name", SafiName)
	return n
}

// Af (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af"
//
//	AfiName: oc.E_IsisTypes_AFI_TYPE
//	SafiName: oc.E_IsisTypes_SAFI_TYPE
func (n *NetworkInstance_Protocol_Isis_GlobalPath) Af(AfiName oc.E_IsisTypes_AFI_TYPE, SafiName oc.E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Global_AfPath {
	ps := &NetworkInstance_Protocol_Isis_Global_AfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": AfiName, "safi-name": SafiName},
			n,
		),
	}
	return ps
}

// Af (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af"
//
//	AfiName: oc.E_IsisTypes_AFI_TYPE
//	SafiName: oc.E_IsisTypes_SAFI_TYPE
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) Af(AfiName oc.E_IsisTypes_AFI_TYPE, SafiName oc.E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Global_AfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_AfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": AfiName, "safi-name": SafiName},
			n,
		),
	}
	return ps
}

// AfMap (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) AfMap() *NetworkInstance_Protocol_Isis_Global_AfPathMap {
	ps := &NetworkInstance_Protocol_Isis_Global_AfPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AfMap (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) AfMap() *NetworkInstance_Protocol_Isis_Global_AfPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Global_AfPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AfiAny (list): Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-shortcuts/afi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) AfiAny() *NetworkInstance_Protocol_Isis_Global_AfiPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_AfiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-shortcuts", "afi"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
	return ps
}

// AfiAny (list): Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-shortcuts/afi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) AfiAny() *NetworkInstance_Protocol_Isis_Global_AfiPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_AfiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-shortcuts", "afi"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
	return ps
}

// Afi (list): Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-shortcuts/afi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi"
//
//	AfiName: oc.E_IsisTypes_AFI_TYPE
func (n *NetworkInstance_Protocol_Isis_GlobalPath) Afi(AfiName oc.E_IsisTypes_AFI_TYPE) *NetworkInstance_Protocol_Isis_Global_AfiPath {
	ps := &NetworkInstance_Protocol_Isis_Global_AfiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-shortcuts", "afi"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
	return ps
}

// Afi (list): Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-shortcuts/afi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi"
//
//	AfiName: oc.E_IsisTypes_AFI_TYPE
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) Afi(AfiName oc.E_IsisTypes_AFI_TYPE) *NetworkInstance_Protocol_Isis_Global_AfiPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_AfiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-shortcuts", "afi"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
	return ps
}

// AfiMap (list): Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-shortcuts/afi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) AfiMap() *NetworkInstance_Protocol_Isis_Global_AfiPathMap {
	ps := &NetworkInstance_Protocol_Isis_Global_AfiPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-shortcuts"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AfiMap (list): Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-shortcuts/afi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) AfiMap() *NetworkInstance_Protocol_Isis_Global_AfiPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Global_AfiPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-shortcuts"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AuthenticationCheck (leaf): When set to true, reject all ISIS protocol PDUs that either have a mismatch
// in authentication-type or authentication-key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/authentication-check"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) AuthenticationCheck() *NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPath {
	ps := &NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-check"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationCheck (leaf): When set to true, reject all ISIS protocol PDUs that either have a mismatch
// in authentication-type or authentication-key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/authentication-check"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) AuthenticationCheck() *NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_AuthenticationCheckPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-check"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CsnpEnableOnP2PLinks (leaf): When set to true, ISIS will always enable CSNP on P2P Links.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/csnp-enable-on-p2p-links"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/csnp-enable-on-p2p-links"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) CsnpEnableOnP2PLinks() *NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPath {
	ps := &NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "csnp-enable-on-p2p-links"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CsnpEnableOnP2PLinks (leaf): When set to true, ISIS will always enable CSNP on P2P Links.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/csnp-enable-on-p2p-links"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/csnp-enable-on-p2p-links"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) CsnpEnableOnP2PLinks() *NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_CsnpEnableOnP2PLinksPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "csnp-enable-on-p2p-links"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FastFlooding (leaf): When set to true, IS will always flood the LSP that triggered an SPF
// before the router actually runs the SPF computation.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/fast-flooding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/fast-flooding"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) FastFlooding() *NetworkInstance_Protocol_Isis_Global_FastFloodingPath {
	ps := &NetworkInstance_Protocol_Isis_Global_FastFloodingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fast-flooding"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FastFlooding (leaf): When set to true, IS will always flood the LSP that triggered an SPF
// before the router actually runs the SPF computation.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/fast-flooding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/fast-flooding"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) FastFlooding() *NetworkInstance_Protocol_Isis_Global_FastFloodingPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_FastFloodingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fast-flooding"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GracefulRestart (container): This container defines ISIS Graceful Restart.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) GracefulRestart() *NetworkInstance_Protocol_Isis_Global_GracefulRestartPath {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestartPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GracefulRestart (container): This container defines ISIS Graceful Restart.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) GracefulRestart() *NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HelloPadding (leaf): Controls the padding type for IS-IS Hello PDUs on a global level.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/hello-padding"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) HelloPadding() *NetworkInstance_Protocol_Isis_Global_HelloPaddingPath {
	ps := &NetworkInstance_Protocol_Isis_Global_HelloPaddingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-padding"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloPadding (leaf): Controls the padding type for IS-IS Hello PDUs on a global level.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/hello-padding"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) HelloPadding() *NetworkInstance_Protocol_Isis_Global_HelloPaddingPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_HelloPaddingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-padding"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IidTlv (leaf): ISIS Instance Identifier TLV. When set to trues, the IID-TLV identifies
// the unique instance as well as the topology/topologies to which the
// PDU applies.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/iid-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/iid-tlv"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) IidTlv() *NetworkInstance_Protocol_Isis_Global_IidTlvPath {
	ps := &NetworkInstance_Protocol_Isis_Global_IidTlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "iid-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IidTlv (leaf): ISIS Instance Identifier TLV. When set to trues, the IID-TLV identifies
// the unique instance as well as the topology/topologies to which the
// PDU applies.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/iid-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/iid-tlv"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) IidTlv() *NetworkInstance_Protocol_Isis_Global_IidTlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_IidTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "iid-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instance (leaf): ISIS Instance. This leaf has been deprecated. The instance name
// is specified within the
// /network-instances/network-instance/protocols/protocol/config/name
// leaf (list key). If a user requires a specific instance identifier
// used in the Instance Identifier TLV to be configured the instance-id
// leaf is used.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/instance"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) Instance() *NetworkInstance_Protocol_Isis_Global_InstancePath {
	ps := &NetworkInstance_Protocol_Isis_Global_InstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instance (leaf): ISIS Instance. This leaf has been deprecated. The instance name
// is specified within the
// /network-instances/network-instance/protocols/protocol/config/name
// leaf (list key). If a user requires a specific instance identifier
// used in the Instance Identifier TLV to be configured the instance-id
// leaf is used.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/instance"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) Instance() *NetworkInstance_Protocol_Isis_Global_InstancePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_InstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceId (leaf): When specified, this leaf explicitly indicates the instance identifier
// that is to be used for the IS-IS instance. The value should be included
// in the Instance Identifier (IID) TLV.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/instance-id"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) InstanceId() *NetworkInstance_Protocol_Isis_Global_InstanceIdPath {
	ps := &NetworkInstance_Protocol_Isis_Global_InstanceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceId (leaf): When specified, this leaf explicitly indicates the instance identifier
// that is to be used for the IS-IS instance. The value should be included
// in the Instance Identifier (IID) TLV.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/instance-id"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) InstanceId() *NetworkInstance_Protocol_Isis_Global_InstanceIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_InstanceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterLevelPropagationPolicies (container): Policies to propagate prefixes between IS-IS levels.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "inter-level-propagation-policies"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) InterLevelPropagationPolicies() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPath {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inter-level-propagation-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterLevelPropagationPolicies (container): Policies to propagate prefixes between IS-IS levels.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "inter-level-propagation-policies"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) InterLevelPropagationPolicies() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inter-level-propagation-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LevelCapability (leaf): ISIS level capability(level-1, level-2, level-1-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/level-capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/level-capability"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) LevelCapability() *NetworkInstance_Protocol_Isis_Global_LevelCapabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LevelCapabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level-capability"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LevelCapability (leaf): ISIS level capability(level-1, level-2, level-1-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/level-capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/level-capability"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) LevelCapability() *NetworkInstance_Protocol_Isis_Global_LevelCapabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LevelCapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level-capability"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspBit (container): This container defines ISIS LSP Operational Bits.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) LspBit() *NetworkInstance_Protocol_Isis_Global_LspBitPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-bit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LspBit (container): This container defines ISIS LSP Operational Bits.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) LspBit() *NetworkInstance_Protocol_Isis_Global_LspBitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-bit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaxEcmpPaths (leaf): ISIS max-paths count.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) MaxEcmpPaths() *NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPath {
	ps := &NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-ecmp-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxEcmpPaths (leaf): ISIS max-paths count.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) MaxEcmpPaths() *NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_MaxEcmpPathsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-ecmp-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaximumAreaAddresses (leaf): Maximum areas supported.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) MaximumAreaAddresses() *NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPath {
	ps := &NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-area-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaximumAreaAddresses (leaf): Maximum areas supported.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) MaximumAreaAddresses() *NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_MaximumAreaAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-area-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mpls (container): Configuration and operational state relating to MPLS-related
// features in IS-IS
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) Mpls() *NetworkInstance_Protocol_Isis_Global_MplsPath {
	ps := &NetworkInstance_Protocol_Isis_Global_MplsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): Configuration and operational state relating to MPLS-related
// features in IS-IS
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) Mpls() *NetworkInstance_Protocol_Isis_Global_MplsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_MplsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Net (leaf-list): ISIS network entity title (NET). The first 8 bits are usually
// 49 (private AFI), next 16 bits represent area, next 48 bits represent
// system id and final 8 bits are set to 0.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/net"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/net"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) Net() *NetworkInstance_Protocol_Isis_Global_NetPath {
	ps := &NetworkInstance_Protocol_Isis_Global_NetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "net"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Net (leaf-list): ISIS network entity title (NET). The first 8 bits are usually
// 49 (private AFI), next 16 bits represent area, next 48 bits represent
// system id and final 8 bits are set to 0.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/net"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/net"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) Net() *NetworkInstance_Protocol_Isis_Global_NetPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_NetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "net"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Nsr (container): This container defines ISIS Non-Stop Routing.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "nsr"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/nsr"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) Nsr() *NetworkInstance_Protocol_Isis_Global_NsrPath {
	ps := &NetworkInstance_Protocol_Isis_Global_NsrPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nsr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Nsr (container): This container defines ISIS Non-Stop Routing.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "nsr"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/nsr"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) Nsr() *NetworkInstance_Protocol_Isis_Global_NsrPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_NsrPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nsr"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PoiTlv (leaf): ISIS purge TLV. When set to true, a TLV is added to purges to record
// the system ID  of the IS generating the purge.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/poi-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/poi-tlv"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) PoiTlv() *NetworkInstance_Protocol_Isis_Global_PoiTlvPath {
	ps := &NetworkInstance_Protocol_Isis_Global_PoiTlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "poi-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PoiTlv (leaf): ISIS purge TLV. When set to true, a TLV is added to purges to record
// the system ID  of the IS generating the purge.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/poi-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/poi-tlv"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) PoiTlv() *NetworkInstance_Protocol_Isis_Global_PoiTlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_PoiTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "poi-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReferenceBandwidth (container): This container defines ISIS Reference Bandwidth.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reference-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) ReferenceBandwidth() *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPath {
	ps := &NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ReferenceBandwidth (container): This container defines ISIS Reference Bandwidth.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reference-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) ReferenceBandwidth() *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRouting (container): Configuration and operational state relating to segment routing.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) SegmentRouting() *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRouting (container): Configuration and operational state relating to segment routing.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) SegmentRouting() *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Timers (container): This container defines ISIS timers.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "timers"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) Timers() *NetworkInstance_Protocol_Isis_Global_TimersPath {
	ps := &NetworkInstance_Protocol_Isis_Global_TimersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Timers (container): This container defines ISIS timers.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "timers"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) Timers() *NetworkInstance_Protocol_Isis_Global_TimersPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_TimersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): This container defines ISIS transport.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transport"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/transport"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) Transport() *NetworkInstance_Protocol_Isis_Global_TransportPath {
	ps := &NetworkInstance_Protocol_Isis_Global_TransportPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): This container defines ISIS transport.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transport"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/transport"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) Transport() *NetworkInstance_Protocol_Isis_Global_TransportPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_TransportPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// WeightedEcmp (leaf): When set to true, all eligible multipath IS-IS routes associated with
// the instance are programmed to use weighted ECMP. An IS-IS route is
// eligible for weighted ECMP if all the next-hop interfaces in the
// multipath set have a load-balancing-weight other than 'none'.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/weighted-ecmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/weighted-ecmp"
func (n *NetworkInstance_Protocol_Isis_GlobalPath) WeightedEcmp() *NetworkInstance_Protocol_Isis_Global_WeightedEcmpPath {
	ps := &NetworkInstance_Protocol_Isis_Global_WeightedEcmpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weighted-ecmp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// WeightedEcmp (leaf): When set to true, all eligible multipath IS-IS routes associated with
// the instance are programmed to use weighted ECMP. An IS-IS route is
// eligible for weighted ECMP if all the next-hop interfaces in the
// multipath set have a load-balancing-weight other than 'none'.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/weighted-ecmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/*/weighted-ecmp"
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) WeightedEcmp() *NetworkInstance_Protocol_Isis_Global_WeightedEcmpPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_WeightedEcmpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "weighted-ecmp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_GlobalPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_GlobalPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_GlobalPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Af_AfiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_AfiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Af_AfiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_AfiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_AfiNamePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_AfiNamePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_AfiNamePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_AfiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Af_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Af_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Af_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Af_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Af_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Af_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/max-ecmp-paths YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/max-ecmp-paths YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-ecmp-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).MaxEcmpPaths
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-ecmp-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).MaxEcmpPaths
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-ecmp-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).MaxEcmpPaths
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-ecmp-paths"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).MaxEcmpPaths
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Af_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Af_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/metric"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/metric"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/metric"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MetricPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/metric"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MetricPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Af_SafiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/safi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_SafiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Af_SafiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/safi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_SafiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_SafiNamePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/state/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_SafiNamePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_SafiNamePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/config/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_SafiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_AfPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AfPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_AfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AfPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_AfPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AfPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_AfPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AfPathMapAny struct {
	*ygnmi.NodePath
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_AfPath) AfiName() *NetworkInstance_Protocol_Isis_Global_Af_AfiNamePath {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_AfiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) AfiName() *NetworkInstance_Protocol_Isis_Global_Af_AfiNamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_AfiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_AfPath) Enabled() *NetworkInstance_Protocol_Isis_Global_Af_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) Enabled() *NetworkInstance_Protocol_Isis_Global_Af_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxEcmpPaths (leaf): ISIS max-paths count.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_AfPath) MaxEcmpPaths() *NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-ecmp-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxEcmpPaths (leaf): ISIS max-paths count.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-ecmp-paths"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/max-ecmp-paths"
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) MaxEcmpPaths() *NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MaxEcmpPathsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-ecmp-paths"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS metric value(default=10).
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/metric"
func (n *NetworkInstance_Protocol_Isis_Global_AfPath) Metric() *NetworkInstance_Protocol_Isis_Global_Af_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS metric value(default=10).
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/metric"
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) Metric() *NetworkInstance_Protocol_Isis_Global_Af_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultiTopology (container): This container defines multi-topology address-family configuration
// and state information. ISIS TLV 235, 237.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "multi-topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology"
func (n *NetworkInstance_Protocol_Isis_Global_AfPath) MultiTopology() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-topology"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MultiTopology (container): This container defines multi-topology address-family configuration
// and state information. ISIS TLV 235, 237.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "multi-topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology"
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) MultiTopology() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-topology"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SafiName (leaf): Subsequent address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_AfPath) SafiName() *NetworkInstance_Protocol_Isis_Global_Af_SafiNamePath {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_SafiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SafiName (leaf): Subsequent address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/*/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) SafiName() *NetworkInstance_Protocol_Isis_Global_Af_SafiNamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_SafiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af](
		"NetworkInstance_Protocol_Isis_Global_Af",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af](
		"NetworkInstance_Protocol_Isis_Global_Af",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Global_Af_Key]*oc.NetworkInstance_Protocol_Isis_Global_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/safi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/safi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/config/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/config/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPathAny struct {
	*ygnmi.NodePath
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPath) AfiName() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePath {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPathAny) AfiName() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_AfiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPath) Enabled() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPathAny) Enabled() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SafiName (leaf): Subsequent address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/*/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPath) SafiName() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePath {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SafiName (leaf): Subsequent address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/afi-safi/af/multi-topology/*/safi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPathAny) SafiName() *NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Af_MultiTopology_SafiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Af_MultiTopologyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Af_MultiTopology](
		"NetworkInstance_Protocol_Isis_Global_Af_MultiTopology",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Afi).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Afi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Afi).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Afi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Afi).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Afi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Afi).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Afi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Afi_NhTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/state/nh-type YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Afi_NhTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Afi_NhTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/state/nh-type YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Afi_NhTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nh-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/state/nh-type"
func (n *NetworkInstance_Protocol_Isis_Global_Afi_NhTypePath) State() ygnmi.SingletonQuery[[]oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewSingletonQuery[[]oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nh-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Afi).NhType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Afi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nh-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/state/nh-type"
func (n *NetworkInstance_Protocol_Isis_Global_Afi_NhTypePathAny) State() ygnmi.WildcardQuery[[]oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewWildcardQuery[[]oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nh-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Afi).NhType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Afi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/nh-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/config/nh-type"
func (n *NetworkInstance_Protocol_Isis_Global_Afi_NhTypePath) Config() ygnmi.ConfigQuery[[]oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewConfigQuery[[]oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "nh-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Afi).NhType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Afi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/nh-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/config/nh-type"
func (n *NetworkInstance_Protocol_Isis_Global_Afi_NhTypePathAny) Config() ygnmi.WildcardQuery[[]oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewWildcardQuery[[]oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "nh-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Afi).NhType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Afi) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_AfiPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AfiPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_AfiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AfiPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_AfiPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AfiPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_AfiPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi YANG schema element.
type NetworkInstance_Protocol_Isis_Global_AfiPathMapAny struct {
	*ygnmi.NodePath
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_AfiPath) AfiName() *NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePath {
	ps := &NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Global_AfiPathAny) AfiName() *NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Afi_AfiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NhType (leaf-list): Tunnel NH Type(RSVP,SR). When present it implies
// that nh-type shortcut is enabled for a specified AFI.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/nh-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/*/nh-type"
func (n *NetworkInstance_Protocol_Isis_Global_AfiPath) NhType() *NetworkInstance_Protocol_Isis_Global_Afi_NhTypePath {
	ps := &NetworkInstance_Protocol_Isis_Global_Afi_NhTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "nh-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NhType (leaf-list): Tunnel NH Type(RSVP,SR). When present it implies
// that nh-type shortcut is enabled for a specified AFI.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/nh-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/igp-shortcuts/afi/*/nh-type"
func (n *NetworkInstance_Protocol_Isis_Global_AfiPathAny) NhType() *NetworkInstance_Protocol_Isis_Global_Afi_NhTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Afi_NhTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "nh-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfiPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Afi] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Afi](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfiPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Afi] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Afi](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfiPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Afi] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Afi](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfiPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Afi] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Afi](
		"NetworkInstance_Protocol_Isis_Global_Afi",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfiPathMap) State() ygnmi.SingletonQuery[map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi] {
	return ygnmi.NewSingletonQuery[map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Afi
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:igp-shortcuts"},
			PostRelPath: []string{"openconfig-network-instance:afi"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfiPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi] {
	return ygnmi.NewWildcardQuery[map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi](
		"NetworkInstance_Protocol_Isis_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Afi
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:igp-shortcuts"},
			PostRelPath: []string{"openconfig-network-instance:afi"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfiPathMap) Config() ygnmi.ConfigQuery[map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi] {
	return ygnmi.NewConfigQuery[map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Afi
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:igp-shortcuts"},
			PostRelPath: []string{"openconfig-network-instance:afi"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_AfiPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi] {
	return ygnmi.NewWildcardQuery[map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi](
		"NetworkInstance_Protocol_Isis_Global",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisTypes_AFI_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_Afi, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global).Afi
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:igp-shortcuts"},
			PostRelPath: []string{"openconfig-network-instance:afi"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/helper-only YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/helper-only YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/helper-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).HelperOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/helper-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).HelperOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/helper-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).HelperOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/helper-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).HelperOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/interface-time-expirations YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/interface-time-expirations YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-time-expirations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).InterfaceTimeExpirations
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-time-expirations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).InterfaceTimeExpirations
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPath) Config() ygnmi.ConfigQuery[int64] {
	return ygnmi.NewConfigQuery[int64](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-time-expirations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).InterfaceTimeExpirations
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPathAny) Config() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-time-expirations"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).InterfaceTimeExpirations
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/interface-timer YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/interface-timer YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).InterfaceTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).InterfaceTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).InterfaceTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).InterfaceTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/non-planned-only YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/non-planned-only YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/non-planned-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/non-planned-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "non-planned-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).NonPlannedOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/non-planned-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/non-planned-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "non-planned-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).NonPlannedOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/non-planned-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/non-planned-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "non-planned-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).NonPlannedOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/non-planned-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/non-planned-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "non-planned-only"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).NonPlannedOnly
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/restart-time"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/state/restart-time"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/restart-time"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/config/restart-time"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestartPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestartPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPath) Enabled() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny) Enabled() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperOnly (leaf): Enable or disable the IS-IS graceful restart helper function. When
// this leaf is set, the local system does not utilise the IS-IS
// graceful restart procedures during its own restart, but supports
// retaining forwarding information during a remote speaker's restart.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/helper-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPath) HelperOnly() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPath {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperOnly (leaf): Enable or disable the IS-IS graceful restart helper function. When
// this leaf is set, the local system does not utilise the IS-IS
// graceful restart procedures during its own restart, but supports
// retaining forwarding information during a remote speaker's restart.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/helper-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/helper-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny) HelperOnly() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_HelperOnlyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTimeExpirations (leaf): Number of times T1 expires before IIH without Restart TLV's RR flag
// set is sent. That is GR helper is not supported by adjacents
// Inermediate System
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPath) InterfaceTimeExpirations() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPath {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-time-expirations"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTimeExpirations (leaf): Number of times T1 expires before IIH without Restart TLV's RR flag
// set is sent. That is GR helper is not supported by adjacents
// Inermediate System
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-time-expirations"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/interface-time-expirations"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny) InterfaceTimeExpirations() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimeExpirationsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-time-expirations"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTimer (leaf): Value of RFC5306/RFC8706 T1 timer
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPath) InterfaceTimer() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPath {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceTimer (leaf): Value of RFC5306/RFC8706 T1 timer
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/interface-timer"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny) InterfaceTimer() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_InterfaceTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NonPlannedOnly (leaf): When this leaf is set to TRUE, planned restart procedures as
// described in RFC 8706 are not used.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/non-planned-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/non-planned-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPath) NonPlannedOnly() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPath {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "non-planned-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NonPlannedOnly (leaf): When this leaf is set to TRUE, planned restart procedures as
// described in RFC 8706 are not used.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/non-planned-only"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/non-planned-only"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny) NonPlannedOnly() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_NonPlannedOnlyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "non-planned-only"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Value of RFC5306/RFC8706 T2 timer
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/restart-time"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPath) RestartTime() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePath {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Value of RFC5306/RFC8706 T2 timer
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/graceful-restart/*/restart-time"
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny) RestartTime() *NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_GracefulRestart_RestartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_GracefulRestartPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Global_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPathAny struct {
	*ygnmi.NodePath
}

// Level1ToLevel2 (container): Policies relating to prefixes to be propagated from
// Level 1 to Level 2.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "level1-to-level2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPath) Level1ToLevel2() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2Path {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"level1-to-level2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Level1ToLevel2 (container): Policies relating to prefixes to be propagated from
// Level 1 to Level 2.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "level1-to-level2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPathAny) Level1ToLevel2() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2PathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"level1-to-level2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Level2ToLevel1 (container): Policies relating to prefixes to be propagated from
// Level2 to Level 1.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "level2-to-level1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPath) Level2ToLevel1() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1Path {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"level2-to-level1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Level2ToLevel1 (container): Policies relating to prefixes to be propagated from
// Level2 to Level 1.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "level2-to-level1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPathAny) Level2ToLevel1() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1PathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"level2-to-level1"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPoliciesPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/state/default-import-policy YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/state/default-import-policy YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/state/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/state/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/config/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/config/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/state/import-policy YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/state/import-policy YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/state/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/state/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/config/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/config/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2 YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2 YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2PathAny struct {
	*ygnmi.NodePath
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/*/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2Path) DefaultImportPolicy() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPath {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/*/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2PathAny) DefaultImportPolicy() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_DefaultImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/*/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2Path) ImportPolicy() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPath {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level1-to-level2/*/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2PathAny) ImportPolicy() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2_ImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level1ToLevel2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/state/default-import-policy YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/state/default-import-policy YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/state/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/state/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/config/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/config/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/state/import-policy YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/state/import-policy YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/state/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/state/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/config/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/config/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1 YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1 YANG schema element.
type NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1PathAny struct {
	*ygnmi.NodePath
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/*/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1Path) DefaultImportPolicy() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPath {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/*/default-import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1PathAny) DefaultImportPolicy() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_DefaultImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/*/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1Path) ImportPolicy() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPath {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/inter-level-propagation-policies/level2-to-level1/*/import-policy"
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1PathAny) ImportPolicy() *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1_ImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1](
		"NetworkInstance_Protocol_Isis_Global_InterLevelPropagationPolicies_Level2ToLevel1",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_LspBitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBitPathAny struct {
	*ygnmi.NodePath
}

// AttachedBit (container): This container defines Attached Bit.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "attached-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBitPath) AttachedBit() *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"attached-bit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AttachedBit (container): This container defines Attached Bit.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "attached-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBitPathAny) AttachedBit() *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"attached-bit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OverloadBit (container): This container defines Overload Bit configuration.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "overload-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBitPath) OverloadBit() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"overload-bit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OverloadBit (container): This container defines Overload Bit configuration.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "overload-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBitPathAny) OverloadBit() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"overload-bit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/state/ignore-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/state/ignore-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ignore-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/state/ignore-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ignore-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit).IgnoreBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ignore-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/state/ignore-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ignore-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit).IgnoreBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ignore-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/config/ignore-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ignore-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit).IgnoreBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ignore-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/config/ignore-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ignore-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit).IgnoreBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/state/suppress-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/state/suppress-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/suppress-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/state/suppress-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit).SuppressBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/suppress-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/state/suppress-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "suppress-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit).SuppressBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/suppress-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/config/suppress-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit).SuppressBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/suppress-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/config/suppress-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "suppress-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit).SuppressBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPathAny struct {
	*ygnmi.NodePath
}

// IgnoreBit (leaf): When set to true, if the attached bit is set on an incoming Level 1
// IS-IS, the local system ignores it. In this case the local system
// does not set a default route to the L1L2 router advertising the PDU
// with the attached bit set.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ignore-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/*/ignore-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPath) IgnoreBit() *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ignore-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IgnoreBit (leaf): When set to true, if the attached bit is set on an incoming Level 1
// IS-IS, the local system ignores it. In this case the local system
// does not set a default route to the L1L2 router advertising the PDU
// with the attached bit set.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ignore-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/*/ignore-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPathAny) IgnoreBit() *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_IgnoreBitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ignore-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SuppressBit (leaf): When set to true, if the local IS acts as a L1L2 router, then the
// attached bit is not advertised in locally generated PDUs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/suppress-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/*/suppress-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPath) SuppressBit() *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SuppressBit (leaf): When set to true, if the local IS acts as a L1L2 router, then the
// attached bit is not advertised in locally generated PDUs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/suppress-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/attached-bit/*/suppress-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPathAny) SuppressBit() *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit_SuppressBitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "suppress-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit_AttachedBit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/advertise-high-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/advertise-high-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/advertise-high-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/advertise-high-metric"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertise-high-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).AdvertiseHighMetric
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/advertise-high-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/advertise-high-metric"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertise-high-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).AdvertiseHighMetric
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/advertise-high-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/config/advertise-high-metric"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertise-high-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).AdvertiseHighMetric
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/advertise-high-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/config/advertise-high-metric"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertise-high-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).AdvertiseHighMetric
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).SetBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).SetBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/config/set-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).SetBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/config/set-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).SetBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit-on-boot YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit-on-boot YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-bit-on-boot"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit-on-boot"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-bit-on-boot"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).SetBitOnBoot
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-bit-on-boot"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/state/set-bit-on-boot"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-bit-on-boot"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).SetBitOnBoot
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-bit-on-boot"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/config/set-bit-on-boot"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-bit-on-boot"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).SetBitOnBoot
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-bit-on-boot"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/config/set-bit-on-boot"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-bit-on-boot"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).SetBitOnBoot
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny struct {
	*ygnmi.NodePath
}

// AdvertiseHighMetric (leaf): When set to true, the local IS advertises links with the highest
// available metric regardless of their configured metric. The metric
// value is based on the metric style - if wide metrics are utilised
// the metric is advertised as 16777214, otherwise they are advertised
// with a value of 63.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/advertise-high-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/*/advertise-high-metric"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath) AdvertiseHighMetric() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertise-high-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdvertiseHighMetric (leaf): When set to true, the local IS advertises links with the highest
// available metric regardless of their configured metric. The metric
// value is based on the metric style - if wide metrics are utilised
// the metric is advertised as 16777214, otherwise they are advertised
// with a value of 63.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/advertise-high-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/*/advertise-high-metric"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny) AdvertiseHighMetric() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_AdvertiseHighMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertise-high-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ResetTriggerAny (list): This list describes ISIS Overload reset trigger reasons.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reset-triggers/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath) ResetTriggerAny() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reset-triggers", "reset-trigger"},
			map[string]interface{}{"reset-trigger": "*"},
			n,
		),
	}
	return ps
}

// ResetTriggerAny (list): This list describes ISIS Overload reset trigger reasons.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reset-triggers/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny) ResetTriggerAny() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reset-triggers", "reset-trigger"},
			map[string]interface{}{"reset-trigger": "*"},
			n,
		),
	}
	return ps
}

// ResetTrigger (list): This list describes ISIS Overload reset trigger reasons.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reset-triggers/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger"
//
//	ResetTrigger: oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath) ResetTrigger(ResetTrigger oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE) *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reset-triggers", "reset-trigger"},
			map[string]interface{}{"reset-trigger": ResetTrigger},
			n,
		),
	}
	return ps
}

// ResetTrigger (list): This list describes ISIS Overload reset trigger reasons.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reset-triggers/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger"
//
//	ResetTrigger: oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny) ResetTrigger(ResetTrigger oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE) *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reset-triggers", "reset-trigger"},
			map[string]interface{}{"reset-trigger": ResetTrigger},
			n,
		),
	}
	return ps
}

// ResetTriggerMap (list): This list describes ISIS Overload reset trigger reasons.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reset-triggers/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath) ResetTriggerMap() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMap {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"reset-triggers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResetTriggerMap (list): This list describes ISIS Overload reset trigger reasons.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reset-triggers/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny) ResetTriggerMap() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reset-triggers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetBit (leaf): When set to true, IS-IS overload bit is set.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/*/set-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath) SetBit() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetBit (leaf): When set to true, IS-IS overload bit is set.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/*/set-bit"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny) SetBit() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetBitOnBoot (leaf): When set to true, the IS-IS overload bit is set on system boot.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-bit-on-boot"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/*/set-bit-on-boot"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath) SetBitOnBoot() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-bit-on-boot"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetBitOnBoot (leaf): When set to true, the IS-IS overload bit is set on system boot.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-bit-on-boot"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/*/set-bit-on-boot"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny) SetBitOnBoot() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_SetBitOnBootPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-bit-on-boot"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/state/delay YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/state/delay YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/state/delay"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger).Delay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/state/delay"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger).Delay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/config/delay"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger).Delay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/config/delay"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger).Delay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/state/reset-trigger YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/state/reset-trigger YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/state/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reset-trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger).ResetTrigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/state/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reset-trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger).ResetTrigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/config/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reset-trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger).ResetTrigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/config/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reset-trigger"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger).ResetTrigger
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger YANG schema element.
type NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMapAny struct {
	*ygnmi.NodePath
}

// Delay (leaf): If a reset trigger is specified, the system should delay resetting
// the overload bit for the specified number of seconds after the
// trigger occurs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/*/delay"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPath) Delay() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Delay (leaf): If a reset trigger is specified, the system should delay resetting
// the overload bit for the specified number of seconds after the
// trigger occurs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/*/delay"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny) Delay() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_DelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ResetTrigger (leaf): In the case that the system sets the overload bit on start, the
// system should reset the bit (i.e., clear the overload bit) upon
// the specified trigger.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/*/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPath) ResetTrigger() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPath {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reset-trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ResetTrigger (leaf): In the case that the system sets the overload bit on start, the
// system should reset the bit (i.e., clear the overload bit) upon
// the specified trigger.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reset-trigger"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/lsp-bit/overload-bit/reset-triggers/reset-trigger/*/reset-trigger"
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny) ResetTrigger() *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger_ResetTriggerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reset-trigger"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMap) State() ygnmi.SingletonQuery[map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger] {
	return ygnmi.NewSingletonQuery[map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).ResetTrigger
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reset-triggers"},
			PostRelPath: []string{"openconfig-network-instance:reset-trigger"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger] {
	return ygnmi.NewWildcardQuery[map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).ResetTrigger
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reset-triggers"},
			PostRelPath: []string{"openconfig-network-instance:reset-trigger"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMap) Config() ygnmi.ConfigQuery[map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger] {
	return ygnmi.NewConfigQuery[map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).ResetTrigger
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reset-triggers"},
			PostRelPath: []string{"openconfig-network-instance:reset-trigger"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTriggerPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger] {
	return ygnmi.NewWildcardQuery[map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger](
		"NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisTypes_OVERLOAD_RESET_TRIGGER_TYPE]*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit_ResetTrigger, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit).ResetTrigger
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_LspBit_OverloadBit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reset-triggers"},
			PostRelPath: []string{"openconfig-network-instance:reset-trigger"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Global_MplsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls YANG schema element.
type NetworkInstance_Protocol_Isis_Global_MplsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_MplsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls YANG schema element.
type NetworkInstance_Protocol_Isis_Global_MplsPathAny struct {
	*ygnmi.NodePath
}

// IgpLdpSync (container): Configuration and operational state relating to synchronisation
// between the LDP and IS-IS
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-ldp-sync"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync"
func (n *NetworkInstance_Protocol_Isis_Global_MplsPath) IgpLdpSync() *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-ldp-sync"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IgpLdpSync (container): Configuration and operational state relating to synchronisation
// between the LDP and IS-IS
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-ldp-sync"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync"
func (n *NetworkInstance_Protocol_Isis_Global_MplsPathAny) IgpLdpSync() *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-ldp-sync"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_MplsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls](
		"NetworkInstance_Protocol_Isis_Global_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_MplsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls](
		"NetworkInstance_Protocol_Isis_Global_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_MplsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls](
		"NetworkInstance_Protocol_Isis_Global_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_MplsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls](
		"NetworkInstance_Protocol_Isis_Global_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/state/post-session-up-delay YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/state/post-session-up-delay YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/state/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "post-session-up-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync).PostSessionUpDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/state/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "post-session-up-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync).PostSessionUpDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/config/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "post-session-up-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync).PostSessionUpDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/config/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "post-session-up-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync).PostSessionUpDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): When set to true, rely on IGP/LDP synchronization. IGP cost for
// link is maintained at max until LDP adjacencies are established
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPath) Enabled() *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, rely on IGP/LDP synchronization. IGP cost for
// link is maintained at max until LDP adjacencies are established
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPathAny) Enabled() *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostSessionUpDelay (leaf): Specifies a delay, expressed in units of seconds,
// between the LDP session to the IGP neighbor being established, and
// it being considered synchronized by the IGP.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/*/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPath) PostSessionUpDelay() *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "post-session-up-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostSessionUpDelay (leaf): Specifies a delay, expressed in units of seconds,
// between the LDP session to the IGP neighbor being established, and
// it being considered synchronized by the IGP.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/mpls/igp-ldp-sync/*/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPathAny) PostSessionUpDelay() *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync_PostSessionUpDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "post-session-up-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSyncPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync](
		"NetworkInstance_Protocol_Isis_Global_Mpls_IgpLdpSync",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/nsr/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/nsr/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/nsr/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Nsr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Nsr).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Nsr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/nsr/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Nsr",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Nsr).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Nsr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/nsr/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Nsr",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Nsr).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Nsr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/nsr/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_Nsr",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Nsr).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Nsr) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_NsrPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/nsr YANG schema element.
type NetworkInstance_Protocol_Isis_Global_NsrPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_NsrPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/nsr YANG schema element.
type NetworkInstance_Protocol_Isis_Global_NsrPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/nsr/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_NsrPath) Enabled() *NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/nsr/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_NsrPathAny) Enabled() *NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Nsr_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_NsrPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Nsr] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Nsr](
		"NetworkInstance_Protocol_Isis_Global_Nsr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_NsrPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Nsr] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Nsr](
		"NetworkInstance_Protocol_Isis_Global_Nsr",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_NsrPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Nsr] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Nsr](
		"NetworkInstance_Protocol_Isis_Global_Nsr",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_NsrPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Nsr] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Nsr](
		"NetworkInstance_Protocol_Isis_Global_Nsr",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/state/reference-bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/state/reference-bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reference-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/state/reference-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reference-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth).ReferenceBandwidth
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reference-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/state/reference-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reference-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth).ReferenceBandwidth
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reference-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/config/reference-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reference-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth).ReferenceBandwidth
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reference-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/config/reference-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reference-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth).ReferenceBandwidth
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPathAny struct {
	*ygnmi.NodePath
}

// ReferenceBandwidth (leaf): ISIS Reference Bandwidth value
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reference-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/*/reference-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPath) ReferenceBandwidth() *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPath {
	ps := &NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reference-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReferenceBandwidth (leaf): ISIS Reference Bandwidth value
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reference-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/reference-bandwidth/*/reference-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPathAny) ReferenceBandwidth() *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth_ReferenceBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reference-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth](
		"NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth](
		"NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth](
		"NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_ReferenceBandwidthPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth](
		"NetworkInstance_Protocol_Isis_Global_ReferenceBandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/srgb YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/srgb YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srgb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/srgb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srgb"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Srgb
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srgb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/srgb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srgb"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Srgb
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/srgb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/config/srgb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "srgb"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Srgb
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/srgb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/config/srgb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "srgb"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Srgb
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/srlb YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/srlb YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/srlb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlb"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Srlb
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/state/srlb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlb"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Srlb
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/srlb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/config/srlb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "srlb"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Srlb
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/srlb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/config/srlb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "srlb"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).Srlb
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): When this leaf is set to true, the segment routing extensions are
// utilised within the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath) Enabled() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, the segment routing extensions are
// utilised within the IGP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny) Enabled() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlexAlgorithmBindingAny (list): Flex Algorithm binding
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algorithm-bindings/flex-algorithm-binding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath) FlexAlgorithmBindingAny() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algorithm-bindings", "flex-algorithm-binding"},
			map[string]interface{}{"flex-algo-id": "*"},
			n,
		),
	}
	return ps
}

// FlexAlgorithmBindingAny (list): Flex Algorithm binding
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algorithm-bindings/flex-algorithm-binding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny) FlexAlgorithmBindingAny() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algorithm-bindings", "flex-algorithm-binding"},
			map[string]interface{}{"flex-algo-id": "*"},
			n,
		),
	}
	return ps
}

// FlexAlgorithmBinding (list): Flex Algorithm binding
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algorithm-bindings/flex-algorithm-binding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding"
//
//	FlexAlgoId: uint8
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath) FlexAlgorithmBinding(FlexAlgoId uint8) *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algorithm-bindings", "flex-algorithm-binding"},
			map[string]interface{}{"flex-algo-id": FlexAlgoId},
			n,
		),
	}
	return ps
}

// FlexAlgorithmBinding (list): Flex Algorithm binding
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algorithm-bindings/flex-algorithm-binding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding"
//
//	FlexAlgoId: uint8
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny) FlexAlgorithmBinding(FlexAlgoId uint8) *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algorithm-bindings", "flex-algorithm-binding"},
			map[string]interface{}{"flex-algo-id": FlexAlgoId},
			n,
		),
	}
	return ps
}

// FlexAlgorithmBindingMap (list): Flex Algorithm binding
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algorithm-bindings/flex-algorithm-binding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath) FlexAlgorithmBindingMap() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMap {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algorithm-bindings"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FlexAlgorithmBindingMap (list): Flex Algorithm binding
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flex-algorithm-bindings/flex-algorithm-binding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny) FlexAlgorithmBindingMap() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flex-algorithm-bindings"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Srgb (leaf): A reference to the Segment Routing Global Block (SRGB) that is
// to be used by this IGP instance.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/srgb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/*/srgb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath) Srgb() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPath {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "srgb"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Srgb (leaf): A reference to the Segment Routing Global Block (SRGB) that is
// to be used by this IGP instance.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/srgb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/*/srgb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny) Srgb() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrgbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "srgb"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Srlb (leaf): A reference to the Segment Routing Local Block (SRLB) that is to
// be advertised by the IGP instance.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/srlb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/*/srlb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath) Srlb() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPath {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "srlb"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Srlb (leaf): A reference to the Segment Routing Local Block (SRLB) that is to
// be advertised by the IGP instance.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/srlb"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/*/srlb"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny) Srlb() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_SrlbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "srlb"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRoutingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/advertised YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/advertised YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/advertised"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/advertised"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertised"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).Advertised
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/advertised"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/advertised"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "advertised"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).Advertised
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/advertised"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/config/advertised"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertised"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).Advertised
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/advertised"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/config/advertised"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "advertised"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).Advertised
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/flex-algo-id YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/flex-algo-id YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flex-algo-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).FlexAlgoId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flex-algo-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).FlexAlgoId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/config/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flex-algo-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).FlexAlgoId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/config/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flex-algo-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).FlexAlgoId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/isis-level YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/isis-level YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/isis-level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/isis-level"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "isis-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).IsisLevel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/isis-level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/isis-level"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "isis-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).IsisLevel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/isis-level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/config/isis-level"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "isis-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).IsisLevel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/isis-level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/config/isis-level"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_LevelType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_LevelType](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "isis-level"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_LevelType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).IsisLevel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/participate YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/participate YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/participate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/participate"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "participate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).Participate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/participate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/state/participate"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "participate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).Participate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/participate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/config/participate"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "participate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).Participate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/participate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/config/participate"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "participate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding).Participate
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding YANG schema element.
type NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMapAny struct {
	*ygnmi.NodePath
}

// Advertised (leaf): Indicates if the Flex Algorithm definition is advertised by this node
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/advertised"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/*/advertised"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath) Advertised() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPath {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertised"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Advertised (leaf): Indicates if the Flex Algorithm definition is advertised by this node
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/advertised"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/*/advertised"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny) Advertised() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_AdvertisedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "advertised"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlexAlgoId (leaf): Flexible Algorithm identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/*/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath) FlexAlgoId() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPath {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flex-algo-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FlexAlgoId (leaf): Flexible Algorithm identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flex-algo-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/*/flex-algo-id"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny) FlexAlgoId() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_FlexAlgoIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flex-algo-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsisLevel (leaf): IS-IS Level associated with this Flex Algorithm
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/isis-level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/*/isis-level"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath) IsisLevel() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPath {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "isis-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsisLevel (leaf): IS-IS Level associated with this Flex Algorithm
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/isis-level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/*/isis-level"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny) IsisLevel() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_IsisLevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "isis-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Participate (leaf): Indicates if the node participates in this Flex Algorithm
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/participate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/*/participate"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath) Participate() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePath {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "participate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Participate (leaf): Indicates if the node participates in this Flex Algorithm
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/participate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/segment-routing/flex-algorithm-bindings/flex-algorithm-binding/*/participate"
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny) Participate() *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding_ParticipatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "participate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).FlexAlgorithmBinding
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:flex-algorithm-bindings"},
			PostRelPath: []string{"openconfig-network-instance:flex-algorithm-binding"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).FlexAlgorithmBinding
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:flex-algorithm-bindings"},
			PostRelPath: []string{"openconfig-network-instance:flex-algorithm-binding"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).FlexAlgorithmBinding
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:flex-algorithm-bindings"},
			PostRelPath: []string{"openconfig-network-instance:flex-algorithm-binding"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBindingPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding](
		"NetworkInstance_Protocol_Isis_Global_SegmentRouting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting_FlexAlgorithmBinding, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting).FlexAlgorithmBinding
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:flex-algorithm-bindings"},
			PostRelPath: []string{"openconfig-network-instance:flex-algorithm-binding"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/state/lsp-lifetime-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/state/lsp-lifetime-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-lifetime-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/state/lsp-lifetime-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-lifetime-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers).LspLifetimeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-lifetime-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/state/lsp-lifetime-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-lifetime-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers).LspLifetimeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-lifetime-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/config/lsp-lifetime-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-lifetime-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers).LspLifetimeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-lifetime-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/config/lsp-lifetime-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-lifetime-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers).LspLifetimeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/state/lsp-refresh-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/state/lsp-refresh-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-refresh-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/state/lsp-refresh-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-refresh-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers).LspRefreshInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-refresh-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/state/lsp-refresh-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-refresh-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers).LspRefreshInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-refresh-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/config/lsp-refresh-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-refresh-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers).LspRefreshInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-refresh-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/config/lsp-refresh-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-refresh-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers).LspRefreshInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_TimersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers YANG schema element.
type NetworkInstance_Protocol_Isis_Global_TimersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_TimersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers YANG schema element.
type NetworkInstance_Protocol_Isis_Global_TimersPathAny struct {
	*ygnmi.NodePath
}

// LspGeneration (container): This container defines ISIS LSP Generation.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-generation"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation"
func (n *NetworkInstance_Protocol_Isis_Global_TimersPath) LspGeneration() *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-generation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LspGeneration (container): This container defines ISIS LSP Generation.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-generation"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation"
func (n *NetworkInstance_Protocol_Isis_Global_TimersPathAny) LspGeneration() *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-generation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LspLifetimeInterval (leaf): Time interval in seconds that specifies how long an LSP remains in
// LSDB without being refreshed.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-lifetime-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/*/lsp-lifetime-interval"
func (n *NetworkInstance_Protocol_Isis_Global_TimersPath) LspLifetimeInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-lifetime-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspLifetimeInterval (leaf): Time interval in seconds that specifies how long an LSP remains in
// LSDB without being refreshed.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-lifetime-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/*/lsp-lifetime-interval"
func (n *NetworkInstance_Protocol_Isis_Global_TimersPathAny) LspLifetimeInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspLifetimeIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-lifetime-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspRefreshInterval (leaf): Time interval in seconds that specifies how often route topology
// that a device originates is transmitted in LSPs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-refresh-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/*/lsp-refresh-interval"
func (n *NetworkInstance_Protocol_Isis_Global_TimersPath) LspRefreshInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-refresh-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspRefreshInterval (leaf): Time interval in seconds that specifies how often route topology
// that a device originates is transmitted in LSPs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-refresh-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/*/lsp-refresh-interval"
func (n *NetworkInstance_Protocol_Isis_Global_TimersPathAny) LspRefreshInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspRefreshIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-refresh-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Spf (container): This container defines ISIS SPF timer settings.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "spf"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf"
func (n *NetworkInstance_Protocol_Isis_Global_TimersPath) Spf() *NetworkInstance_Protocol_Isis_Global_Timers_SpfPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_SpfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"spf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Spf (container): This container defines ISIS SPF timer settings.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "spf"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf"
func (n *NetworkInstance_Protocol_Isis_Global_TimersPathAny) Spf() *NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"spf"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_TimersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_TimersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_TimersPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_TimersPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers](
		"NetworkInstance_Protocol_Isis_Global_Timers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/adaptive-timer YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/adaptive-timer YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adaptive-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/adaptive-timer"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AdaptiveTimerType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AdaptiveTimerType](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adaptive-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AdaptiveTimerType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).AdaptiveTimer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adaptive-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/adaptive-timer"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AdaptiveTimerType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AdaptiveTimerType](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adaptive-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AdaptiveTimerType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).AdaptiveTimer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-first-wait-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-first-wait-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-first-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-first-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-first-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspFirstWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-first-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-first-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-first-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspFirstWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-first-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/config/lsp-first-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-first-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspFirstWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-first-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/config/lsp-first-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-first-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspFirstWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-max-wait-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-max-wait-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-max-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-max-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-max-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspMaxWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-max-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-max-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-max-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspMaxWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-max-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/config/lsp-max-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-max-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspMaxWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-max-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/config/lsp-max-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-max-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspMaxWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-second-wait-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-second-wait-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-second-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-second-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-second-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspSecondWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-second-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/lsp-second-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-second-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspSecondWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-second-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/config/lsp-second-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-second-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspSecondWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-second-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/config/lsp-second-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-second-wait-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration).LspSecondWaitInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny struct {
	*ygnmi.NodePath
}

// AdaptiveTimer (leaf): ISIS adaptive timer types (linear, exponential).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adaptive-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/adaptive-timer"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath) AdaptiveTimer() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adaptive-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdaptiveTimer (leaf): ISIS adaptive timer types (linear, exponential).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adaptive-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/state/adaptive-timer"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny) AdaptiveTimer() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_AdaptiveTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adaptive-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspFirstWaitInterval (leaf): Time interval in milliseconds that specifies the first LSP generation
// delay.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-first-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/*/lsp-first-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath) LspFirstWaitInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-first-wait-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspFirstWaitInterval (leaf): Time interval in milliseconds that specifies the first LSP generation
// delay.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-first-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/*/lsp-first-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny) LspFirstWaitInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspFirstWaitIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-first-wait-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspMaxWaitInterval (leaf): Time interval in milliseconds that specifies max interval between
// two consecutive occurrences of an LSP being generated.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-max-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/*/lsp-max-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath) LspMaxWaitInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-max-wait-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspMaxWaitInterval (leaf): Time interval in milliseconds that specifies max interval between
// two consecutive occurrences of an LSP being generated.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-max-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/*/lsp-max-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny) LspMaxWaitInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspMaxWaitIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-max-wait-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspSecondWaitInterval (leaf): Time interval in milliseconds that specifies the millisecond LSP
// generation delay.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-second-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/*/lsp-second-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath) LspSecondWaitInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-second-wait-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspSecondWaitInterval (leaf): Time interval in milliseconds that specifies the millisecond LSP
// generation delay.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-second-wait-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/lsp-generation/*/lsp-second-wait-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny) LspSecondWaitInterval() *NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration_LspSecondWaitIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-second-wait-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Timers_LspGenerationPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration](
		"NetworkInstance_Protocol_Isis_Global_Timers_LspGeneration",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/adaptive-timer YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/adaptive-timer YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adaptive-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/adaptive-timer"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AdaptiveTimerType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AdaptiveTimerType](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adaptive-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AdaptiveTimerType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).AdaptiveTimer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adaptive-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/adaptive-timer"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AdaptiveTimerType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AdaptiveTimerType](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adaptive-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AdaptiveTimerType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).AdaptiveTimer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-first-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-first-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-first-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-first-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-first-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfFirstInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-first-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-first-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-first-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfFirstInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/spf-first-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/config/spf-first-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "spf-first-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfFirstInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/spf-first-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/config/spf-first-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "spf-first-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfFirstInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-hold-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-hold-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-hold-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-hold-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-hold-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfHoldInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-hold-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-hold-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-hold-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfHoldInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/spf-hold-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/config/spf-hold-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "spf-hold-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfHoldInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/spf-hold-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/config/spf-hold-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "spf-hold-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfHoldInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-second-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-second-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-second-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-second-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-second-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfSecondInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-second-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/spf-second-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-second-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfSecondInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/spf-second-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/config/spf-second-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "spf-second-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfSecondInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/spf-second-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/config/spf-second-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "spf-second-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf).SpfSecondInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Timers_SpfPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_SpfPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/timers/spf YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny struct {
	*ygnmi.NodePath
}

// AdaptiveTimer (leaf): ISIS adaptive timer types (linear, exponential).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adaptive-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/adaptive-timer"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPath) AdaptiveTimer() *NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adaptive-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdaptiveTimer (leaf): ISIS adaptive timer types (linear, exponential).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adaptive-timer"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/state/adaptive-timer"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny) AdaptiveTimer() *NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_Spf_AdaptiveTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adaptive-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfFirstInterval (leaf): Time interval in milliseconds between the
// detection of topology change and when the SPF algorithm runs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/spf-first-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/*/spf-first-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPath) SpfFirstInterval() *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "spf-first-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfFirstInterval (leaf): Time interval in milliseconds between the
// detection of topology change and when the SPF algorithm runs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/spf-first-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/*/spf-first-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny) SpfFirstInterval() *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfFirstIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "spf-first-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfHoldInterval (leaf): SPF Hold Down time interval in milliseconds.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/spf-hold-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/*/spf-hold-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPath) SpfHoldInterval() *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "spf-hold-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfHoldInterval (leaf): SPF Hold Down time interval in milliseconds.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/spf-hold-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/*/spf-hold-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny) SpfHoldInterval() *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfHoldIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "spf-hold-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfSecondInterval (leaf): Time interval in milliseconds between the first and second
// SPF calculation.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/spf-second-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/*/spf-second-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPath) SpfSecondInterval() *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "spf-second-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfSecondInterval (leaf): Time interval in milliseconds between the first and second
// SPF calculation.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/spf-second-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/timers/spf/*/spf-second-interval"
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny) SpfSecondInterval() *NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Timers_Spf_SpfSecondIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "spf-second-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_Timers_SpfPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Timers_Spf](
		"NetworkInstance_Protocol_Isis_Global_Timers_Spf",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/transport/state/lsp-mtu-size YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/transport/state/lsp-mtu-size YANG schema element.
type NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-mtu-size"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/transport/state/lsp-mtu-size"
func (n *NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-mtu-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Transport).LspMtuSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-mtu-size"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/transport/state/lsp-mtu-size"
func (n *NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-mtu-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Transport).LspMtuSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-mtu-size"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/transport/config/lsp-mtu-size"
func (n *NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-mtu-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Transport).LspMtuSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-mtu-size"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/transport/config/lsp-mtu-size"
func (n *NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Global_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-mtu-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Global_Transport).LspMtuSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Global_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Global_TransportPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/transport YANG schema element.
type NetworkInstance_Protocol_Isis_Global_TransportPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Global_TransportPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/global/transport YANG schema element.
type NetworkInstance_Protocol_Isis_Global_TransportPathAny struct {
	*ygnmi.NodePath
}

// LspMtuSize (leaf): The maximum size in bytes of an IS-IS Link state PDU.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-mtu-size"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/transport/*/lsp-mtu-size"
func (n *NetworkInstance_Protocol_Isis_Global_TransportPath) LspMtuSize() *NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePath {
	ps := &NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-mtu-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspMtuSize (leaf): The maximum size in bytes of an IS-IS Link state PDU.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-mtu-size"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/global/transport/*/lsp-mtu-size"
func (n *NetworkInstance_Protocol_Isis_Global_TransportPathAny) LspMtuSize() *NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePathAny {
	ps := &NetworkInstance_Protocol_Isis_Global_Transport_LspMtuSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-mtu-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_TransportPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Transport] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Global_Transport](
		"NetworkInstance_Protocol_Isis_Global_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_TransportPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Transport] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Transport](
		"NetworkInstance_Protocol_Isis_Global_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_TransportPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Transport] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Global_Transport](
		"NetworkInstance_Protocol_Isis_Global_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Global_TransportPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Transport] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Global_Transport](
		"NetworkInstance_Protocol_Isis_Global_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/circuit-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/circuit-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/circuit-type"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitTypePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_CircuitType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_CircuitType](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "circuit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_CircuitType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).CircuitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/circuit-type"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitTypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_CircuitType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_CircuitType](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "circuit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_CircuitType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).CircuitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/circuit-type"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitTypePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_CircuitType] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_CircuitType](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "circuit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_CircuitType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).CircuitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/circuit-type"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitTypePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_CircuitType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_CircuitType](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "circuit-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_CircuitType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).CircuitType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_HelloPaddingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/hello-padding YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_HelloPaddingPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_HelloPaddingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/hello-padding YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_HelloPaddingPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/hello-padding"
func (n *NetworkInstance_Protocol_Isis_Interface_HelloPaddingPath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_HelloPaddingType] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_HelloPaddingType](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-padding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_HelloPaddingType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).HelloPadding
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/hello-padding"
func (n *NetworkInstance_Protocol_Isis_Interface_HelloPaddingPathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_HelloPaddingType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_HelloPaddingType](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-padding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_HelloPaddingType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).HelloPadding
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/hello-padding"
func (n *NetworkInstance_Protocol_Isis_Interface_HelloPaddingPath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_HelloPaddingType] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_HelloPaddingType](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-padding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_HelloPaddingType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).HelloPadding
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/hello-padding"
func (n *NetworkInstance_Protocol_Isis_Interface_HelloPaddingPathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_HelloPaddingType] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_HelloPaddingType](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-padding"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_HelloPaddingType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).HelloPadding
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Protocol_Isis_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_PassivePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/passive YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_PassivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_PassivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/passive YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_PassivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_PassivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "passive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Passive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/state/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_PassivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "passive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Passive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_PassivePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "passive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Passive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/config/passive"
func (n *NetworkInstance_Protocol_Isis_Interface_PassivePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "passive"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Passive
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Isis_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Isis_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Isis_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Isis_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AfAny (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) AfAny() *NetworkInstance_Protocol_Isis_Interface_AfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_AfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": "*", "safi-name": "*"},
			n,
		),
	}
	return ps
}

// AfAny (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) AfAny() *NetworkInstance_Protocol_Isis_Interface_AfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_AfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": "*", "safi-name": "*"},
			n,
		),
	}
	return ps
}

// WithAfiName sets NetworkInstance_Protocol_Isis_Interface_AfPathAny's key "afi-name" to the specified value.
// AfiName: oc.E_IsisTypes_AFI_TYPE
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathAny) WithAfiName(AfiName oc.E_IsisTypes_AFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_AfPathAny {
	ygnmi.ModifyKey(n.NodePath, "afi-name", AfiName)
	return n
}

// WithSafiName sets NetworkInstance_Protocol_Isis_Interface_AfPathAny's key "safi-name" to the specified value.
// SafiName: oc.E_IsisTypes_SAFI_TYPE
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathAny) WithSafiName(SafiName oc.E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_AfPathAny {
	ygnmi.ModifyKey(n.NodePath, "safi-name", SafiName)
	return n
}

// Af (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af"
//
//	AfiName: oc.E_IsisTypes_AFI_TYPE
//	SafiName: oc.E_IsisTypes_SAFI_TYPE
func (n *NetworkInstance_Protocol_Isis_InterfacePath) Af(AfiName oc.E_IsisTypes_AFI_TYPE, SafiName oc.E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_AfPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_AfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": AfiName, "safi-name": SafiName},
			n,
		),
	}
	return ps
}

// Af (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af"
//
//	AfiName: oc.E_IsisTypes_AFI_TYPE
//	SafiName: oc.E_IsisTypes_SAFI_TYPE
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) Af(AfiName oc.E_IsisTypes_AFI_TYPE, SafiName oc.E_IsisTypes_SAFI_TYPE) *NetworkInstance_Protocol_Isis_Interface_AfPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_AfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi", "af"},
			map[string]interface{}{"afi-name": AfiName, "safi-name": SafiName},
			n,
		),
	}
	return ps
}

// AfMap (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) AfMap() *NetworkInstance_Protocol_Isis_Interface_AfPathMap {
	ps := &NetworkInstance_Protocol_Isis_Interface_AfPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AfMap (list): Address-family/Subsequent Address-family list.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afi-safi/af"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) AfMap() *NetworkInstance_Protocol_Isis_Interface_AfPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_AfPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afi-safi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): This container defines ISIS authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) Authentication() *NetworkInstance_Protocol_Isis_Interface_AuthenticationPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_AuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): This container defines ISIS authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) Authentication() *NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Bfd (container): This container defines BFD.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) Bfd() *NetworkInstance_Protocol_Isis_Interface_BfdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_BfdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Bfd (container): This container defines BFD.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) Bfd() *NetworkInstance_Protocol_Isis_Interface_BfdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_BfdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CircuitCounters (container): This container defines state information for ISIS circuit counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "circuit-counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) CircuitCounters() *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"circuit-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CircuitCounters (container): This container defines state information for ISIS circuit counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "circuit-counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) CircuitCounters() *NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitCountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"circuit-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CircuitType (leaf): ISIS circuit type (p2p, broadcast).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/circuit-type"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) CircuitType() *NetworkInstance_Protocol_Isis_Interface_CircuitTypePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "circuit-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CircuitType (leaf): ISIS circuit type (p2p, broadcast).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/circuit-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/circuit-type"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) CircuitType() *NetworkInstance_Protocol_Isis_Interface_CircuitTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_CircuitTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "circuit-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "enable-bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) EnableBfd() *NetworkInstance_Protocol_Isis_Interface_EnableBfdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EnableBfd (container): Enable BFD for liveliness detection to the next-hop or
// neighbour.
//
//	Defining module:      "openconfig-bfd"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "enable-bfd"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/enable-bfd"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) EnableBfd() *NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnableBfdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"enable-bfd"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/enabled"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) Enabled() *NetworkInstance_Protocol_Isis_Interface_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/enabled"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) Enabled() *NetworkInstance_Protocol_Isis_Interface_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GracefulRestart (container): This container defines ISIS Graceful Restart for interface
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) GracefulRestart() *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_GracefulRestartPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GracefulRestart (container): This container defines ISIS Graceful Restart for interface
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/graceful-restart"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) GracefulRestart() *NetworkInstance_Protocol_Isis_Interface_GracefulRestartPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_GracefulRestartPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HelloPadding (leaf): Controls the padding type for IS-IS Hello PDUs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/hello-padding"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) HelloPadding() *NetworkInstance_Protocol_Isis_Interface_HelloPaddingPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_HelloPaddingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-padding"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloPadding (leaf): Controls the padding type for IS-IS Hello PDUs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-padding"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/hello-padding"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) HelloPadding() *NetworkInstance_Protocol_Isis_Interface_HelloPaddingPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_HelloPaddingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-padding"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Interface for which ISIS configuration is to be applied.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) InterfaceId() *NetworkInstance_Protocol_Isis_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Interface for which ISIS configuration is to be applied.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) InterfaceId() *NetworkInstance_Protocol_Isis_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) InterfaceRef() *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/interface-ref"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) InterfaceRef() *NetworkInstance_Protocol_Isis_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LevelAny (list): Configuration and operational state parameters related to a
// particular level on an IS-IS enabled interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) LevelAny() *NetworkInstance_Protocol_Isis_Interface_LevelPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels", "level"},
			map[string]interface{}{"level-number": "*"},
			n,
		),
	}
	return ps
}

// LevelAny (list): Configuration and operational state parameters related to a
// particular level on an IS-IS enabled interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) LevelAny() *NetworkInstance_Protocol_Isis_Interface_LevelPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels", "level"},
			map[string]interface{}{"level-number": "*"},
			n,
		),
	}
	return ps
}

// Level (list): Configuration and operational state parameters related to a
// particular level on an IS-IS enabled interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level"
//
//	LevelNumber: uint8
func (n *NetworkInstance_Protocol_Isis_InterfacePath) Level(LevelNumber uint8) *NetworkInstance_Protocol_Isis_Interface_LevelPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_LevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels", "level"},
			map[string]interface{}{"level-number": LevelNumber},
			n,
		),
	}
	return ps
}

// Level (list): Configuration and operational state parameters related to a
// particular level on an IS-IS enabled interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level"
//
//	LevelNumber: uint8
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) Level(LevelNumber uint8) *NetworkInstance_Protocol_Isis_Interface_LevelPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_LevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels", "level"},
			map[string]interface{}{"level-number": LevelNumber},
			n,
		),
	}
	return ps
}

// LevelMap (list): Configuration and operational state parameters related to a
// particular level on an IS-IS enabled interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) LevelMap() *NetworkInstance_Protocol_Isis_Interface_LevelPathMap {
	ps := &NetworkInstance_Protocol_Isis_Interface_LevelPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LevelMap (list): Configuration and operational state parameters related to a
// particular level on an IS-IS enabled interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "levels/level"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) LevelMap() *NetworkInstance_Protocol_Isis_Interface_LevelPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_LevelPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"levels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): Configuration and operational state relating to MPLS-related
// features in IS-IS
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) Mpls() *NetworkInstance_Protocol_Isis_Interface_MplsPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_MplsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): Configuration and operational state relating to MPLS-related
// features in IS-IS
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) Mpls() *NetworkInstance_Protocol_Isis_Interface_MplsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_MplsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Passive (leaf): When set to true, the referenced interface is a passive interface
// such that it is not eligible to establish adjacencies with other
// systems, but is advertised into the IS-IS topology.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/passive"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) Passive() *NetworkInstance_Protocol_Isis_Interface_PassivePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_PassivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "passive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Passive (leaf): When set to true, the referenced interface is a passive interface
// such that it is not eligible to establish adjacencies with other
// systems, but is advertised into the IS-IS topology.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/passive"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/*/passive"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) Passive() *NetworkInstance_Protocol_Isis_Interface_PassivePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_PassivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "passive"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Timers (container): This container describes ISIS interface timers configuration
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "timers"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) Timers() *NetworkInstance_Protocol_Isis_Interface_TimersPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_TimersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Timers (container): This container describes ISIS interface timers configuration
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "timers"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) Timers() *NetworkInstance_Protocol_Isis_Interface_TimersPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_TimersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// WeightedEcmp (container): This container defines ISIS interface weighted ECMP options
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "weighted-ecmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp"
func (n *NetworkInstance_Protocol_Isis_InterfacePath) WeightedEcmp() *NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"weighted-ecmp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// WeightedEcmp (container): This container defines ISIS interface weighted ECMP options
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "weighted-ecmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp"
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) WeightedEcmp() *NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"weighted-ecmp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface](
		"NetworkInstance_Protocol_Isis",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface](
		"NetworkInstance_Protocol_Isis",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface](
		"NetworkInstance_Protocol_Isis",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Interface](
		"NetworkInstance_Protocol_Isis",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/afi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/config/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_AFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Af_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Af_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Af_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Af_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/safi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/safi-name YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/state/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/config/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/config/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_SAFI_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_SAFI_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "safi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_SAFI_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Af).SafiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Af) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_AfPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_AfPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_AfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_AfPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_AfPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_AfPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_AfPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_AfPathMapAny struct {
	*ygnmi.NodePath
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_AfPath) AfiName() *NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiName (leaf): Address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/*/afi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathAny) AfiName() *NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Af_AfiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_AfPath) Enabled() *NetworkInstance_Protocol_Isis_Interface_Af_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Af_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathAny) Enabled() *NetworkInstance_Protocol_Isis_Interface_Af_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Af_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SafiName (leaf): Subsequent address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/*/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_AfPath) SafiName() *NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SafiName (leaf): Subsequent address-family type.
//
//	Defining module:      "openconfig-isis-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/safi-name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/afi-safi/af/*/safi-name"
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathAny) SafiName() *NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Af_SafiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "safi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AfPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Af] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Af](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Af] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Af](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AfPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Af] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Af](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Af] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Af](
		"NetworkInstance_Protocol_Isis_Interface_Af",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af](
		"NetworkInstance_Protocol_Isis_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AfPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af](
		"NetworkInstance_Protocol_Isis_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Isis_Interface_Af_Key]*oc.NetworkInstance_Protocol_Isis_Interface_Af, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface).Af
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:afi-safi"},
			PostRelPath: []string{"openconfig-network-instance:af"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-mode YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-mode YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-password YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-password YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-type YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePath) State() ygnmi.SingletonQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePathAny) State() ygnmi.WildcardQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePath) Config() ygnmi.ConfigQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePathAny) Config() ygnmi.WildcardQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/keychain YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/keychain YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/state/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/config/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Authentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_AuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_AuthenticationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny struct {
	*ygnmi.NodePath
}

// AuthMode (leaf): The type of authentication used in the applicable IS-IS PDUs.
//
// This leaf along with the sibling leaf 'auth-password' can be used
// to configure the simple key authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPath) AuthMode() *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthMode (leaf): The type of authentication used in the applicable IS-IS PDUs.
//
// This leaf along with the sibling leaf 'auth-password' can be used
// to configure the simple key authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny) AuthMode() *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_AuthModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPassword (leaf): The authentication key used in the applicable IS-IS PDUs. The key in the
// packet may be encrypted according to the configured authentication type.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPath) AuthPassword() *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPassword (leaf): The authentication key used in the applicable IS-IS PDUs. The key in the
// packet may be encrypted according to the configured authentication type.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/auth-password"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny) AuthPassword() *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_AuthPasswordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthType (leaf): The type of authentication used in the applicable IS-IS PDUs
// (simple_key, keychain).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPath) AuthType() *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthType (leaf): The type of authentication used in the applicable IS-IS PDUs
// (simple_key, keychain).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/auth-type"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny) AuthType() *NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_AuthTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enabled or disable ISIS Hello authentication. Hello authentication
// is used on a per-interface basis to authenticate adjacencies on the
// interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPath) Enabled() *NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enabled or disable ISIS Hello authentication. Hello authentication
// is used on a per-interface basis to authenticate adjacencies on the
// interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny) Enabled() *NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Keychain (leaf): Reference to a keychain that should be used for hello authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPath) Keychain() *NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "keychain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Keychain (leaf): Reference to a keychain that should be used for hello authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication/*/keychain"
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny) Keychain() *NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Authentication_KeychainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "keychain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Authentication] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Authentication](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Authentication](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Authentication] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Authentication](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_AuthenticationPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Authentication](
		"NetworkInstance_Protocol_Isis_Interface_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/state/bfd-tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/state/bfd-tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bfd-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/state/bfd-tlv"
func (n *NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Bfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bfd-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Bfd).BfdTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Bfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bfd-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/state/bfd-tlv"
func (n *NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Bfd",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bfd-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Bfd).BfdTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Bfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bfd-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/config/bfd-tlv"
func (n *NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Bfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bfd-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Bfd).BfdTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Bfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bfd-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/config/bfd-tlv"
func (n *NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Bfd",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bfd-tlv"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Bfd).BfdTlv
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Bfd) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_BfdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_BfdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_BfdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_BfdPathAny struct {
	*ygnmi.NodePath
}

// BfdTlv (leaf): When set to true, BFD TLV is used. This enables support for the IS-IS
// BFD TLV options, which specify that a BFD session must be established
// before an IS-IS adjacency can transition to the established state.
// This option should be enabled on all IS-IS neighbors on a shared
// interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bfd-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/*/bfd-tlv"
func (n *NetworkInstance_Protocol_Isis_Interface_BfdPath) BfdTlv() *NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bfd-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BfdTlv (leaf): When set to true, BFD TLV is used. This enables support for the IS-IS
// BFD TLV options, which specify that a BFD session must be established
// before an IS-IS adjacency can transition to the established state.
// This option should be enabled on all IS-IS neighbors on a shared
// interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bfd-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/bfd/*/bfd-tlv"
func (n *NetworkInstance_Protocol_Isis_Interface_BfdPathAny) BfdTlv() *NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Bfd_BfdTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bfd-tlv"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_BfdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Bfd] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Bfd](
		"NetworkInstance_Protocol_Isis_Interface_Bfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_BfdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Bfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Bfd](
		"NetworkInstance_Protocol_Isis_Interface_Bfd",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_BfdPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Bfd] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Bfd](
		"NetworkInstance_Protocol_Isis_Interface_Bfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_BfdPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Bfd] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Bfd](
		"NetworkInstance_Protocol_Isis_Interface_Bfd",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-changes YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-changes YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adj-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-changes"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adj-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).AdjChanges
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adj-changes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/circuit-counters/state/adj-changes"
func (n *NetworkInstance_Protocol_Isis_Interface_CircuitCounters_AdjChangesPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_CircuitCounters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adj-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters).AdjChanges
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_CircuitCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
