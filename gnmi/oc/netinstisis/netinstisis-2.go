/*
Package netinstisis is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package netinstisis

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny struct {
	*ygnmi.NodePath
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_DroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ProcessedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_RetransmitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/psnp/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_PsnpPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Psnp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/dropped YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Dropped
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/processed YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "processed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Processed
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/received YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Received
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/retransmit YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Retransmit
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/sent YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown).Sent
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny struct {
	*ygnmi.NodePath
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dropped (leaf): The number of the specified type of PDU received on the interface
// that have been dropped.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dropped"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/dropped"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny) Dropped() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_DroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Processed (leaf): The number of the specified type of PDU received on the interface
// that have been processed by the local system.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/processed"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/processed"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny) Processed() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ProcessedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "processed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Received (leaf): The number of the specified type of PDU received on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/received"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny) Received() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Retransmit (leaf): The number of the specified type of PDU that that have been
// retransmitted by the local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retransmit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/retransmit"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny) Retransmit() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_RetransmitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "retransmit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sent (leaf): The number of the specified type of PDU that have been sent by the
// local system on the interface.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/packet-counters/unknown/state/sent"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny) Sent() *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_UnknownPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown](
		"NetworkInstance_Protocol_Isis_Interface_Level_PacketCounters_Unknown",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/state/hello-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/state/hello-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/state/hello-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers).HelloInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/state/hello-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers).HelloInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/config/hello-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers).HelloInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/config/hello-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers).HelloInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/state/hello-multiplier YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/state/hello-multiplier YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/state/hello-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers).HelloMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/state/hello-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers).HelloMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/config/hello-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers).HelloMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/config/hello-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-multiplier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers).HelloMultiplier
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Level_TimersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_TimersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Level_TimersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Level_TimersPathAny struct {
	*ygnmi.NodePath
}

// HelloInterval (leaf): ISIS hello-interval value.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/*/hello-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_TimersPath) HelloInterval() *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): ISIS hello-interval value.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/*/hello-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_TimersPathAny) HelloInterval() *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloMultiplier (leaf): ISIS hello-multiplier value.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/*/hello-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_TimersPath) HelloMultiplier() *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloMultiplier (leaf): ISIS hello-multiplier value.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-multiplier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/timers/*/hello-multiplier"
func (n *NetworkInstance_Protocol_Isis_Interface_Level_TimersPathAny) HelloMultiplier() *NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Level_Timers_HelloMultiplierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-multiplier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_TimersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_TimersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_TimersPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Level_TimersPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Level_Timers](
		"NetworkInstance_Protocol_Isis_Interface_Level_Timers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_MplsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_MplsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_MplsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_MplsPathAny struct {
	*ygnmi.NodePath
}

// IgpLdpSync (container): Configuration and operational state relating to synchronisation
// between the LDP and IS-IS
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-ldp-sync"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync"
func (n *NetworkInstance_Protocol_Isis_Interface_MplsPath) IgpLdpSync() *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-ldp-sync"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IgpLdpSync (container): Configuration and operational state relating to synchronisation
// between the LDP and IS-IS
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-ldp-sync"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync"
func (n *NetworkInstance_Protocol_Isis_Interface_MplsPathAny) IgpLdpSync() *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-ldp-sync"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_MplsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls](
		"NetworkInstance_Protocol_Isis_Interface_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_MplsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls](
		"NetworkInstance_Protocol_Isis_Interface_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_MplsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls](
		"NetworkInstance_Protocol_Isis_Interface_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_MplsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls](
		"NetworkInstance_Protocol_Isis_Interface_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/state/post-session-up-delay YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/state/post-session-up-delay YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/state/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "post-session-up-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync).PostSessionUpDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/state/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "post-session-up-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync).PostSessionUpDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/config/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "post-session-up-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync).PostSessionUpDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/config/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "post-session-up-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync).PostSessionUpDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): When set to true, rely on IGP/LDP synchronization. IGP cost for
// link is maintained at max until LDP adjacencies are established
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPath) Enabled() *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, rely on IGP/LDP synchronization. IGP cost for
// link is maintained at max until LDP adjacencies are established
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPathAny) Enabled() *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostSessionUpDelay (leaf): Specifies a delay, expressed in units of seconds,
// between the LDP session to the IGP neighbor being established, and
// it being considered synchronized by the IGP.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/*/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPath) PostSessionUpDelay() *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "post-session-up-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostSessionUpDelay (leaf): Specifies a delay, expressed in units of seconds,
// between the LDP session to the IGP neighbor being established, and
// it being considered synchronized by the IGP.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/post-session-up-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/mpls/igp-ldp-sync/*/post-session-up-delay"
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPathAny) PostSessionUpDelay() *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync_PostSessionUpDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "post-session-up-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSyncPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync](
		"NetworkInstance_Protocol_Isis_Interface_Mpls_IgpLdpSync",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/state/csnp-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/state/csnp-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/csnp-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/state/csnp-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "csnp-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Timers).CsnpInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/csnp-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/state/csnp-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "csnp-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Timers).CsnpInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/csnp-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/config/csnp-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "csnp-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Timers).CsnpInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/csnp-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/config/csnp-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "csnp-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Timers).CsnpInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/state/lsp-pacing-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/state/lsp-pacing-interval YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-pacing-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/state/lsp-pacing-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-pacing-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Timers).LspPacingInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-pacing-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/state/lsp-pacing-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-pacing-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Timers).LspPacingInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-pacing-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/config/lsp-pacing-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-pacing-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Timers).LspPacingInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsp-pacing-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/config/lsp-pacing-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsp-pacing-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_Timers).LspPacingInterval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_Timers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_TimersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_TimersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_TimersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_TimersPathAny struct {
	*ygnmi.NodePath
}

// CsnpInterval (leaf): The interval, specified in seconds, at which periodic CSNP packets
// should be transmitted by the local IS.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/csnp-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/*/csnp-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_TimersPath) CsnpInterval() *NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "csnp-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CsnpInterval (leaf): The interval, specified in seconds, at which periodic CSNP packets
// should be transmitted by the local IS.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/csnp-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/*/csnp-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_TimersPathAny) CsnpInterval() *NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Timers_CsnpIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "csnp-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspPacingInterval (leaf): The interval interval in milliseconds between the
// detection of topology change and when the SPF algorithm runs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-pacing-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/*/lsp-pacing-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_TimersPath) LspPacingInterval() *NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-pacing-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspPacingInterval (leaf): The interval interval in milliseconds between the
// detection of topology change and when the SPF algorithm runs.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-pacing-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/timers/*/lsp-pacing-interval"
func (n *NetworkInstance_Protocol_Isis_Interface_TimersPathAny) LspPacingInterval() *NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_Timers_LspPacingIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-pacing-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_TimersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Timers] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Timers](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_TimersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Timers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Timers](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_TimersPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Timers] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Timers](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_TimersPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Timers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_Timers](
		"NetworkInstance_Protocol_Isis_Interface_Timers",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/state/load-balancing-weight YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/state/load-balancing-weight YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/load-balancing-weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/state/load-balancing-weight"
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union](
		"NetworkInstance_Protocol_Isis_Interface_WeightedEcmp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "load-balancing-weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp).LoadBalancingWeight
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/load-balancing-weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/state/load-balancing-weight"
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union](
		"NetworkInstance_Protocol_Isis_Interface_WeightedEcmp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "load-balancing-weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp).LoadBalancingWeight
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/load-balancing-weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/config/load-balancing-weight"
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union](
		"NetworkInstance_Protocol_Isis_Interface_WeightedEcmp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "load-balancing-weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp).LoadBalancingWeight
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/load-balancing-weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/config/load-balancing-weight"
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union](
		"NetworkInstance_Protocol_Isis_Interface_WeightedEcmp",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "load-balancing-weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeight_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp).LoadBalancingWeight
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp YANG schema element.
type NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPathAny struct {
	*ygnmi.NodePath
}

// LoadBalancingWeight (leaf): The load-balancing weight of the interface, which applies when
// weighted ECMP is enabled and the interface is part of a multipath set.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/load-balancing-weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/*/load-balancing-weight"
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPath) LoadBalancingWeight() *NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPath {
	ps := &NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "load-balancing-weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoadBalancingWeight (leaf): The load-balancing weight of the interface, which applies when
// weighted ECMP is enabled and the interface is part of a multipath set.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/load-balancing-weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/weighted-ecmp/*/load-balancing-weight"
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPathAny) LoadBalancingWeight() *NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPathAny {
	ps := &NetworkInstance_Protocol_Isis_Interface_WeightedEcmp_LoadBalancingWeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "load-balancing-weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp](
		"NetworkInstance_Protocol_Isis_Interface_WeightedEcmp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp](
		"NetworkInstance_Protocol_Isis_Interface_WeightedEcmp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp](
		"NetworkInstance_Protocol_Isis_Interface_WeightedEcmp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Interface_WeightedEcmpPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Interface_WeightedEcmp](
		"NetworkInstance_Protocol_Isis_Interface_WeightedEcmp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/state/authentication-check YANG schema element.
type NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/state/authentication-check YANG schema element.
type NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/state/authentication-check"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-check"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).AuthenticationCheck
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/state/authentication-check"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-check"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).AuthenticationCheck
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/config/authentication-check"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-check"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).AuthenticationCheck
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/config/authentication-check"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-check"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).AuthenticationCheck
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Level_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Level_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_LevelNumberPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/state/level-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_LevelNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_LevelNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/state/level-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_LevelNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/state/level-number"
func (n *NetworkInstance_Protocol_Isis_Level_LevelNumberPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).LevelNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/state/level-number"
func (n *NetworkInstance_Protocol_Isis_Level_LevelNumberPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "level-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).LevelNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/config/level-number"
func (n *NetworkInstance_Protocol_Isis_Level_LevelNumberPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).LevelNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/config/level-number"
func (n *NetworkInstance_Protocol_Isis_Level_LevelNumberPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "level-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).LevelNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_MetricStylePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/state/metric-style YANG schema element.
type NetworkInstance_Protocol_Isis_Level_MetricStylePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_MetricStylePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/state/metric-style YANG schema element.
type NetworkInstance_Protocol_Isis_Level_MetricStylePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-style"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/state/metric-style"
func (n *NetworkInstance_Protocol_Isis_Level_MetricStylePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_MetricStyle] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_MetricStyle](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-style"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_MetricStyle, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).MetricStyle
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-style"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/state/metric-style"
func (n *NetworkInstance_Protocol_Isis_Level_MetricStylePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_MetricStyle] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_MetricStyle](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-style"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_MetricStyle, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).MetricStyle
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-style"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/config/metric-style"
func (n *NetworkInstance_Protocol_Isis_Level_MetricStylePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_MetricStyle] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_MetricStyle](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-style"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_MetricStyle, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).MetricStyle
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-style"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/config/metric-style"
func (n *NetworkInstance_Protocol_Isis_Level_MetricStylePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_MetricStyle] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_MetricStyle](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-style"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_MetricStyle, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).MetricStyle
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_LevelPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level YANG schema element.
type NetworkInstance_Protocol_Isis_LevelPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_LevelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level YANG schema element.
type NetworkInstance_Protocol_Isis_LevelPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_LevelPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level YANG schema element.
type NetworkInstance_Protocol_Isis_LevelPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_LevelPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level YANG schema element.
type NetworkInstance_Protocol_Isis_LevelPathMapAny struct {
	*ygnmi.NodePath
}

// Authentication (container): This container defines ISIS authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication"
func (n *NetworkInstance_Protocol_Isis_LevelPath) Authentication() *NetworkInstance_Protocol_Isis_Level_AuthenticationPath {
	ps := &NetworkInstance_Protocol_Isis_Level_AuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): This container defines ISIS authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) Authentication() *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AuthenticationCheck (leaf): When set to true, reject all ISIS protocol PDUs that either have a mismatch
// in authentication-type or authentication-key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/*/authentication-check"
func (n *NetworkInstance_Protocol_Isis_LevelPath) AuthenticationCheck() *NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPath {
	ps := &NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-check"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationCheck (leaf): When set to true, reject all ISIS protocol PDUs that either have a mismatch
// in authentication-type or authentication-key.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-check"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/*/authentication-check"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) AuthenticationCheck() *NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_AuthenticationCheckPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-check"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/*/enabled"
func (n *NetworkInstance_Protocol_Isis_LevelPath) Enabled() *NetworkInstance_Protocol_Isis_Level_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Level_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/*/enabled"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) Enabled() *NetworkInstance_Protocol_Isis_Level_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GracefulRestart (container): This container defines ISIS Graceful Restart.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart"
func (n *NetworkInstance_Protocol_Isis_LevelPath) GracefulRestart() *NetworkInstance_Protocol_Isis_Level_GracefulRestartPath {
	ps := &NetworkInstance_Protocol_Isis_Level_GracefulRestartPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GracefulRestart (container): This container defines ISIS Graceful Restart.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) GracefulRestart() *NetworkInstance_Protocol_Isis_Level_GracefulRestartPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_GracefulRestartPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LevelNumber (leaf): ISIS level number (level-1, level-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/*/level-number"
func (n *NetworkInstance_Protocol_Isis_LevelPath) LevelNumber() *NetworkInstance_Protocol_Isis_Level_LevelNumberPath {
	ps := &NetworkInstance_Protocol_Isis_Level_LevelNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LevelNumber (leaf): ISIS level number (level-1, level-2).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/level-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/*/level-number"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) LevelNumber() *NetworkInstance_Protocol_Isis_Level_LevelNumberPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_LevelNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "level-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspAny (list): This list describes LSPs in the LSDB.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-state-database/lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp"
func (n *NetworkInstance_Protocol_Isis_LevelPath) LspAny() *NetworkInstance_Protocol_Isis_Level_LspPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_LspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-state-database", "lsp"},
			map[string]interface{}{"lsp-id": "*"},
			n,
		),
	}
	return ps
}

// LspAny (list): This list describes LSPs in the LSDB.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-state-database/lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) LspAny() *NetworkInstance_Protocol_Isis_Level_LspPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_LspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-state-database", "lsp"},
			map[string]interface{}{"lsp-id": "*"},
			n,
		),
	}
	return ps
}

// Lsp (list): This list describes LSPs in the LSDB.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-state-database/lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp"
//
//	LspId: string
func (n *NetworkInstance_Protocol_Isis_LevelPath) Lsp(LspId string) *NetworkInstance_Protocol_Isis_Level_LspPath {
	ps := &NetworkInstance_Protocol_Isis_Level_LspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-state-database", "lsp"},
			map[string]interface{}{"lsp-id": LspId},
			n,
		),
	}
	return ps
}

// Lsp (list): This list describes LSPs in the LSDB.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-state-database/lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp"
//
//	LspId: string
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) Lsp(LspId string) *NetworkInstance_Protocol_Isis_Level_LspPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_LspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-state-database", "lsp"},
			map[string]interface{}{"lsp-id": LspId},
			n,
		),
	}
	return ps
}

// LspMap (list): This list describes LSPs in the LSDB.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-state-database/lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp"
func (n *NetworkInstance_Protocol_Isis_LevelPath) LspMap() *NetworkInstance_Protocol_Isis_Level_LspPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_LspPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-state-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LspMap (list): This list describes LSPs in the LSDB.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-state-database/lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) LspMap() *NetworkInstance_Protocol_Isis_Level_LspPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_LspPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-state-database"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MetricStyle (leaf): ISIS metric style types(narrow, wide).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-style"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/*/metric-style"
func (n *NetworkInstance_Protocol_Isis_LevelPath) MetricStyle() *NetworkInstance_Protocol_Isis_Level_MetricStylePath {
	ps := &NetworkInstance_Protocol_Isis_Level_MetricStylePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-style"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricStyle (leaf): ISIS metric style types(narrow, wide).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-style"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/*/metric-style"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) MetricStyle() *NetworkInstance_Protocol_Isis_Level_MetricStylePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_MetricStylePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-style"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RoutePreference (container): This container defines Administrative Distance (or preference)
// assigned to ISIS routes (level1 internal, level2 internal, level1
// external, level2 external).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/route-preference"
func (n *NetworkInstance_Protocol_Isis_LevelPath) RoutePreference() *NetworkInstance_Protocol_Isis_Level_RoutePreferencePath {
	ps := &NetworkInstance_Protocol_Isis_Level_RoutePreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-preference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RoutePreference (container): This container defines Administrative Distance (or preference)
// assigned to ISIS routes (level1 internal, level2 internal, level1
// external, level2 external).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/route-preference"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) RoutePreference() *NetworkInstance_Protocol_Isis_Level_RoutePreferencePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_RoutePreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-preference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SystemLevelCounters (container): This container defines ISIS system level counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "system-level-counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/system-level-counters"
func (n *NetworkInstance_Protocol_Isis_LevelPath) SystemLevelCounters() *NetworkInstance_Protocol_Isis_Level_SystemLevelCountersPath {
	ps := &NetworkInstance_Protocol_Isis_Level_SystemLevelCountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"system-level-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SystemLevelCounters (container): This container defines ISIS system level counters.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "system-level-counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/system-level-counters"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) SystemLevelCounters() *NetworkInstance_Protocol_Isis_Level_SystemLevelCountersPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_SystemLevelCountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"system-level-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TrafficEngineering (container): This container defines ISIS TE.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "traffic-engineering"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/traffic-engineering"
func (n *NetworkInstance_Protocol_Isis_LevelPath) TrafficEngineering() *NetworkInstance_Protocol_Isis_Level_TrafficEngineeringPath {
	ps := &NetworkInstance_Protocol_Isis_Level_TrafficEngineeringPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"traffic-engineering"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TrafficEngineering (container): This container defines ISIS TE.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "traffic-engineering"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/traffic-engineering"
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) TrafficEngineering() *NetworkInstance_Protocol_Isis_Level_TrafficEngineeringPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_TrafficEngineeringPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"traffic-engineering"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_LevelPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_LevelPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Level] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Level](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_LevelPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level](
		"NetworkInstance_Protocol_Isis_Level",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_LevelPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level](
		"NetworkInstance_Protocol_Isis",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis).Level
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:levels"},
			PostRelPath: []string{"openconfig-network-instance:level"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_LevelPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level](
		"NetworkInstance_Protocol_Isis",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis).Level
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:levels"},
			PostRelPath: []string{"openconfig-network-instance:level"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_LevelPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level](
		"NetworkInstance_Protocol_Isis",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis).Level
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:levels"},
			PostRelPath: []string{"openconfig-network-instance:level"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_LevelPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level](
		"NetworkInstance_Protocol_Isis",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis).Level
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:levels"},
			PostRelPath: []string{"openconfig-network-instance:level"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-mode YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-mode YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePath) State() ygnmi.SingletonQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePathAny) State() ygnmi.WildcardQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePath) Config() ygnmi.ConfigQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewConfigQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisTypes_AUTH_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisTypes_AUTH_MODE](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisTypes_AUTH_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-password YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-password YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-password"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-password"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/auth-password"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/auth-password"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-type"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePath) State() ygnmi.SingletonQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/auth-type"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePathAny) State() ygnmi.WildcardQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/auth-type"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePath) Config() ygnmi.ConfigQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/auth-type"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePathAny) Config() ygnmi.WildcardQuery[oc.E_KeychainTypes_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_KeychainTypes_AUTH_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "auth-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_KeychainTypes_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).AuthType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-csnp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-csnp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-csnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-csnp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisableCsnp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-csnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-csnp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisableCsnp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-csnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/disable-csnp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisableCsnp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-csnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/disable-csnp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-csnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisableCsnp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-lsp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-lsp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-lsp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisableLsp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-lsp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisableLsp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/disable-lsp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisableLsp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/disable-lsp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisableLsp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-psnp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-psnp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-psnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-psnp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisablePsnp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/disable-psnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/disable-psnp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "disable-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisablePsnp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-psnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/disable-psnp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisablePsnp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/disable-psnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/disable-psnp"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "disable-psnp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).DisablePsnp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/keychain YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/keychain YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/keychain"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/state/keychain"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/keychain"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/config/keychain"
func (n *NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "keychain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Authentication).Keychain
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_AuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication YANG schema element.
type NetworkInstance_Protocol_Isis_Level_AuthenticationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication YANG schema element.
type NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny struct {
	*ygnmi.NodePath
}

// AuthMode (leaf): The type of authentication used in the applicable IS-IS PDUs.
//
// This leaf along with the sibling leaf 'auth-password' can be used
// to configure the simple key authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) AuthMode() *NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthMode (leaf): The type of authentication used in the applicable IS-IS PDUs.
//
// This leaf along with the sibling leaf 'auth-password' can be used
// to configure the simple key authentication.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-mode"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/auth-mode"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) AuthMode() *NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_AuthModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPassword (leaf): The authentication key used in the applicable IS-IS PDUs. The key in the
// packet may be encrypted according to the configured authentication type.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/auth-password"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) AuthPassword() *NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthPassword (leaf): The authentication key used in the applicable IS-IS PDUs. The key in the
// packet may be encrypted according to the configured authentication type.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-password"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/auth-password"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) AuthPassword() *NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_AuthPasswordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthType (leaf): The type of authentication used in the applicable IS-IS PDUs
// (simple_key, keychain).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/auth-type"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) AuthType() *NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthType (leaf): The type of authentication used in the applicable IS-IS PDUs
// (simple_key, keychain).
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/auth-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/auth-type"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) AuthType() *NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_AuthTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "auth-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableCsnp (leaf): When this leaf is set to true, authentication is disabled for CSNP
// packets, overriding the value of the enabled leaf in this context.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-csnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/disable-csnp"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) DisableCsnp() *NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableCsnp (leaf): When this leaf is set to true, authentication is disabled for CSNP
// packets, overriding the value of the enabled leaf in this context.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-csnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/disable-csnp"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) DisableCsnp() *NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_DisableCsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-csnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableLsp (leaf): When this leaf is set to true, authentication is disabled for LSP
// packets, overriding the value of the enabled leaf in this context.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/disable-lsp"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) DisableLsp() *NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisableLsp (leaf): When this leaf is set to true, authentication is disabled for LSP
// packets, overriding the value of the enabled leaf in this context.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/disable-lsp"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) DisableLsp() *NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_DisableLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisablePsnp (leaf): When this leaf is set to true, authentication is disabled for PSNP
// packets, overriding the value of the enabled leaf in this context.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-psnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/disable-psnp"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) DisablePsnp() *NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DisablePsnp (leaf): When this leaf is set to true, authentication is disabled for PSNP
// packets, overriding the value of the enabled leaf in this context.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/disable-psnp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/disable-psnp"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) DisablePsnp() *NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_DisablePsnpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "disable-psnp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, authentication of IS-IS PSNP, CSNP and
// LSP packets is enabled using the specified authentication details in
// the sibling leaves.
//
// The sibling 'disable-<type>' leaves can be used to override the value
// of this leaf and disable authentication for a specific packet type.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) Enabled() *NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When this leaf is set to true, authentication of IS-IS PSNP, CSNP and
// LSP packets is enabled using the specified authentication details in
// the sibling leaves.
//
// The sibling 'disable-<type>' leaves can be used to override the value
// of this leaf and disable authentication for a specific packet type.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) Enabled() *NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Keychain (leaf): Reference to the keychain that should be used for authenticating IS-IS
// packets - the keychain may contain either a simple password, or
// HMAC-MD5 key that is used for authenticating CSNP, PSNP and LSP packets
// within the specified IS-IS level.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/keychain"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) Keychain() *NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "keychain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Keychain (leaf): Reference to the keychain that should be used for authenticating IS-IS
// packets - the keychain may contain either a simple password, or
// HMAC-MD5 key that is used for authenticating CSNP, PSNP and LSP packets
// within the specified IS-IS level.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/keychain"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/authentication/*/keychain"
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) Keychain() *NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Authentication_KeychainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "keychain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Authentication] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Authentication](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Authentication](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Level_Authentication] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Level_Authentication](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_AuthenticationPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Authentication](
		"NetworkInstance_Protocol_Isis_Level_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/state/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/config/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/state/restart-time"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/state/restart-time"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/config/restart-time"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/config/restart-time"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_GracefulRestartPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Isis_Level_GracefulRestartPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_GracefulRestartPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Isis_Level_GracefulRestartPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestartPath) Enabled() *NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPath {
	ps := &NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/*/enabled"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestartPathAny) Enabled() *NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_GracefulRestart_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Value of RFC5306/RFC8706 T2 timer
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/*/restart-time"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestartPath) RestartTime() *NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePath {
	ps := &NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Value of RFC5306/RFC8706 T2 timer
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/graceful-restart/*/restart-time"
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestartPathAny) RestartTime() *NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_GracefulRestart_RestartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestartPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestartPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestartPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_GracefulRestartPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_GracefulRestart](
		"NetworkInstance_Protocol_Isis_Level_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/checksum YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/checksum YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/checksum"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/checksum"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "checksum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Checksum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/checksum"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/checksum"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "checksum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Checksum
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Lsp_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Lsp_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Lsp_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Lsp_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Lsp_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Lsp_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/id-length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/id-length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id-length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/id-length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).IdLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id-length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/id-length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).IdLength
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/is-type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/is-type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/is-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/is-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).IsType
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/is-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/is-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "is-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).IsType
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/lsp-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/lsp-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/lsp-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).LspId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/lsp-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).LspId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).LspId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).LspId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/maximum-area-addresses YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/maximum-area-addresses YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-area-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).MaximumAreaAddresses
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-area-addresses"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).MaximumAreaAddresses
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pdu-length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pdu-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).PduLength
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pdu-length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pdu-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).PduLength
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pdu-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePath) State() ygnmi.SingletonQuery[oc.E_Lsp_PduType] {
	return ygnmi.NewSingletonQuery[oc.E_Lsp_PduType](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pdu-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lsp_PduType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).PduType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pdu-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePathAny) State() ygnmi.WildcardQuery[oc.E_Lsp_PduType] {
	return ygnmi.NewWildcardQuery[oc.E_Lsp_PduType](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pdu-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Lsp_PduType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).PduType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/remaining-lifetime YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/remaining-lifetime YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remaining-lifetime"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/remaining-lifetime"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remaining-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).RemainingLifetime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remaining-lifetime"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/remaining-lifetime"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remaining-lifetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).RemainingLifetime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/sequence-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/sequence-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/sequence-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/sequence-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).SequenceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_VersionPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_VersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_VersionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_VersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_VersionPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_VersionPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Version2Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version2 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Version2Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Version2PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version2 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Version2PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version2"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Version2Path) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Version2
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version2"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Version2PathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Version2
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_LspPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_LspPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_LspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_LspPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_LspPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_LspPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_LspPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp YANG schema element.
type NetworkInstance_Protocol_Isis_Level_LspPathMapAny struct {
	*ygnmi.NodePath
}

// Checksum (leaf): Checksum of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/checksum"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/checksum"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) Checksum() *NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "checksum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Checksum (leaf): Checksum of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/checksum"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/checksum"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) Checksum() *NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_ChecksumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "checksum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): LSP Type-Block flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): LSP Type-Block flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IdLength (leaf): Length of the ID field of NSAP addresses and NETs used in
// this routing domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id-length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/id-length"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) IdLength() *NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IdLength (leaf): Length of the ID field of NSAP addresses and NETs used in
// this routing domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id-length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/id-length"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) IdLength() *NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_IdLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "id-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsType (leaf): Type of neighboring system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/is-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/is-type"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) IsType() *NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsType (leaf): Type of neighboring system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/is-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/is-type"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) IsType() *NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_IsTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "is-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): LSP ID of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/*/lsp-id"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) LspId() *NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): LSP ID of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsp-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/*/lsp-id"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) LspId() *NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_LspIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaximumAreaAddresses (leaf): Number of area addresses permitted for this ISs area. 0
// indicates the IS only supports three area addresses (by
// default). Any number inclusive of 1 and 254 indicates the
// number of areas allowed.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) MaximumAreaAddresses() *NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "maximum-area-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaximumAreaAddresses (leaf): Number of area addresses permitted for this ISs area. 0
// indicates the IS only supports three area addresses (by
// default). Any number inclusive of 1 and 254 indicates the
// number of areas allowed.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-area-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/maximum-area-addresses"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) MaximumAreaAddresses() *NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_MaximumAreaAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "maximum-area-addresses"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PduLength (leaf): Total length of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pdu-length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-length"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) PduLength() *NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pdu-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PduLength (leaf): Total length of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pdu-length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-length"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) PduLength() *NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_PduLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pdu-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PduType (leaf): Link State PDU type.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pdu-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-type"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) PduType() *NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pdu-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PduType (leaf): Link State PDU type.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pdu-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/pdu-type"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) PduType() *NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_PduTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "pdu-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemainingLifetime (leaf): Remaining lifetime in seconds before the LSP expiration.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remaining-lifetime"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/remaining-lifetime"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) RemainingLifetime() *NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remaining-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemainingLifetime (leaf): Remaining lifetime in seconds before the LSP expiration.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remaining-lifetime"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/remaining-lifetime"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) RemainingLifetime() *NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_RemainingLifetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "remaining-lifetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/sequence-number"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) SequenceNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceNumber (leaf): Sequence number of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sequence-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/sequence-number"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) SequenceNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_SequenceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sequence-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlvAny (list): List of TLV types in the LSDB for the specified LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tlvs/tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) TlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlvs", "tlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// TlvAny (list): List of TLV types in the LSDB for the specified LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tlvs/tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) TlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlvs", "tlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// Tlv (list): List of TLV types in the LSDB for the specified LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tlvs/tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_TLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) Tlv(Type oc.E_IsisLsdbTypes_ISIS_TLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlvs", "tlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// Tlv (list): List of TLV types in the LSDB for the specified LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tlvs/tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_TLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) Tlv(Type oc.E_IsisLsdbTypes_ISIS_TLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlvs", "tlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// TlvMap (list): List of TLV types in the LSDB for the specified LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tlvs/tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) TlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TlvMap (list): List of TLV types in the LSDB for the specified LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tlvs/tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) TlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedTlvAny (list): List of TLVs that are not defined within the model, or are
// not recognised by the system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-tlvs/undefined-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/undefined-tlvs/undefined-tlv"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) UndefinedTlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-tlvs", "undefined-tlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedTlvAny (list): List of TLVs that are not defined within the model, or are
// not recognised by the system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-tlvs/undefined-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/undefined-tlvs/undefined-tlv"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) UndefinedTlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-tlvs", "undefined-tlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedTlv (list): List of TLVs that are not defined within the model, or are
// not recognised by the system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-tlvs/undefined-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/undefined-tlvs/undefined-tlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) UndefinedTlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-tlvs", "undefined-tlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedTlv (list): List of TLVs that are not defined within the model, or are
// not recognised by the system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-tlvs/undefined-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/undefined-tlvs/undefined-tlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) UndefinedTlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-tlvs", "undefined-tlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedTlvMap (list): List of TLVs that are not defined within the model, or are
// not recognised by the system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-tlvs/undefined-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/undefined-tlvs/undefined-tlv"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) UndefinedTlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedTlvMap (list): List of TLVs that are not defined within the model, or are
// not recognised by the system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-tlvs/undefined-tlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/undefined-tlvs/undefined-tlv"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) UndefinedTlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_UndefinedTlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-tlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Version (leaf): PDU version. This is set to 1.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) Version() *NetworkInstance_Protocol_Isis_Level_Lsp_VersionPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_VersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): PDU version. This is set to 1.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) Version() *NetworkInstance_Protocol_Isis_Level_Lsp_VersionPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_VersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version2 (leaf): PDU version2. This is set to 1
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version2"
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) Version2() *NetworkInstance_Protocol_Isis_Level_Lsp_Version2Path {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Version2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version2 (leaf): PDU version2. This is set to 1
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/state/version2"
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) Version2() *NetworkInstance_Protocol_Isis_Level_Lsp_Version2PathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Version2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "version2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_LspPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_LspPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_LspPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).Lsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:link-state-database"},
			PostRelPath: []string{"openconfig-network-instance:lsp"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_LspPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp](
		"NetworkInstance_Protocol_Isis_Level",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level).Lsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:link-state-database"},
			PostRelPath: []string{"openconfig-network-instance:lsp"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_TLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_TLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePath) Config() ygnmi.ConfigQuery[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_TLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_TLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMapAny struct {
	*ygnmi.NodePath
}

// AreaAddress (container): This container defines TLV 1.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "area-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) AreaAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"area-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AreaAddress (container): This container defines TLV 1.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "area-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) AreaAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"area-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): This container defines authentication information of the
// node.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Authentication() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): This container defines authentication information of the
// node.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Authentication() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CapabilityAny (list): This list describes IS Router capabilities.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) CapabilityAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities", "capability"},
			map[string]interface{}{"instance-number": "*"},
			n,
		),
	}
	return ps
}

// CapabilityAny (list): This list describes IS Router capabilities.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) CapabilityAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities", "capability"},
			map[string]interface{}{"instance-number": "*"},
			n,
		),
	}
	return ps
}

// Capability (list): This list describes IS Router capabilities.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability"
//
//	InstanceNumber: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Capability(InstanceNumber uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities", "capability"},
			map[string]interface{}{"instance-number": InstanceNumber},
			n,
		),
	}
	return ps
}

// Capability (list): This list describes IS Router capabilities.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability"
//
//	InstanceNumber: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Capability(InstanceNumber uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities", "capability"},
			map[string]interface{}{"instance-number": InstanceNumber},
			n,
		),
	}
	return ps
}

// CapabilityMap (list): This list describes IS Router capabilities.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) CapabilityMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CapabilityMap (list): This list describes IS Router capabilities.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "router-capabilities/capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) CapabilityMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"router-capabilities"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtendedIpv4Reachability (container): This container defines list of IPv4 extended reachability
// information.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "extended-ipv4-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) ExtendedIpv4Reachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-ipv4-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtendedIpv4Reachability (container): This container defines list of IPv4 extended reachability
// information.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "extended-ipv4-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) ExtendedIpv4Reachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-ipv4-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtendedIsReachability (container): This container defines list of ISIS extended reachability
// neighbors.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "extended-is-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) ExtendedIsReachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIsReachabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIsReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-is-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtendedIsReachability (container): This container defines list of ISIS extended reachability
// neighbors.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "extended-is-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-is-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) ExtendedIsReachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIsReachabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIsReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-is-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Hostname (container): This container defines TLV 137.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hostname"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/hostname"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Hostname() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_HostnamePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_HostnamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hostname"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Hostname (container): This container defines TLV 137.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hostname"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/hostname"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Hostname() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_HostnamePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_HostnamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hostname"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InstanceIdAny (list): A list of instance IDs received within TLV 7 within an
// IS-IS LSP. In the case that more than one instance of
// TLV 7 is included in the LSP, the instance IDs specified
// within the instances are concatenated within this
// list.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-ids/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/instance-ids/instance-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) InstanceIdAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instance-ids", "instance-id"},
			map[string]interface{}{"instance-id": "*"},
			n,
		),
	}
	return ps
}

// InstanceIdAny (list): A list of instance IDs received within TLV 7 within an
// IS-IS LSP. In the case that more than one instance of
// TLV 7 is included in the LSP, the instance IDs specified
// within the instances are concatenated within this
// list.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-ids/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/instance-ids/instance-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) InstanceIdAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instance-ids", "instance-id"},
			map[string]interface{}{"instance-id": "*"},
			n,
		),
	}
	return ps
}

// InstanceId (list): A list of instance IDs received within TLV 7 within an
// IS-IS LSP. In the case that more than one instance of
// TLV 7 is included in the LSP, the instance IDs specified
// within the instances are concatenated within this
// list.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-ids/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/instance-ids/instance-id"
//
//	InstanceId: uint16
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) InstanceId(InstanceId uint16) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instance-ids", "instance-id"},
			map[string]interface{}{"instance-id": InstanceId},
			n,
		),
	}
	return ps
}

// InstanceId (list): A list of instance IDs received within TLV 7 within an
// IS-IS LSP. In the case that more than one instance of
// TLV 7 is included in the LSP, the instance IDs specified
// within the instances are concatenated within this
// list.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-ids/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/instance-ids/instance-id"
//
//	InstanceId: uint16
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) InstanceId(InstanceId uint16) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instance-ids", "instance-id"},
			map[string]interface{}{"instance-id": InstanceId},
			n,
		),
	}
	return ps
}

// InstanceIdMap (list): A list of instance IDs received within TLV 7 within an
// IS-IS LSP. In the case that more than one instance of
// TLV 7 is included in the LSP, the instance IDs specified
// within the instances are concatenated within this
// list.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-ids/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/instance-ids/instance-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) InstanceIdMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"instance-ids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InstanceIdMap (list): A list of instance IDs received within TLV 7 within an
// IS-IS LSP. In the case that more than one instance of
// TLV 7 is included in the LSP, the instance IDs specified
// within the instances are concatenated within this
// list.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-ids/instance-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/instance-ids/instance-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) InstanceIdMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_InstanceIdPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instance-ids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4ExternalReachability (container): This container defines list of IPv4 external reachability
// information.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-external-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv4ExternalReachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4ExternalReachabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4ExternalReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-external-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4ExternalReachability (container): This container defines list of IPv4 external reachability
// information.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-external-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-external-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv4ExternalReachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4ExternalReachabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4ExternalReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-external-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4InterfaceAddresses (container): This container defines TLV 132.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-interface-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-interface-addresses"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv4InterfaceAddresses() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InterfaceAddressesPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InterfaceAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-interface-addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4InterfaceAddresses (container): This container defines TLV 132.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-interface-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-interface-addresses"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv4InterfaceAddresses() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InterfaceAddressesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InterfaceAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-interface-addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4InternalReachability (container): This container defines list of IPv4 internal reachability
// information.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-internal-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv4InternalReachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-internal-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4InternalReachability (container): This container defines list of IPv4 internal reachability
// information.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-internal-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv4InternalReachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-internal-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4SrlgAny (list): Instance of the IPv4 SRLG TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-srlgs/ipv4-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv4SrlgAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-srlgs", "ipv4-srlg"},
			map[string]interface{}{"instance-number": "*"},
			n,
		),
	}
	return ps
}

// Ipv4SrlgAny (list): Instance of the IPv4 SRLG TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-srlgs/ipv4-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv4SrlgAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-srlgs", "ipv4-srlg"},
			map[string]interface{}{"instance-number": "*"},
			n,
		),
	}
	return ps
}

// Ipv4Srlg (list): Instance of the IPv4 SRLG TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-srlgs/ipv4-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg"
//
//	InstanceNumber: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv4Srlg(InstanceNumber uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-srlgs", "ipv4-srlg"},
			map[string]interface{}{"instance-number": InstanceNumber},
			n,
		),
	}
	return ps
}

// Ipv4Srlg (list): Instance of the IPv4 SRLG TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-srlgs/ipv4-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg"
//
//	InstanceNumber: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv4Srlg(InstanceNumber uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-srlgs", "ipv4-srlg"},
			map[string]interface{}{"instance-number": InstanceNumber},
			n,
		),
	}
	return ps
}

// Ipv4SrlgMap (list): Instance of the IPv4 SRLG TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-srlgs/ipv4-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv4SrlgMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-srlgs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4SrlgMap (list): Instance of the IPv4 SRLG TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-srlgs/ipv4-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv4SrlgMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-srlgs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4TeRouterId (container): This container defines TLV 134.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-te-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv4TeRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-te-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4TeRouterId (container): This container defines TLV 134.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-te-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv4TeRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-te-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6InterfaceAddresses (container): This container defines TLV 232.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-interface-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv6InterfaceAddresses() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-interface-addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6InterfaceAddresses (container): This container defines TLV 232.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-interface-addresses"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv6InterfaceAddresses() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-interface-addresses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6Reachability (container): This container defines list of IPv6 reachability
// information.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv6Reachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6Reachability (container): This container defines list of IPv6 reachability
// information.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv6Reachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6SrlgAny (list): Instance of the IPv6 SRLG TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-srlgs/ipv6-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv6SrlgAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-srlgs", "ipv6-srlg"},
			map[string]interface{}{"instance-number": "*"},
			n,
		),
	}
	return ps
}

// Ipv6SrlgAny (list): Instance of the IPv6 SRLG TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-srlgs/ipv6-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv6SrlgAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-srlgs", "ipv6-srlg"},
			map[string]interface{}{"instance-number": "*"},
			n,
		),
	}
	return ps
}

// Ipv6Srlg (list): Instance of the IPv6 SRLG TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-srlgs/ipv6-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg"
//
//	InstanceNumber: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv6Srlg(InstanceNumber uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-srlgs", "ipv6-srlg"},
			map[string]interface{}{"instance-number": InstanceNumber},
			n,
		),
	}
	return ps
}

// Ipv6Srlg (list): Instance of the IPv6 SRLG TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-srlgs/ipv6-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg"
//
//	InstanceNumber: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv6Srlg(InstanceNumber uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-srlgs", "ipv6-srlg"},
			map[string]interface{}{"instance-number": InstanceNumber},
			n,
		),
	}
	return ps
}

// Ipv6SrlgMap (list): Instance of the IPv6 SRLG TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-srlgs/ipv6-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv6SrlgMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-srlgs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6SrlgMap (list): Instance of the IPv6 SRLG TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-srlgs/ipv6-srlg"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv6SrlgMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-srlgs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6TeRouterId (container): This container defines TLV 140.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-te-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Ipv6TeRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-te-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6TeRouterId (container): This container defines TLV 140.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-te-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Ipv6TeRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-te-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsAliasId (container): This container defines the IS-Alias TLV which allows
// extension-capable ISs to recognize the Originating System
// of an Extended LSP set. It identifies the Normal system-
// id of the Originating System.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "is-alias-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) IsAliasId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"is-alias-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsAliasId (container): This container defines the IS-Alias TLV which allows
// extension-capable ISs to recognize the Originating System
// of an Extended LSP set. It identifies the Normal system-
// id of the Originating System.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "is-alias-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) IsAliasId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"is-alias-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsReachability (container): This container describes list of ISIS neighbors and
// attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "is-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) IsReachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"is-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsReachability (container): This container describes list of ISIS neighbors and
// attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "is-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) IsReachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"is-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsisNeighborAttribute (container): This container defines list of ISIS topology neighbors
// for extended ISIS LSP (multiple system IDs).
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "isis-neighbor-attribute"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) IsisNeighborAttribute() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-neighbor-attribute"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsisNeighborAttribute (container): This container defines list of ISIS topology neighbors
// for extended ISIS LSP (multiple system IDs).
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "isis-neighbor-attribute"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) IsisNeighborAttribute() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-neighbor-attribute"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LspBufferSize (container): This container defines TLV 14 - the LSP Buffer Size
// TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-buffer-size"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/lsp-buffer-size"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) LspBufferSize() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_LspBufferSizePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_LspBufferSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-buffer-size"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LspBufferSize (container): This container defines TLV 14 - the LSP Buffer Size
// TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-buffer-size"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/lsp-buffer-size"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) LspBufferSize() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_LspBufferSizePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_LspBufferSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-buffer-size"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MtIpv4Reachability (container): This container defines list of IPv4 reachability
// Information in multi-topology environment.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mt-ipv4-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) MtIpv4Reachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIpv4ReachabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIpv4ReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mt-ipv4-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MtIpv4Reachability (container): This container defines list of IPv4 reachability
// Information in multi-topology environment.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mt-ipv4-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv4-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) MtIpv4Reachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIpv4ReachabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIpv4ReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mt-ipv4-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MtIpv6Reachability (container): This container defines list of IPv6 reachability
// information in multi - topology environment.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mt-ipv6-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) MtIpv6Reachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIpv6ReachabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIpv6ReachabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mt-ipv6-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MtIpv6Reachability (container): This container defines list of IPv6 reachability
// information in multi - topology environment.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mt-ipv6-reachability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-ipv6-reachability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) MtIpv6Reachability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIpv6ReachabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIpv6ReachabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mt-ipv6-reachability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MtIsisNeighborAttribute (container): This container defines list of ISIS multi-topology
// neighbors.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mt-isis-neighbor-attribute"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) MtIsisNeighborAttribute() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIsisNeighborAttributePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIsisNeighborAttributePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mt-isis-neighbor-attribute"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MtIsisNeighborAttribute (container): This container defines list of ISIS multi-topology
// neighbors.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mt-isis-neighbor-attribute"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isis-neighbor-attribute"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) MtIsisNeighborAttribute() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIsisNeighborAttributePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIsisNeighborAttributePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mt-isis-neighbor-attribute"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MtIsn (container): This container defines list of ISIS multi-topology
// neighbors.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mt-isn"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) MtIsn() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIsnPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIsnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mt-isn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MtIsn (container): This container defines list of ISIS multi-topology
// neighbors.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mt-isn"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/mt-isn"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) MtIsn() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIsnPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MtIsnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mt-isn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MultiTopology (container): This container defines the topology supported.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "multi-topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/multi-topology"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) MultiTopology() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MultiTopologyPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MultiTopologyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-topology"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MultiTopology (container): This container defines the topology supported.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "multi-topology"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/multi-topology"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) MultiTopology() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MultiTopologyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_MultiTopologyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-topology"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Nlpid (container): This container defines TLV 129.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "nlpid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/nlpid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Nlpid() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_NlpidPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_NlpidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nlpid"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Nlpid (container): This container defines TLV 129.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "nlpid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/nlpid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Nlpid() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_NlpidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_NlpidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nlpid"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PurgeOi (container): This container defines ISIS purge TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "purge-oi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/purge-oi"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) PurgeOi() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_PurgeOiPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_PurgeOiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"purge-oi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PurgeOi (container): This container defines ISIS purge TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "purge-oi"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/purge-oi"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) PurgeOi() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_PurgeOiPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_PurgeOiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"purge-oi"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of TLV being described. The type of TLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of TLV being described. The type of TLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMap) State() ygnmi.SingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv] {
	return ygnmi.NewSingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Tlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tlvs"},
			PostRelPath: []string{"openconfig-network-instance:tlv"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_TlvPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv] {
	return ygnmi.NewWildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_TLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp).Tlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tlvs"},
			PostRelPath: []string{"openconfig-network-instance:tlv"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address/state/address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address/state/address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address/state/address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address/state/address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPathAny struct {
	*ygnmi.NodePath
}

// Address (leaf-list): Area adress(es) of the IS. Set of manual area
// addresses of this IS.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address/state/address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPath) Address() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf-list): Area adress(es) of the IS. Set of manual area
// addresses of this IS.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/area-address/state/address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPathAny) Address() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddressPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AreaAddress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/authentication-key"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/authentication-key"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/crypto-type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/crypto-type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/crypto-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/crypto-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePath) State() ygnmi.SingletonQuery[oc.E_Authentication_CryptoType] {
	return ygnmi.NewSingletonQuery[oc.E_Authentication_CryptoType](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "crypto-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Authentication_CryptoType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication).CryptoType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/crypto-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/crypto-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePathAny) State() ygnmi.WildcardQuery[oc.E_Authentication_CryptoType] {
	return ygnmi.NewWildcardQuery[oc.E_Authentication_CryptoType](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "crypto-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Authentication_CryptoType, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication).CryptoType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPathAny struct {
	*ygnmi.NodePath
}

// AuthenticationKey (leaf): Authentication key to be used.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/authentication-key"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPath) AuthenticationKey() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationKey (leaf): Authentication key to be used.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/authentication-key"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPathAny) AuthenticationKey() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_AuthenticationKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CryptoType (leaf): Authentication type to be used.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/crypto-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/crypto-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPath) CryptoType() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "crypto-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CryptoType (leaf): Authentication type to be used.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/crypto-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/authentication/state/crypto-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPathAny) CryptoType() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication_CryptoTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "crypto-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_AuthenticationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Capability_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Capability_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Capability_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Capability_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Capability_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Capability_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/instance-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/instance-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-number"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-number"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMapAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): Router capability flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Router capability flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceNumber (leaf): A unique instance number for the instance of the
// router capabilities TLV. The instance number should
// be autogenerated by the producer of the data and may
// be renumbered if the entire LSP contents are
// replaced in subsequent advertisements.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/*/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) InstanceNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceNumber (leaf): A unique instance number for the instance of the
// router capabilities TLV. The instance number should
// be autogenerated by the producer of the data and may
// be renumbered if the entire LSP contents are
// replaced in subsequent advertisements.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/*/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) InstanceNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_InstanceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): IPv4 router-id.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): IPv4 router-id.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SubtlvAny (list): List of subTLV types in the LSDB for the specified
// TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) SubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// SubtlvAny (list): List of subTLV types in the LSDB for the specified
// TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) SubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// Subtlv (list): List of subTLV types in the LSDB for the specified
// TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) Subtlv(Type oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// Subtlv (list): List of subTLV types in the LSDB for the specified
// TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) Subtlv(Type oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// SubtlvMap (list): List of subTLV types in the LSDB for the specified
// TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) SubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubtlvMap (list): List of subTLV types in the LSDB for the specified
// TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) SubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvAny (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) UndefinedSubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvAny (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) UndefinedSubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedSubtlv (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) UndefinedSubtlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedSubtlv (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) UndefinedSubtlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvMap (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) UndefinedSubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvMap (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) UndefinedSubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Capability
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:router-capabilities"},
			PostRelPath: []string{"openconfig-network-instance:capability"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_CapabilityPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Capability
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:router-capabilities"},
			PostRelPath: []string{"openconfig-network-instance:capability"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePath) Config() ygnmi.ConfigQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMapAny struct {
	*ygnmi.NodePath
}

// SegmentRoutingAlgorithms (container): This container defines SR algorithm sub-TLV 19.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing-algorithms"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPath) SegmentRoutingAlgorithms() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing-algorithms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRoutingAlgorithms (container): This container defines SR algorithm sub-TLV 19.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing-algorithms"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny) SegmentRoutingAlgorithms() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing-algorithms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRoutingCapability (container): This container defines SR Capability sub-TLV 2.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing-capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPath) SegmentRoutingCapability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing-capability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRoutingCapability (container): This container defines SR Capability sub-TLV 2.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing-capability"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny) SegmentRoutingCapability() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing-capability"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMap) State() ygnmi.SingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv] {
	return ygnmi.NewSingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).Subtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:subtlv"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_SubtlvPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv] {
	return ygnmi.NewWildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).Subtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:subtlv"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms/state/algorithm YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms/state/algorithm YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPath) State() ygnmi.SingletonQuery[[]oc.E_SegmentRoutingAlgorithms_Algorithm] {
	return ygnmi.NewSingletonQuery[[]oc.E_SegmentRoutingAlgorithms_Algorithm](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SegmentRoutingAlgorithms_Algorithm, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms).Algorithm
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPathAny) State() ygnmi.WildcardQuery[[]oc.E_SegmentRoutingAlgorithms_Algorithm] {
	return ygnmi.NewWildcardQuery[[]oc.E_SegmentRoutingAlgorithms_Algorithm](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SegmentRoutingAlgorithms_Algorithm, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms).Algorithm
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPathAny struct {
	*ygnmi.NodePath
}

// Algorithm (leaf-list): The Segment Routing algorithm that is
// described by the TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPath) Algorithm() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Algorithm (leaf-list): The Segment Routing algorithm that is
// described by the TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-algorithms/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPathAny) Algorithm() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms_AlgorithmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithmsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingAlgorithms",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_SegmentRoutingCapability_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_SegmentRoutingCapability_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SegmentRoutingCapability_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_SegmentRoutingCapability_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_SegmentRoutingCapability_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_SegmentRoutingCapability_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): Segment Routing Capability Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Segment Routing Capability Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrgbDescriptorAny (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgb-descriptors/srgb-descriptor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPath) SrgbDescriptorAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgb-descriptors", "srgb-descriptor"},
			map[string]interface{}{"range": "*"},
			n,
		),
	}
	return ps
}

// SrgbDescriptorAny (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgb-descriptors/srgb-descriptor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPathAny) SrgbDescriptorAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgb-descriptors", "srgb-descriptor"},
			map[string]interface{}{"range": "*"},
			n,
		),
	}
	return ps
}

// SrgbDescriptor (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgb-descriptors/srgb-descriptor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor"
//
//	Range: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPath) SrgbDescriptor(Range uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgb-descriptors", "srgb-descriptor"},
			map[string]interface{}{"range": Range},
			n,
		),
	}
	return ps
}

// SrgbDescriptor (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgb-descriptors/srgb-descriptor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor"
//
//	Range: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPathAny) SrgbDescriptor(Range uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgb-descriptors", "srgb-descriptor"},
			map[string]interface{}{"range": Range},
			n,
		),
	}
	return ps
}

// SrgbDescriptorMap (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgb-descriptors/srgb-descriptor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPath) SrgbDescriptorMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgb-descriptors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrgbDescriptorMap (list): Descriptor entry within the SR capabilty
// sub-TLV
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srgb-descriptors/srgb-descriptor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPathAny) SrgbDescriptorMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srgb-descriptors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapabilityPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor).Label
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor).Label
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/range YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/range YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/range"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/range"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/range"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/range"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "range"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "range"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor).Range
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMapAny struct {
	*ygnmi.NodePath
}

// Label (leaf): The first value of the SRGB when
// expressed as an MPLS label.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPath) Label() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): The first value of the SRGB when
// expressed as an MPLS label.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny) Label() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_LabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Range (leaf): Number of SRGB elements. The range
// value MUST be greater than 0.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/range"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/*/range"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPath) Range() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Range (leaf): Number of SRGB elements. The range
// value MUST be greater than 0.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/range"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/*/range"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny) Range() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_RangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability).SrgbDescriptor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srgb-descriptors"},
			PostRelPath: []string{"openconfig-network-instance:srgb-descriptor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptorPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability).SrgbDescriptor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srgb-descriptors"},
			PostRelPath: []string{"openconfig-network-instance:srgb-descriptor"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv).Length
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv).Length
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePath) State() ygnmi.SingletonQuery[oc.Binary] {
	return ygnmi.NewSingletonQuery[oc.Binary](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePathAny) State() ygnmi.WildcardQuery[oc.Binary] {
	return ygnmi.NewWildcardQuery[oc.Binary](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMapAny struct {
	*ygnmi.NodePath
}

// Length (leaf): TLV length.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPath) Length() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): TLV length.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny) Length() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): TLV Type.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): TLV Type.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): TLV value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPath) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): TLV value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).UndefinedSubtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:undefined-subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:undefined-subtlv"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlvPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_UndefinedSubtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability).UndefinedSubtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:undefined-subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:undefined-subtlv"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPathAny struct {
	*ygnmi.NodePath
}

// PrefixAny (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPath) PrefixAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPathAny) PrefixAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Prefix (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPath) Prefix(Prefix string) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Prefix (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPathAny) Prefix(Prefix string) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// PrefixMap (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPath) PrefixMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixMap (list): This list describes IPv4 extended prefixes and
// attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPathAny) PrefixMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4ReachabilityPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/s-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/s-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/s-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/s-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "s-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).SBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/s-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/s-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "s-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).SBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/up-down YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/up-down YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).UpDown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).UpDown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// Metric (leaf): ISIS metric value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS metric value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within extended reachability TLVs.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) Prefix() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within extended reachability TLVs.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) Prefix() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SBit (leaf): The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs
// are not present. Otherwise, the bit is set and the octet
// following the prefix will contain the length of the Sub-TLV
// portion of the structure.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/s-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/s-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) SBit() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "s-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SBit (leaf): The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs
// are not present. Otherwise, the bit is set and the octet
// following the prefix will contain the length of the Sub-TLV
// portion of the structure.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/s-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/s-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) SBit() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SBitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "s-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SubtlvAny (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) SubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// SubtlvAny (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) SubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// Subtlv (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) Subtlv(Type oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// Subtlv (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) Subtlv(Type oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// SubtlvMap (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) SubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubtlvMap (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) SubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvAny (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) UndefinedSubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvAny (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) UndefinedSubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedSubtlv (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) UndefinedSubtlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedSubtlv (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) UndefinedSubtlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvMap (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) UndefinedSubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvMap (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) UndefinedSubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UpDown (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level (e.g., level 2 to level 1),
// indicating that the prefix has traveled down the hierarchy.
// Prefixes that have the up/down bit set may only be
// advertised down the hierarchy, i.e., to lower levels. When a
// prefix is first injected into IS-IS, the bit is UNSET.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) UpDown() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpDown (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level (e.g., level 2 to level 1),
// indicating that the prefix has traveled down the hierarchy.
// Prefixes that have the up/down bit set may only be
// advertised down the hierarchy, i.e., to lower levels. When a
// prefix is first injected into IS-IS, the bit is UNSET.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) UpDown() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UpDownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefixes"},
			PostRelPath: []string{"openconfig-network-instance:prefix"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_PrefixPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefixes"},
			PostRelPath: []string{"openconfig-network-instance:prefix"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePath) Config() ygnmi.ConfigQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMapAny struct {
	*ygnmi.NodePath
}

// Flags (container): This container defines sub-TLV 4.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flags"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Flags (container): This container defines sub-TLV 4.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flags"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4SourceRouterId (container): This container defines sub-TLV 11.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-source-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) Ipv4SourceRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-source-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4SourceRouterId (container): This container defines sub-TLV 11.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-source-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) Ipv4SourceRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-source-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6SourceRouterId (container): This container defines sub-TLV 12.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-source-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) Ipv6SourceRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-source-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6SourceRouterId (container): This container defines sub-TLV 12.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-source-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) Ipv6SourceRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-source-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSidAny (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) PrefixSidAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
	return ps
}

// PrefixSidAny (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) PrefixSidAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
	return ps
}

// PrefixSid (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
//
//	Value: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) PrefixSid(Value uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
	return ps
}

// PrefixSid (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
//
//	Value: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) PrefixSid(Value uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
	return ps
}

// PrefixSidMap (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) PrefixSidMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSidMap (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) PrefixSidMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tag (container): This container defines sub-TLV 1.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) Tag() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tag (container): This container defines sub-TLV 1.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) Tag() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tag64 (container): This container defines sub-TLV 2.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) Tag64() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64Path {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag64"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tag64 (container): This container defines sub-TLV 2.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) Tag64() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64PathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag64"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMap) State() ygnmi.SingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv] {
	return ygnmi.NewSingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).Subtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:subtlv"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_SubtlvPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv] {
	return ygnmi.NewWildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix).Subtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:subtlv"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Flags_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Flags_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Flags_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Flags_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Flags_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Flags_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): Additional prefix reachability flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Additional prefix reachability flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_FlagsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny struct {
	*ygnmi.NodePath
}

// RouterId (leaf): IPv4 Source router ID address. In cases where the
// advertisement is an identifier for the advertising
// router (e.g., with the N-flag set in the Prefix
// Attribute Flags sub-TLV), it may be useful for other
// routers to know the source of the advertisement. When
// reachability advertisement is leaked from one level to
// another, Router ID advertised is always the Router ID
// of the IS-IS instance that originated the
// advertisement. This would be true even if the prefix
// had been learned from another protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): IPv4 Source router ID address. In cases where the
// advertisement is an identifier for the advertising
// router (e.g., with the N-flag set in the Prefix
// Attribute Flags sub-TLV), it may be useful for other
// routers to know the source of the advertisement. When
// reachability advertisement is leaked from one level to
// another, Router ID advertised is always the Router ID
// of the IS-IS instance that originated the
// advertisement. This would be true even if the prefix
// had been learned from another protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny struct {
	*ygnmi.NodePath
}

// RouterId (leaf): IPv6 Source router ID address. In cases where the
// advertisement is an identifier for the advertising
// router (e.g., with the N-flag set in the Prefix
// Attribute Flags sub-TLV), it may be useful for other
// routers to know the source of the advertisement. When
// reachability advertisement is leaked from one level to
// another, Router ID advertised is always the Router ID
// of the IS-IS instance that originated the
// advertisement. This would be true even if the prefix
// had been learned from another protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): IPv6 Source router ID address. In cases where the
// advertisement is an identifier for the advertising
// router (e.g., with the N-flag set in the Prefix
// Attribute Flags sub-TLV), it may be useful for other
// routers to know the source of the advertisement. When
// reachability advertisement is leaked from one level to
// another, Router ID advertised is always the Router ID
// of the IS-IS instance that originated the
// advertisement. This would be true even if the prefix
// had been learned from another protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid).Algorithm
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid).Algorithm
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PrefixSid_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_PrefixSid_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PrefixSid_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PrefixSid_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_PrefixSid_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PrefixSid_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "value"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "value"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMapAny struct {
	*ygnmi.NodePath
}

// Algorithm (leaf): Prefix-SID algorithm to be used for path computation.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPath) Algorithm() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Algorithm (leaf): Prefix-SID algorithm to be used for path computation.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny) Algorithm() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Prefix Segment-ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Prefix Segment-ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): IGP Prefix-SID value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/*/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPath) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): IGP Prefix-SID value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/*/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv).PrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:prefix-sid"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSidPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_PrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv).PrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:prefix-sid"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag32"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32Path) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag32"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag).Tag32
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag32"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32PathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag32"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag).Tag32
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPathAny struct {
	*ygnmi.NodePath
}

// Tag32 (leaf-list): List of 32-bit tags associated with the prefix. Example
// uses of these tags include carrying BGP standard (or
// extended) communities and controlling redistribution
// between levels and areas, different routing protocols,
// or multiple instances of IS-IS running on the same
// router.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag32"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPath) Tag32() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32Path {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tag32"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tag32 (leaf-list): List of 32-bit tags associated with the prefix. Example
// uses of these tags include carrying BGP standard (or
// extended) communities and controlling redistribution
// between levels and areas, different routing protocols,
// or multiple instances of IS-IS running on the same
// router.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag32"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPathAny) Tag32() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32PathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag_Tag32PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tag32"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_TagPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64Path) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag64"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64).Tag64
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64PathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag64"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64).Tag64
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64PathAny struct {
	*ygnmi.NodePath
}

// Tag64 (leaf-list): List of 64-bit tags associated with the prefix. Example
// uses of these tags include carrying BGP standard (or
// extended) communities and controlling redistribution
// between levels and areas, different routing protocols,
// or multiple instances of IS-IS running on the same
// router.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64Path) Tag64() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64Path {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tag64"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tag64 (leaf-list): List of 64-bit tags associated with the prefix. Example
// uses of these tags include carrying BGP standard (or
// extended) communities and controlling redistribution
// between levels and areas, different routing protocols,
// or multiple instances of IS-IS running on the same
// router.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64PathAny) Tag64() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64PathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64_Tag64PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tag64"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_Subtlv_Tag64",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_LengthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_LengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_LengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv).Length
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_LengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv).Length
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_TypePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_TypePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_TypePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_TypePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_ValuePath) State() ygnmi.SingletonQuery[oc.Binary] {
	return ygnmi.NewSingletonQuery[oc.Binary](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv_ValuePathAny) State() ygnmi.WildcardQuery[oc.Binary] {
	return ygnmi.NewWildcardQuery[oc.Binary](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_ExtendedIpv4Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
