/*
Package netinstisis is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package netinstisis

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// DefaultMetric (container): This container defines ISIS Default Metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPath) DefaultMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"default-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DefaultMetric (container): This container defines ISIS Default Metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathAny) DefaultMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"default-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DelayMetric (container): This container defines the ISIS delay metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "delay-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPath) DelayMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"delay-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DelayMetric (container): This container defines the ISIS delay metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "delay-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathAny) DelayMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"delay-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ErrorMetric (container): This container defines the ISIS error metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "error-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPath) ErrorMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"error-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ErrorMetric (container): This container defines the ISIS error metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "error-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathAny) ErrorMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"error-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExpenseMetric (container): This container defines the ISIS expense metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "expense-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPath) ExpenseMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"expense-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExpenseMetric (container): This container defines the ISIS expense metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "expense-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathAny) ExpenseMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"expense-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within reachability TLVs.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPath) Prefix() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_PrefixPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv4 prefix contained within reachability TLVs.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathAny) Prefix() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpDown (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level (e.g., level 2 to level 1),
// indicating that the prefix has traveled down the hierarchy.
// Prefixes that have the up/down bit set may only be
// advertised down the hierarchy, i.e., to lower levels. When a
// prefix is first injected into IS-IS, the bit is UNSET.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPath) UpDown() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_UpDownPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_UpDownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpDown (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level (e.g., level 2 to level 1),
// indicating that the prefix has traveled down the hierarchy.
// Prefixes that have the up/down bit set may only be
// advertised down the hierarchy, i.e., to lower levels. When a
// prefix is first injected into IS-IS, the bit is UNSET.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathAny) UpDown() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_UpDownPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_UpDownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefixes"},
			PostRelPath: []string{"openconfig-network-instance:prefix"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_PrefixPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefixes"},
			PostRelPath: []string{"openconfig-network-instance:prefix"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPath) State() ygnmi.SingletonQuery[oc.E_DefaultMetric_Flags] {
	return ygnmi.NewSingletonQuery[oc.E_DefaultMetric_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DefaultMetric_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPathAny) State() ygnmi.WildcardQuery[oc.E_DefaultMetric_Flags] {
	return ygnmi.NewWildcardQuery[oc.E_DefaultMetric_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DefaultMetric_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf): ISIS Default-Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf): ISIS Default-Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS default metric value. This is a metric understood by
// every Intermediate system in the domain. Each circuit
// shall have a positive  integral value assigned for this
// metric. The value may be associated with any  objective
// function of the circuit, but by convention is intended to
// measure the capacity of the circuit for handling traffic,
// for example, its throughput in  bits-per-second. Higher
// values indicate a lower capacity.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS default metric value. This is a metric understood by
// every Intermediate system in the domain. Each circuit
// shall have a positive  integral value assigned for this
// metric. The value may be associated with any  objective
// function of the circuit, but by convention is intended to
// measure the capacity of the circuit for handling traffic,
// for example, its throughput in  bits-per-second. Higher
// values indicate a lower capacity.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/default-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetricPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DefaultMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): ISIS Delay Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): ISIS Delay Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS delay metric value. This metric measures the transit
// delay of the associated circuit. It is an optional metric,
// which if assigned to a circuit shall have a positive
// integral value. Higher values indicate a longer transit
// delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS delay metric value. This metric measures the transit
// delay of the associated circuit. It is an optional metric,
// which if assigned to a circuit shall have a positive
// integral value. Higher values indicate a longer transit
// delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/delay-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetricPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_DelayMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): IS-IS error metric flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): IS-IS error metric flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS error metric value. This metric measures the
// residual error probability of the associated circuit. It
// is an optional metric, which if assigned to a circuit
// shall have a non-zero value. Higher values indicate a
// larger probability of undetected errors on the circuit.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS error metric value. This metric measures the
// residual error probability of the associated circuit. It
// is an optional metric, which if assigned to a circuit
// shall have a non-zero value. Higher values indicate a
// larger probability of undetected errors on the circuit.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/error-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetricPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ErrorMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): ISIS Expense Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): ISIS Expense Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS expense metric value. This metric measures the
// monetary cost of utilising the associated circuit. It is
// an optional metric, which if assigned to a circuit shall
// have a positive integral value1). Higher values indicate a
// larger monetary expense.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS expense metric value. This metric measures the
// monetary cost of utilising the associated circuit. It is
// an optional metric, which if assigned to a circuit shall
// have a positive integral value1). Higher values indicate a
// larger monetary expense.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-internal-reachability/prefixes/prefix/expense-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetricPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4InternalReachability_Prefix_ExpenseMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Ipv4Srlg_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Ipv4Srlg_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Ipv4Srlg_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Ipv4Srlg_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Ipv4Srlg_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Ipv4Srlg_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/instance-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/instance-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-number"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-number"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-interface-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-interface-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-interface-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).Ipv4InterfaceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-interface-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).Ipv4InterfaceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-neighbor-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-neighbor-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-neighbor-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).Ipv4NeighborAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-neighbor-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).Ipv4NeighborAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/psn-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/psn-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/psn-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/psn-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "psn-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).PsnNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/psn-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/psn-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "psn-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).PsnNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/srlg-value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/srlg-value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/srlg-value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlg-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).SrlgValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/srlg-value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlg-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).SrlgValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMapAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): SRLG flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): SRLG flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceNumber (leaf): An arbitrary unsigned 32-bit integer used to
// disambiguate the instance of TLV 138. The instance
// identifier is synthesised by the system
// and may be renumbered for the same SRLG definition
// in subsequent advertised LSPs if (and only if) the
// entire list of SRLGs is replaced.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/*/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath) InstanceNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceNumber (leaf): An arbitrary unsigned 32-bit integer used to
// disambiguate the instance of TLV 138. The instance
// identifier is synthesised by the system
// and may be renumbered for the same SRLG definition
// in subsequent advertised LSPs if (and only if) the
// entire list of SRLGs is replaced.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/*/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny) InstanceNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_InstanceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4InterfaceAddress (leaf): IPv4 interface address.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath) Ipv4InterfaceAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv4-interface-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4InterfaceAddress (leaf): IPv4 interface address.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny) Ipv4InterfaceAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4InterfaceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv4-interface-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4NeighborAddress (leaf): IPv4 neighbor address.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath) Ipv4NeighborAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv4-neighbor-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4NeighborAddress (leaf): IPv4 neighbor address.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/ipv4-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny) Ipv4NeighborAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_Ipv4NeighborAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv4-neighbor-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PsnNumber (leaf): Pseudonode number if the neighbor is on a LAN
// interface.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/psn-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/psn-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath) PsnNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "psn-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PsnNumber (leaf): Pseudonode number if the neighbor is on a LAN
// interface.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/psn-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/psn-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny) PsnNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_PsnNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "psn-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrlgValue (leaf-list): List of SRLG values.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/srlg-value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath) SrlgValue() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srlg-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrlgValue (leaf-list): List of SRLG values.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/srlg-value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny) SrlgValue() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SrlgValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srlg-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): Neighbor system ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath) SystemId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): Neighbor system ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-srlgs/ipv4-srlg/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny) SystemId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg_SystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Ipv4Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv4-srlgs"},
			PostRelPath: []string{"openconfig-network-instance:ipv4-srlg"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4SrlgPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Ipv4Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv4-srlgs"},
			PostRelPath: []string{"openconfig-network-instance:ipv4-srlg"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId).RouterId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId).RouterId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPathAny struct {
	*ygnmi.NodePath
}

// RouterId (leaf-list): IPv4 Traffic Engineering router ID of the node. For
// traffic engineering, it guarantees that we have a
// single stable address that can always be referenced in
// a path that will be reachable from multiple hops away,
// regardless of the state of the node's interfaces.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPath) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf-list): IPv4 Traffic Engineering router ID of the node. For
// traffic engineering, it guarantees that we have a
// single stable address that can always be referenced in
// a path that will be reachable from multiple hops away,
// regardless of the state of the node's interfaces.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv4-te-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPathAny) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterIdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv4TeRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses/state/address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses/state/address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses/state/address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses/state/address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPathAny struct {
	*ygnmi.NodePath
}

// Address (leaf-list): IPv6 interface addresses of the node.  MUST contain
// only the non-link-local IPv6 addresses assigned to the
// IS.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses/state/address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPath) Address() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf-list): IPv6 interface addresses of the node.  MUST contain
// only the non-link-local IPv6 addresses assigned to the
// IS.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-interface-addresses/state/address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPathAny) Address() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddressesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6InterfaceAddresses",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPathAny struct {
	*ygnmi.NodePath
}

// PrefixAny (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPath) PrefixAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPathAny) PrefixAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Prefix (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPath) Prefix(Prefix string) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Prefix (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix"
//
//	Prefix: string
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPathAny) Prefix(Prefix string) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// PrefixMap (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPath) PrefixMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixMap (list): This list defines IPv6 extended prefix attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPathAny) PrefixMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6ReachabilityPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/s-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/s-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/s-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/s-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "s-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).SBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/s-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/s-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "s-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).SBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/up-down YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/up-down YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).UpDown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).UpDown
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/x-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/x-bit YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/x-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/x-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "x-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).XBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/x-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/x-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "x-bit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).XBit
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// Metric (leaf): ISIS metric value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS metric value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix contained within extended reachability TLVs.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) Prefix() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): IPv6 prefix contained within extended reachability TLVs.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/*/prefix"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) Prefix() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SBit (leaf): The sub-tlv present bit. If UNSET, the octets of Sub-TLVs
// are not present. Otherwise, the bit is set and the octet
// following the prefix will contain the length of the Sub-TLV
// portion of the structure.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/s-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/s-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) SBit() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "s-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SBit (leaf): The sub-tlv present bit. If UNSET, the octets of Sub-TLVs
// are not present. Otherwise, the bit is set and the octet
// following the prefix will contain the length of the Sub-TLV
// portion of the structure.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/s-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/s-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) SBit() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SBitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "s-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SubtlvAny (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) SubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// SubtlvAny (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) SubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// Subtlv (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) Subtlv(Type oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// Subtlv (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) Subtlv(Type oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// SubtlvMap (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) SubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubtlvMap (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) SubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvAny (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) UndefinedSubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvAny (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) UndefinedSubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedSubtlv (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) UndefinedSubtlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedSubtlv (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) UndefinedSubtlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvMap (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) UndefinedSubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvMap (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) UndefinedSubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UpDown (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level (e.g., level 2 to level 1),
// indicating that the prefix has traveled down the hierarchy.
// Prefixes that have the up/down bit set may only be
// advertised down the hierarchy, i.e., to lower levels. When a
// prefix is first injected into IS-IS, the bit is UNSET.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) UpDown() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpDown (leaf): The up/down bit. Set if a prefix is advertised from a
// higher level to a lower level (e.g., level 2 to level 1),
// indicating that the prefix has traveled down the hierarchy.
// Prefixes that have the up/down bit set may only be
// advertised down the hierarchy, i.e., to lower levels. When a
// prefix is first injected into IS-IS, the bit is UNSET.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/up-down"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) UpDown() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UpDownPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-down"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// XBit (leaf): The external bit. Set when the prefix was distributed into
// IS-IS from another routing protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/x-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/x-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) XBit() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "x-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// XBit (leaf): The external bit. Set when the prefix was distributed into
// IS-IS from another routing protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/x-bit"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/state/x-bit"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) XBit() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_XBitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "x-bit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefixes"},
			PostRelPath: []string{"openconfig-network-instance:prefix"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_PrefixPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefixes"},
			PostRelPath: []string{"openconfig-network-instance:prefix"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePath) Config() ygnmi.ConfigQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMapAny struct {
	*ygnmi.NodePath
}

// Flags (container): This container defines sub-TLV 4.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"flags"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Flags (container): This container defines sub-TLV 4.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"flags"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4SourceRouterId (container): This container defines sub-TLV 11.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-source-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) Ipv4SourceRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-source-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4SourceRouterId (container): This container defines sub-TLV 11.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-source-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) Ipv4SourceRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-source-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6SourceRouterId (container): This container defines sub-TLV 12.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-source-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) Ipv6SourceRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-source-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6SourceRouterId (container): This container defines sub-TLV 12.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-source-router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) Ipv6SourceRouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-source-router-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSidAny (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) PrefixSidAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
	return ps
}

// PrefixSidAny (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) PrefixSidAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
	return ps
}

// PrefixSid (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
//
//	Value: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) PrefixSid(Value uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
	return ps
}

// PrefixSid (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
//
//	Value: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) PrefixSid(Value uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids", "prefix-sid"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
	return ps
}

// PrefixSidMap (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) PrefixSidMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSidMap (list): Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment
// attached to an IGP prefix. An IGP-Prefix Segment is global
// (unless explicitly advertised otherwise) within the SR/IGP
// domain.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "prefix-sids/prefix-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) PrefixSidMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tag (container): This container defines sub-TLV 1.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) Tag() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tag (container): This container defines sub-TLV 1.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) Tag() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tag64 (container): This container defines sub-TLV 2.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) Tag64() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64Path {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag64"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Tag64 (container): This container defines sub-TLV 2.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) Tag64() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64PathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag64"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMap) State() ygnmi.SingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv] {
	return ygnmi.NewSingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).Subtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:subtlv"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_SubtlvPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv] {
	return ygnmi.NewWildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).Subtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:subtlv"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Flags_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Flags_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Flags_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Flags_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Flags_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Flags_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): Additional prefix reachability flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Additional prefix reachability flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/flags/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_FlagsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Flags",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny struct {
	*ygnmi.NodePath
}

// RouterId (leaf): IPv4 Source router ID address. In cases where the
// advertisement is an identifier for the advertising
// router (e.g., with the N-flag set in the Prefix
// Attribute Flags sub-TLV), it may be useful for other
// routers to know the source of the advertisement. When
// reachability advertisement is leaked from one level to
// another, Router ID advertised is always the Router ID
// of the IS-IS instance that originated the
// advertisement. This would be true even if the prefix
// had been learned from another protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): IPv4 Source router ID address. In cases where the
// advertisement is an identifier for the advertising
// router (e.g., with the N-flag set in the Prefix
// Attribute Flags sub-TLV), it may be useful for other
// routers to know the source of the advertisement. When
// reachability advertisement is leaked from one level to
// another, Router ID advertised is always the Router ID
// of the IS-IS instance that originated the
// advertisement. This would be true even if the prefix
// had been learned from another protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv4-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterIdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv4SourceRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny struct {
	*ygnmi.NodePath
}

// RouterId (leaf): IPv6 Source router ID address. In cases where the
// advertisement is an identifier for the advertising
// router (e.g., with the N-flag set in the Prefix
// Attribute Flags sub-TLV), it may be useful for other
// routers to know the source of the advertisement. When
// reachability advertisement is leaked from one level to
// another, Router ID advertised is always the Router ID
// of the IS-IS instance that originated the
// advertisement. This would be true even if the prefix
// had been learned from another protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): IPv6 Source router ID address. In cases where the
// advertisement is an identifier for the advertising
// router (e.g., with the N-flag set in the Prefix
// Attribute Flags sub-TLV), it may be useful for other
// routers to know the source of the advertisement. When
// reachability advertisement is leaked from one level to
// another, Router ID advertised is always the Router ID
// of the IS-IS instance that originated the
// advertisement. This would be true even if the prefix
// had been learned from another protocol.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/ipv6-source-router-id/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterIdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Ipv6SourceRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid).Algorithm
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid).Algorithm
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PrefixSid_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_PrefixSid_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PrefixSid_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PrefixSid_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_PrefixSid_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PrefixSid_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "value"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "value"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMapAny struct {
	*ygnmi.NodePath
}

// Algorithm (leaf): Prefix-SID algorithm to be used for path computation.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPath) Algorithm() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Algorithm (leaf): Prefix-SID algorithm to be used for path computation.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/algorithm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/algorithm"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny) Algorithm() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_AlgorithmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "algorithm"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Prefix Segment-ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Prefix Segment-ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): IGP Prefix-SID value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/*/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPath) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): IGP Prefix-SID value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/prefix-sids/prefix-sid/*/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv).PrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:prefix-sid"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSidPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_PrefixSid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv).PrefixSid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:prefix-sids"},
			PostRelPath: []string{"openconfig-network-instance:prefix-sid"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag32"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32Path) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag32"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag).Tag32
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag32"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32PathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag32"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag).Tag32
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPathAny struct {
	*ygnmi.NodePath
}

// Tag32 (leaf-list): List of 32-bit tags associated with the prefix. Example
// uses of these tags include carrying BGP standard (or
// extended) communities and controlling redistribution
// between levels and areas, different routing protocols,
// or multiple instances of IS-IS running on the same
// router.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag32"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPath) Tag32() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32Path {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tag32"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tag32 (leaf-list): List of 32-bit tags associated with the prefix. Example
// uses of these tags include carrying BGP standard (or
// extended) communities and controlling redistribution
// between levels and areas, different routing protocols,
// or multiple instances of IS-IS running on the same
// router.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag32"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag/state/tag32"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPathAny) Tag32() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32PathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag_Tag32PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tag32"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_TagPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64Path) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag64"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64).Tag64
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64PathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag64"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64).Tag64
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64 YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64PathAny struct {
	*ygnmi.NodePath
}

// Tag64 (leaf-list): List of 64-bit tags associated with the prefix. Example
// uses of these tags include carrying BGP standard (or
// extended) communities and controlling redistribution
// between levels and areas, different routing protocols,
// or multiple instances of IS-IS running on the same
// router.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64Path) Tag64() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64Path {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tag64"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tag64 (leaf-list): List of 64-bit tags associated with the prefix. Example
// uses of these tags include carrying BGP standard (or
// extended) communities and controlling redistribution
// between levels and areas, different routing protocols,
// or multiple instances of IS-IS running on the same
// router.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tag64"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/subtlvs/subtlv/tag64/state/tag64"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64PathAny) Tag64() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64PathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64_Tag64PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tag64"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_Subtlv_Tag64",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv).Length
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv).Length
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv).Type
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePath) State() ygnmi.SingletonQuery[oc.Binary] {
	return ygnmi.NewSingletonQuery[oc.Binary](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePathAny) State() ygnmi.WildcardQuery[oc.Binary] {
	return ygnmi.NewWildcardQuery[oc.Binary](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Binary, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv).Value
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMapAny struct {
	*ygnmi.NodePath
}

// Length (leaf): TLV length.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPath) Length() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): TLV length.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/length"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny) Length() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): TLV Type.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): TLV Type.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): TLV value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPath) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): TLV value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-reachability/prefixes/prefix/undefined-subtlvs/undefined-subtlv/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).UndefinedSubtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:undefined-subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:undefined-subtlv"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlvPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix_UndefinedSubtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix).UndefinedSubtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Reachability_Prefix)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:undefined-subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:undefined-subtlv"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Ipv6Srlg_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Ipv6Srlg_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Ipv6Srlg_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Ipv6Srlg_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Ipv6Srlg_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Ipv6Srlg_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/instance-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/instance-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-number"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instance-number"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).InstanceNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-interface-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-interface-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-interface-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).Ipv6InterfaceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-interface-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).Ipv6InterfaceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-neighbor-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-neighbor-address YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-neighbor-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).Ipv6NeighborAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-neighbor-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).Ipv6NeighborAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/psn-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/psn-number YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/psn-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/psn-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "psn-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).PsnNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/psn-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/psn-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "psn-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).PsnNumber
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/srlg-value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/srlg-value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/srlg-value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlg-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).SrlgValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/srlg-value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlg-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).SrlgValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMapAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): IPv6 SRLG flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): IPv6 SRLG flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceNumber (leaf): An arbitrary unsigned 32-bit integer used to
// disambiguate the instance of TLV 138. The instance
// identifier is synthesised by the system
// and may be renumbered for the same SRLG definition
// in subsequent advertised LSPs if (and only if) the
// entire list of SRLGs is replaced.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/*/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath) InstanceNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstanceNumber (leaf): An arbitrary unsigned 32-bit integer used to
// disambiguate the instance of TLV 138. The instance
// identifier is synthesised by the system
// and may be renumbered for the same SRLG definition
// in subsequent advertised LSPs if (and only if) the
// entire list of SRLGs is replaced.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/instance-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/*/instance-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny) InstanceNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_InstanceNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "instance-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6InterfaceAddress (leaf): IPv6 interface address or Link Local Identifier.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath) Ipv6InterfaceAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv6-interface-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6InterfaceAddress (leaf): IPv6 interface address or Link Local Identifier.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny) Ipv6InterfaceAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6InterfaceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv6-interface-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6NeighborAddress (leaf): IPv6 neighbor address or Link Remote Identifier.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath) Ipv6NeighborAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv6-neighbor-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6NeighborAddress (leaf): IPv6 neighbor address or Link Remote Identifier.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/ipv6-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny) Ipv6NeighborAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_Ipv6NeighborAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv6-neighbor-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PsnNumber (leaf): Pseudonode number if the neighbor is on a LAN
// interface.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/psn-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/psn-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath) PsnNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "psn-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PsnNumber (leaf): Pseudonode number if the neighbor is on a LAN
// interface.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/psn-number"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/psn-number"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny) PsnNumber() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_PsnNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "psn-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrlgValue (leaf-list): SRLG values.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/srlg-value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath) SrlgValue() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srlg-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrlgValue (leaf-list): SRLG values.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/srlg-value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny) SrlgValue() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SrlgValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "srlg-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): Neighbor system ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath) SystemId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): Neighbor system ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-srlgs/ipv6-srlg/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny) SystemId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg_SystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Ipv6Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv6-srlgs"},
			PostRelPath: []string{"openconfig-network-instance:ipv6-srlg"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6SrlgPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv).Ipv6Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv6-srlgs"},
			PostRelPath: []string{"openconfig-network-instance:ipv6-srlg"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id/state/router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId).RouterId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId).RouterId
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPathAny struct {
	*ygnmi.NodePath
}

// RouterId (leaf-list): IPv6 Traffic Engineering router ID of the node. For
// traffic engineering, it guarantees that we have a
// single stable address that can always be referenced in
// a path that will be reachable from multiple hops away,
// regardless of the state of the node's interfaces.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPath) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf-list): IPv6 Traffic Engineering router ID of the node. For
// traffic engineering, it guarantees that we have a
// single stable address that can always be referenced in
// a path that will be reachable from multiple hops away,
// regardless of the state of the node's interfaces.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/ipv6-te-router-id/state/router-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPathAny) RouterId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterIdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Ipv6TeRouterId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id/state/alias-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id/state/alias-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/alias-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id/state/alias-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId).AliasId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/alias-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id/state/alias-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId).AliasId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPathAny struct {
	*ygnmi.NodePath
}

// AliasId (leaf): List of alias ID(s).
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/alias-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id/state/alias-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPath) AliasId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "alias-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AliasId (leaf): List of alias ID(s).
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/alias-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-alias-id/state/alias-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPathAny) AliasId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId_AliasIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "alias-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasIdPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsAliasId",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPathAny struct {
	*ygnmi.NodePath
}

// NeighborAny (list): IS reachability neighbor attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPath) NeighborAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): IS reachability neighbor attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPathAny) NeighborAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): IS reachability neighbor attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor"
//
//	SystemId: string
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPath) Neighbor(SystemId string) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// Neighbor (list): IS reachability neighbor attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor"
//
//	SystemId: string
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPathAny) Neighbor(SystemId string) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// NeighborMap (list): IS reachability neighbor attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPath) NeighborMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): IS reachability neighbor attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPathAny) NeighborMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachabilityPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// DefaultMetric (container): This container defines ISIS Default Metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath) DefaultMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"default-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DefaultMetric (container): This container defines ISIS Default Metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny) DefaultMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"default-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DelayMetric (container): This container defines the ISIS delay metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "delay-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath) DelayMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"delay-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DelayMetric (container): This container defines the ISIS delay metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "delay-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny) DelayMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"delay-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ErrorMetric (container): This container defines the ISIS error metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "error-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath) ErrorMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"error-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ErrorMetric (container): This container defines the ISIS error metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "error-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny) ErrorMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"error-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExpenseMetric (container): This container defines the ISIS expense metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "expense-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath) ExpenseMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"expense-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExpenseMetric (container): This container defines the ISIS expense metric.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "expense-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny) ExpenseMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"expense-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SystemId (leaf): System-ID of IS neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/*/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath) SystemId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): System-ID of IS neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/*/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny) SystemId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_SystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPath) State() ygnmi.SingletonQuery[oc.E_DefaultMetric_Flags] {
	return ygnmi.NewSingletonQuery[oc.E_DefaultMetric_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DefaultMetric_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPathAny) State() ygnmi.WildcardQuery[oc.E_DefaultMetric_Flags] {
	return ygnmi.NewWildcardQuery[oc.E_DefaultMetric_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_DefaultMetric_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf): ISIS Default-Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf): ISIS Default-Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS default metric value. This is a metric understood by
// every Intermediate system in the domain. Each circuit
// shall have a positive  integral value assigned for this
// metric. The value may be associated with any  objective
// function of the circuit, but by convention is intended to
// measure the capacity of the circuit for handling traffic,
// for example, its throughput in  bits-per-second. Higher
// values indicate a lower capacity.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS default metric value. This is a metric understood by
// every Intermediate system in the domain. Each circuit
// shall have a positive  integral value assigned for this
// metric. The value may be associated with any  objective
// function of the circuit, but by convention is intended to
// measure the capacity of the circuit for handling traffic,
// for example, its throughput in  bits-per-second. Higher
// values indicate a lower capacity.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/default-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetricPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DefaultMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): ISIS Delay Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): ISIS Delay Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS delay metric value. This metric measures the transit
// delay of the associated circuit. It is an optional metric,
// which if assigned to a circuit shall have a positive
// integral value. Higher values indicate a longer transit
// delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS delay metric value. This metric measures the transit
// delay of the associated circuit. It is an optional metric,
// which if assigned to a circuit shall have a positive
// integral value. Higher values indicate a longer transit
// delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/delay-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetricPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_DelayMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): IS-IS error metric flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): IS-IS error metric flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS error metric value. This metric measures the
// residual error probability of the associated circuit. It
// is an optional metric, which if assigned to a circuit
// shall have a non-zero value. Higher values indicate a
// larger probability of undetected errors on the circuit.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS error metric value. This metric measures the
// residual error probability of the associated circuit. It
// is an optional metric, which if assigned to a circuit
// shall have a non-zero value. Higher values indicate a
// larger probability of undetected errors on the circuit.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/error-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetricPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ErrorMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewSingletonQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_Isis_IsisMetricFlags] {
	return ygnmi.NewWildcardQuery[[]oc.E_Isis_IsisMetricFlags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Isis_IsisMetricFlags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPathAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): ISIS Expense Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): ISIS Expense Metric Flags.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS expense metric value. This metric measures the
// monetary cost of utilising the associated circuit. It is
// an optional metric, which if assigned to a circuit shall
// have a positive integral value1). Higher values indicate a
// larger monetary expense.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): ISIS expense metric value. This metric measures the
// monetary cost of utilising the associated circuit. It is
// an optional metric, which if assigned to a circuit shall
// have a positive integral value1). Higher values indicate a
// larger monetary expense.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/is-reachability/neighbors/neighbor/expense-metric/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetricPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsReachability_Neighbor_ExpenseMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePathAny struct {
	*ygnmi.NodePath
}

// NeighborAny (list): This list describes ISIS extended neighbors and
// reachability attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePath) NeighborAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): This list describes ISIS extended neighbors and
// reachability attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePathAny) NeighborAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): This list describes ISIS extended neighbors and
// reachability attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor"
//
//	SystemId: string
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePath) Neighbor(SystemId string) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// Neighbor (list): This list describes ISIS extended neighbors and
// reachability attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor"
//
//	SystemId: string
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePathAny) Neighbor(SystemId string) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"system-id": SystemId},
			n,
		),
	}
	return ps
}

// NeighborMap (list): This list describes ISIS extended neighbors and
// reachability attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePath) NeighborMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): This list describes ISIS extended neighbors and
// reachability attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePathAny) NeighborMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttributePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/state/system-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/state/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "system-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"system-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor).SystemId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// InstanceAny (list): Instance of the TLV to the remote IS neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instances/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPath) InstanceAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instances", "instance"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InstanceAny (list): Instance of the TLV to the remote IS neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instances/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny) InstanceAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instances", "instance"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Instance (list): Instance of the TLV to the remote IS neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instances/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance"
//
//	Id: uint64
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPath) Instance(Id uint64) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instances", "instance"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Instance (list): Instance of the TLV to the remote IS neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instances/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance"
//
//	Id: uint64
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny) Instance(Id uint64) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instances", "instance"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InstanceMap (list): Instance of the TLV to the remote IS neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instances/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPath) InstanceMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"instances"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InstanceMap (list): Instance of the TLV to the remote IS neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "instances/instance"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny) InstanceMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instances"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SystemId (leaf): System-id of the neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/*/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPath) SystemId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SystemId (leaf): System-id of the neighbor.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/system-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/*/system-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny) SystemId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_SystemIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "system-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/metric YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): Unique identifier for the instance of the
// TLV for the IS neighbor. The instance
// ID is not required to be consistent across
// across readvertisements of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/*/id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath) Id() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): Unique identifier for the instance of the
// TLV for the IS neighbor. The instance
// ID is not required to be consistent across
// across readvertisements of the LSP.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/*/id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny) Id() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): Metric value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): Metric value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/state/metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny) Metric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SubtlvAny (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath) SubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// SubtlvAny (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny) SubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// Subtlv (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath) Subtlv(Type oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// Subtlv (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv"
//
//	Type: oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny) Subtlv(Type oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs", "subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// SubtlvMap (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath) SubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SubtlvMap (list): List of subTLV types in the LSDB for the specified TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subtlvs/subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny) SubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvAny (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath) UndefinedSubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvAny (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny) UndefinedSubtlvAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// UndefinedSubtlv (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/undefined-subtlvs/undefined-subtlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath) UndefinedSubtlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedSubtlv (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/undefined-subtlvs/undefined-subtlv"
//
//	Type: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny) UndefinedSubtlv(Type uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs", "undefined-subtlv"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvMap (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath) UndefinedSubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UndefinedSubtlvMap (list): Sub-TLVs that are not defined in the model or not
// recognised by system.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "undefined-subtlvs/undefined-subtlv"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/undefined-subtlvs/undefined-subtlv"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny) UndefinedSubtlvMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_UndefinedSubtlvPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"undefined-subtlvs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor).Instance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:instances"},
			PostRelPath: []string{"openconfig-network-instance:instance"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_InstancePathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor).Instance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:instances"},
			PostRelPath: []string{"openconfig-network-instance:instance"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePath) Config() ygnmi.ConfigQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMapAny struct {
	*ygnmi.NodePath
}

// AdjacencySidAny (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) AdjacencySidAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids", "adjacency-sid"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
	return ps
}

// AdjacencySidAny (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) AdjacencySidAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids", "adjacency-sid"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
	return ps
}

// AdjacencySid (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid"
//
//	Value: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) AdjacencySid(Value uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids", "adjacency-sid"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
	return ps
}

// AdjacencySid (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid"
//
//	Value: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) AdjacencySid(Value uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids", "adjacency-sid"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
	return ps
}

// AdjacencySidMap (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) AdjacencySidMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdjacencySidMap (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "adjacency-sids/adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) AdjacencySidMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"adjacency-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminGroup (container): This container defines sub-TLV 3.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) AdminGroup() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-group"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminGroup (container): This container defines sub-TLV 3.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) AdminGroup() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-group"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AvailableBandwidth (container): This container defines unidirectional lavailable
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "available-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) AvailableBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"available-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AvailableBandwidth (container): This container defines unidirectional lavailable
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "available-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) AvailableBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"available-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BandwidthConstraintAny (list): List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-constraints/bandwidth-constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) BandwidthConstraintAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-constraints", "bandwidth-constraint"},
			map[string]interface{}{"model-id": "*"},
			n,
		),
	}
	return ps
}

// BandwidthConstraintAny (list): List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-constraints/bandwidth-constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) BandwidthConstraintAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-constraints", "bandwidth-constraint"},
			map[string]interface{}{"model-id": "*"},
			n,
		),
	}
	return ps
}

// BandwidthConstraint (list): List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-constraints/bandwidth-constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint"
//
//	ModelId: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) BandwidthConstraint(ModelId uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-constraints", "bandwidth-constraint"},
			map[string]interface{}{"model-id": ModelId},
			n,
		),
	}
	return ps
}

// BandwidthConstraint (list): List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-constraints/bandwidth-constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint"
//
//	ModelId: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) BandwidthConstraint(ModelId uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-constraints", "bandwidth-constraint"},
			map[string]interface{}{"model-id": ModelId},
			n,
		),
	}
	return ps
}

// BandwidthConstraintMap (list): List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-constraints/bandwidth-constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) BandwidthConstraintMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BandwidthConstraintMap (list): List of the Bandwidth Constraints sub-TLV instances
// present in the TLV.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-constraints/bandwidth-constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) BandwidthConstraintMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtendedAdminGroup (container): This container defines sub-TLV 14.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "extended-admin-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/extended-admin-group"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) ExtendedAdminGroup() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_ExtendedAdminGroupPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_ExtendedAdminGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-admin-group"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtendedAdminGroup (container): This container defines sub-TLV 14.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "extended-admin-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/extended-admin-group"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) ExtendedAdminGroup() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_ExtendedAdminGroupPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_ExtendedAdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"extended-admin-group"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4InterfaceAddress (container): This container defines sub-TLV 6.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/ipv4-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) Ipv4InterfaceAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv4InterfaceAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv4InterfaceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-interface-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4InterfaceAddress (container): This container defines sub-TLV 6.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/ipv4-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) Ipv4InterfaceAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv4InterfaceAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv4InterfaceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-interface-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4NeighborAddress (container): This container defines sub-TLV 8.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/ipv4-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) Ipv4NeighborAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv4NeighborAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv4NeighborAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-neighbor-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4NeighborAddress (container): This container defines sub-TLV 8.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/ipv4-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) Ipv4NeighborAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv4NeighborAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv4NeighborAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-neighbor-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6InterfaceAddress (container): This container defines sub-TLV 12.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/ipv6-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) Ipv6InterfaceAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv6InterfaceAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv6InterfaceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-interface-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6InterfaceAddress (container): This container defines sub-TLV 12.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-interface-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/ipv6-interface-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) Ipv6InterfaceAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv6InterfaceAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv6InterfaceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-interface-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6NeighborAddress (container): This container defines sub-TLV 13.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/ipv6-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) Ipv6NeighborAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv6NeighborAddressPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv6NeighborAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-neighbor-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6NeighborAddress (container): This container defines sub-TLV 13.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-neighbor-address"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/ipv6-neighbor-address"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) Ipv6NeighborAddress() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv6NeighborAddressPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_Ipv6NeighborAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-neighbor-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LanAdjacencySidAny (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lan-adjacency-sids/lan-adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) LanAdjacencySidAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lan-adjacency-sids", "lan-adjacency-sid"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
	return ps
}

// LanAdjacencySidAny (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lan-adjacency-sids/lan-adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) LanAdjacencySidAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lan-adjacency-sids", "lan-adjacency-sid"},
			map[string]interface{}{"value": "*"},
			n,
		),
	}
	return ps
}

// LanAdjacencySid (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lan-adjacency-sids/lan-adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid"
//
//	Value: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) LanAdjacencySid(Value uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lan-adjacency-sids", "lan-adjacency-sid"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
	return ps
}

// LanAdjacencySid (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lan-adjacency-sids/lan-adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid"
//
//	Value: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) LanAdjacencySid(Value uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lan-adjacency-sids", "lan-adjacency-sid"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
	return ps
}

// LanAdjacencySidMap (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lan-adjacency-sids/lan-adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) LanAdjacencySidMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"lan-adjacency-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LanAdjacencySidMap (list): Adjacency Segment-IDs List. An IGP-Adjacency Segment is
// an IGP segment attached to a unidirectional adjacency or
// a set of unidirectional adjacencies. By default, an IGP-
// Adjacency Segment is local to the node which advertises
// it.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lan-adjacency-sids/lan-adjacency-sid"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/lan-adjacency-sids/lan-adjacency-sid"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) LanAdjacencySidMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LanAdjacencySidPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lan-adjacency-sids"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkAttributes (container): This container defines link-attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-attributes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-attributes"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) LinkAttributes() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkAttributesPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkAttributesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkAttributes (container): This container defines link-attributes.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-attributes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-attributes"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) LinkAttributes() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkAttributesPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkAttributesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkDelay (container): This container defines unidirectional link delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-delay"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) LinkDelay() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkDelayPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-delay"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkDelay (container): This container defines unidirectional link delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-delay"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) LinkDelay() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkDelayPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-delay"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkDelayVariation (container): This container defines unidirectional link delay
// variation.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-delay-variation"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-delay-variation"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) LinkDelayVariation() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkDelayVariationPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkDelayVariationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-delay-variation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkDelayVariation (container): This container defines unidirectional link delay
// variation.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-delay-variation"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-delay-variation"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) LinkDelayVariation() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkDelayVariationPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkDelayVariationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-delay-variation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkId (container): This container defines sub-TLV 4.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) LinkId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkId (container): This container defines sub-TLV 4.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) LinkId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-id"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkLoss (container): This container defines unidirectional link loss delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-loss"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-loss"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) LinkLoss() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkLossPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkLossPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-loss"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkLoss (container): This container defines unidirectional link loss delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-loss"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-loss"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) LinkLoss() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkLossPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkLossPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-loss"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkProtectionType (container): ISIS LSDB parameters relating to the type of link
// protection offered.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-protection-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-protection-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) LinkProtectionType() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkProtectionTypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkProtectionTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-protection-type"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LinkProtectionType (container): ISIS LSDB parameters relating to the type of link
// protection offered.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "link-protection-type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/link-protection-type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) LinkProtectionType() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkProtectionTypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_LinkProtectionTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"link-protection-type"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaxLinkBandwidth (container): This container defines sub-TLV 9.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "max-link-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/max-link-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) MaxLinkBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MaxLinkBandwidthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MaxLinkBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-link-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaxLinkBandwidth (container): This container defines sub-TLV 9.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "max-link-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/max-link-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) MaxLinkBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MaxLinkBandwidthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MaxLinkBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-link-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaxReservableLinkBandwidth (container): This container defines sub-TLV 10.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "max-reservable-link-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/max-reservable-link-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) MaxReservableLinkBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MaxReservableLinkBandwidthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MaxReservableLinkBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-reservable-link-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaxReservableLinkBandwidth (container): This container defines sub-TLV 10.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "max-reservable-link-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/max-reservable-link-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) MaxReservableLinkBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MaxReservableLinkBandwidthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MaxReservableLinkBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-reservable-link-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MinMaxLinkDelay (container): This container defines min/max link delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "min-max-link-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/min-max-link-delay"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) MinMaxLinkDelay() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MinMaxLinkDelayPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MinMaxLinkDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-max-link-delay"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MinMaxLinkDelay (container): This container defines min/max link delay.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "min-max-link-delay"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/min-max-link-delay"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) MinMaxLinkDelay() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MinMaxLinkDelayPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_MinMaxLinkDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-max-link-delay"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResidualBandwidth (container): This container defines unidirectional residual
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "residual-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/residual-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) ResidualBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_ResidualBandwidthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_ResidualBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"residual-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ResidualBandwidth (container): This container defines unidirectional residual
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "residual-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/residual-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) ResidualBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_ResidualBandwidthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_ResidualBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"residual-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetupPriorityAny (list): Setup priority (0 through 7) for unreserved
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unreserved-bandwidth/setup-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/unreserved-bandwidth/setup-priority"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) SetupPriorityAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unreserved-bandwidth", "setup-priority"},
			map[string]interface{}{"priority": "*"},
			n,
		),
	}
	return ps
}

// SetupPriorityAny (list): Setup priority (0 through 7) for unreserved
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unreserved-bandwidth/setup-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/unreserved-bandwidth/setup-priority"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) SetupPriorityAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unreserved-bandwidth", "setup-priority"},
			map[string]interface{}{"priority": "*"},
			n,
		),
	}
	return ps
}

// SetupPriority (list): Setup priority (0 through 7) for unreserved
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unreserved-bandwidth/setup-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/unreserved-bandwidth/setup-priority"
//
//	Priority: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) SetupPriority(Priority uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unreserved-bandwidth", "setup-priority"},
			map[string]interface{}{"priority": Priority},
			n,
		),
	}
	return ps
}

// SetupPriority (list): Setup priority (0 through 7) for unreserved
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unreserved-bandwidth/setup-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/unreserved-bandwidth/setup-priority"
//
//	Priority: uint8
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) SetupPriority(Priority uint8) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unreserved-bandwidth", "setup-priority"},
			map[string]interface{}{"priority": Priority},
			n,
		),
	}
	return ps
}

// SetupPriorityMap (list): Setup priority (0 through 7) for unreserved
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unreserved-bandwidth/setup-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/unreserved-bandwidth/setup-priority"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) SetupPriorityMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"unreserved-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetupPriorityMap (list): Setup priority (0 through 7) for unreserved
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unreserved-bandwidth/setup-priority"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/unreserved-bandwidth/setup-priority"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) SetupPriorityMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_SetupPriorityPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unreserved-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeDefaultMetric (container): This container defines sub-TLV 18.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/te-default-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) TeDefaultMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TeDefaultMetricPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TeDefaultMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-default-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeDefaultMetric (container): This container defines sub-TLV 18.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/te-default-metric"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) TeDefaultMetric() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TeDefaultMetricPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TeDefaultMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-default-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/*/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnconstrainedLsp (container): This container defines sub-TLV 23.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unconstrained-lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/unconstrained-lsp"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) UnconstrainedLsp() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_UnconstrainedLspPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_UnconstrainedLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unconstrained-lsp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UnconstrainedLsp (container): This container defines sub-TLV 23.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unconstrained-lsp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/unconstrained-lsp"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) UnconstrainedLsp() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_UnconstrainedLspPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_UnconstrainedLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unconstrained-lsp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UtilizedBandwidth (container): This container defines unidirectional utilized
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "utilized-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/utilized-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) UtilizedBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_UtilizedBandwidthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_UtilizedBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilized-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UtilizedBandwidth (container): This container defines unidirectional utilized
// bandwidth.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "utilized-bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/utilized-bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) UtilizedBandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_UtilizedBandwidthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_UtilizedBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilized-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMap) State() ygnmi.SingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv] {
	return ygnmi.NewSingletonQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance).Subtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:subtlv"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_SubtlvPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv] {
	return ygnmi.NewWildcardQuery[map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance).Subtlv
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:subtlvs"},
			PostRelPath: []string{"openconfig-network-instance:subtlv"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/flags YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPath) State() ygnmi.SingletonQuery[[]oc.E_AdjacencySid_Flags] {
	return ygnmi.NewSingletonQuery[[]oc.E_AdjacencySid_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_AdjacencySid_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_AdjacencySid_Flags] {
	return ygnmi.NewWildcardQuery[[]oc.E_AdjacencySid_Flags](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_AdjacencySid_Flags, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid).Flags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/value YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "value"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "value"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/weight YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/weight YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/weight"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid).Weight
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/weight"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid).Weight
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMapAny struct {
	*ygnmi.NodePath
}

// Flags (leaf-list): Flags associated with Adj-Segment-ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPath) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Flags (leaf-list): Flags associated with Adj-Segment-ID.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flags"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/flags"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny) Flags() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_FlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): Adjacency-SID value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/*/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPath) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): Adjacency-SID value.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/*/value"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny) Value() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): Value that represents the weight of the Adj-SID for
// the purpose of load balancing.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/weight"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPath) Weight() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): Value that represents the weight of the Adj-SID for
// the purpose of load balancing.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/adjacency-sids/adjacency-sid/state/weight"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny) Weight() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid_WeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv).AdjacencySid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:adjacency-sids"},
			PostRelPath: []string{"openconfig-network-instance:adjacency-sid"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySidPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdjacencySid, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv).AdjacencySid
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:adjacency-sids"},
			PostRelPath: []string{"openconfig-network-instance:adjacency-sid"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group/state/admin-group YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group/state/admin-group YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group/state/admin-group"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group/state/admin-group"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPathAny struct {
	*ygnmi.NodePath
}

// AdminGroup (leaf-list): The administrative group sub-TLV contains a 4-octet
// bit mask assigned by the network administrator.  Each
// set bit corresponds to one administrative group
// assigned to the interface. By convention, the least
// significant bit is referred to as group 0, and the
// most significant bit is referred to as group 31.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group/state/admin-group"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPath) AdminGroup() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminGroup (leaf-list): The administrative group sub-TLV contains a 4-octet
// bit mask assigned by the network administrator.  Each
// set bit corresponds to one administrative group
// assigned to the interface. By convention, the least
// significant bit is referred to as group 0, and the
// most significant bit is referred to as group 31.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/admin-group/state/admin-group"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPathAny) AdminGroup() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AdminGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth).Bandwidth
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth).Bandwidth
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/type YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePath) State() ygnmi.SingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePathAny) State() ygnmi.WildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IsisLsdbTypes_ISIS_SUBTLV_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPathAny struct {
	*ygnmi.NodePath
}

// Bandwidth (leaf): The available bandwidth on a link, forwarding
// adjacency, or bundled link in IEEE floating-point
// format with units of bytes per second. For a link or
// forwarding adjacency, available bandwidth is defined
// to be residual bandwidth minus the measured bandwidth
// used for the actual forwarding of non-RSVP-TE label
// switched path packets.  For a bundled link, available
// bandwidth is defined to be the sum of the component
// link available bandwidths minus the measured bandwidth
// used for the actual forwarding of non-RSVP-TE label
// switched path packets.  For a bundled link, available
// bandwidth is defined to be the sum of the component
// link available bandwidths.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPath) Bandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bandwidth (leaf): The available bandwidth on a link, forwarding
// adjacency, or bundled link in IEEE floating-point
// format with units of bytes per second. For a link or
// forwarding adjacency, available bandwidth is defined
// to be residual bandwidth minus the measured bandwidth
// used for the actual forwarding of non-RSVP-TE label
// switched path packets.  For a bundled link, available
// bandwidth is defined to be the sum of the component
// link available bandwidths minus the measured bandwidth
// used for the actual forwarding of non-RSVP-TE label
// switched path packets.  For a bundled link, available
// bandwidth is defined to be the sum of the component
// link available bandwidths.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPathAny) Bandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_BandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPath) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of subTLV being described. The type of subTLV is
// expressed as a canonical name.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/available-bandwidth/state/type"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPathAny) Type() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidthPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_AvailableBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/state/model-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/state/model-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/model-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/state/model-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "model-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint).ModelId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/model-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/state/model-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "model-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint).ModelId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "model-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"model-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint).ModelId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "model-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"model-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint).ModelId
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMapAny struct {
	*ygnmi.NodePath
}

// ConstraintAny (list): List of the constraints within the Bandwidth
// Constraints sub-TLV. The BC0 level is indicated by
// the constraint-id leaf being set to 0, with BCN
// being indicated by constraint-id N.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constraints/constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPath) ConstraintAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"constraints", "constraint"},
			map[string]interface{}{"constraint-id": "*"},
			n,
		),
	}
	return ps
}

// ConstraintAny (list): List of the constraints within the Bandwidth
// Constraints sub-TLV. The BC0 level is indicated by
// the constraint-id leaf being set to 0, with BCN
// being indicated by constraint-id N.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constraints/constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny) ConstraintAny() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"constraints", "constraint"},
			map[string]interface{}{"constraint-id": "*"},
			n,
		),
	}
	return ps
}

// Constraint (list): List of the constraints within the Bandwidth
// Constraints sub-TLV. The BC0 level is indicated by
// the constraint-id leaf being set to 0, with BCN
// being indicated by constraint-id N.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constraints/constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint"
//
//	ConstraintId: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPath) Constraint(ConstraintId uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"constraints", "constraint"},
			map[string]interface{}{"constraint-id": ConstraintId},
			n,
		),
	}
	return ps
}

// Constraint (list): List of the constraints within the Bandwidth
// Constraints sub-TLV. The BC0 level is indicated by
// the constraint-id leaf being set to 0, with BCN
// being indicated by constraint-id N.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constraints/constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint"
//
//	ConstraintId: uint32
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny) Constraint(ConstraintId uint32) *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"constraints", "constraint"},
			map[string]interface{}{"constraint-id": ConstraintId},
			n,
		),
	}
	return ps
}

// ConstraintMap (list): List of the constraints within the Bandwidth
// Constraints sub-TLV. The BC0 level is indicated by
// the constraint-id leaf being set to 0, with BCN
// being indicated by constraint-id N.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constraints/constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPath) ConstraintMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMap {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConstraintMap (list): List of the constraints within the Bandwidth
// Constraints sub-TLV. The BC0 level is indicated by
// the constraint-id leaf being set to 0, with BCN
// being indicated by constraint-id N.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constraints/constraint"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny) ConstraintMap() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMapAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ModelId (leaf): Identifier for the Bandwidth Constraints  Model
// currently in use by the LSR initiating the IGP
// advertisement.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/model-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/*/model-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPath) ModelId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "model-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ModelId (leaf): Identifier for the Bandwidth Constraints  Model
// currently in use by the LSR initiating the IGP
// advertisement.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/model-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/*/model-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny) ModelId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ModelIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "model-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv).BandwidthConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:bandwidth-constraints"},
			PostRelPath: []string{"openconfig-network-instance:bandwidth-constraint"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraintPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv).BandwidthConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:bandwidth-constraints"},
			PostRelPath: []string{"openconfig-network-instance:bandwidth-constraint"},
		},
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/bandwidth YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint).Bandwidth
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint).Bandwidth
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/constraint-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/constraint-id YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/constraint-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/constraint-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "constraint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint).ConstraintId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/constraint-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/constraint-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "constraint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint).ConstraintId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constraint-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"constraint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint).ConstraintId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constraint-id"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"constraint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint).ConstraintId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint YANG schema element.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMapAny struct {
	*ygnmi.NodePath
}

// Bandwidth (leaf): The bandwidth constraint, expressed as a 32-bit IEEE
// floating point number expressed in bytes per second.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPath) Bandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bandwidth (leaf): The bandwidth constraint, expressed as a 32-bit IEEE
// floating point number expressed in bytes per second.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bandwidth"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/state/bandwidth"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny) Bandwidth() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_BandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConstraintId (leaf): Unique reference for the bandwidth constraint level. BC0
// is indicated by this leaf being set to zero, with BCN
// represented by this leaf being set to N.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/constraint-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/*/constraint-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPath) ConstraintId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPath {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "constraint-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConstraintId (leaf): Unique reference for the bandwidth constraint level. BC0
// is indicated by this leaf being set to zero, with BCN
// represented by this leaf being set to N.
//
//	Defining module:      "openconfig-isis-lsp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/constraint-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/isis-neighbor-attribute/neighbors/neighbor/instances/instance/subtlvs/subtlv/bandwidth-constraints/bandwidth-constraint/constraints/constraint/*/constraint-id"
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny) ConstraintId() *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPathAny {
	ps := &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint_ConstraintIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "constraint-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint).Constraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:constraints"},
			PostRelPath: []string{"openconfig-network-instance:constraint"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_ConstraintPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint](
		"NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint_Constraint, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint).Constraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_IsisNeighborAttribute_Neighbor_Instance_Subtlv_BandwidthConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:constraints"},
			PostRelPath: []string{"openconfig-network-instance:constraint"},
		},
	)
}
