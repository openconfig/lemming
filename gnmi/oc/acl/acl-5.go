/*
Package acl is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package acl

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Acl_AclSet_AclEntry_Mpls_TtlValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TtlValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Mpls_TtlValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TtlValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value"
func (n *Acl_AclSet_AclEntry_Mpls_TtlValuePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/ttl-value"
func (n *Acl_AclSet_AclEntry_Mpls_TtlValuePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/ttl-value"
func (n *Acl_AclSet_AclEntry_Mpls_TtlValuePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/ttl-value"
func (n *Acl_AclSet_AclEntry_Mpls_TtlValuePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TtlValue
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_MplsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_MplsPath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_MplsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_MplsPathAny struct {
	*ygnmi.NodePath
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/end-label-value"
func (n *Acl_AclSet_AclEntry_MplsPath) EndLabelValue() *Acl_AclSet_AclEntry_Mpls_EndLabelValuePath {
	ps := &Acl_AclSet_AclEntry_Mpls_EndLabelValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/end-label-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) EndLabelValue() *Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny {
	ps := &Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "end-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/start-label-value"
func (n *Acl_AclSet_AclEntry_MplsPath) StartLabelValue() *Acl_AclSet_AclEntry_Mpls_StartLabelValuePath {
	ps := &Acl_AclSet_AclEntry_Mpls_StartLabelValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/start-label-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) StartLabelValue() *Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny {
	ps := &Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "start-label-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/traffic-class"
func (n *Acl_AclSet_AclEntry_MplsPath) TrafficClass() *Acl_AclSet_AclEntry_Mpls_TrafficClassPath {
	ps := &Acl_AclSet_AclEntry_Mpls_TrafficClassPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/traffic-class"
func (n *Acl_AclSet_AclEntry_MplsPathAny) TrafficClass() *Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny {
	ps := &Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "traffic-class"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/ttl-value"
func (n *Acl_AclSet_AclEntry_MplsPath) TtlValue() *Acl_AclSet_AclEntry_Mpls_TtlValuePath {
	ps := &Acl_AclSet_AclEntry_Mpls_TtlValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/ttl-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/*/ttl-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) TtlValue() *Acl_AclSet_AclEntry_Mpls_TtlValuePathAny {
	ps := &Acl_AclSet_AclEntry_Mpls_TtlValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_MplsPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Mpls] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Mpls](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_MplsPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Mpls](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_MplsPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Mpls] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Mpls](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_MplsPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Mpls](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_BuiltinDetailPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/builtin-detail YANG schema element.
type Acl_AclSet_AclEntry_Transport_BuiltinDetailPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/builtin-detail YANG schema element.
type Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/builtin-detail"
func (n *Acl_AclSet_AclEntry_Transport_BuiltinDetailPath) State() ygnmi.SingletonQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_BuiltinDetail](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/builtin-detail"
func (n *Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny) State() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/builtin-detail"
func (n *Acl_AclSet_AclEntry_Transport_BuiltinDetailPath) Config() ygnmi.ConfigQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewConfigQuery[oc.E_Transport_BuiltinDetail](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/builtin-detail"
func (n *Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_DestinationPortPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_DestinationPortPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortPath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortPathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortPath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortPathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_DestinationPortSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port-set YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port-set YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port-set"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/destination-port-set"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port-set"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port-set"
func (n *Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_DetailModePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/detail-mode YANG schema element.
type Acl_AclSet_AclEntry_Transport_DetailModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_DetailModePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/detail-mode YANG schema element.
type Acl_AclSet_AclEntry_Transport_DetailModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/detail-mode"
func (n *Acl_AclSet_AclEntry_Transport_DetailModePath) State() ygnmi.SingletonQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_DetailMode](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/detail-mode"
func (n *Acl_AclSet_AclEntry_Transport_DetailModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/detail-mode"
func (n *Acl_AclSet_AclEntry_Transport_DetailModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_DetailMode](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/detail-mode"
func (n *Acl_AclSet_AclEntry_Transport_DetailModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-detail-match-mode YANG schema element.
type Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-detail-match-mode YANG schema element.
type Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath) State() ygnmi.SingletonQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-tcp-flags YANG schema element.
type Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-tcp-flags YANG schema element.
type Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewSingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath) Config() ygnmi.ConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny) Config() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_SourcePortPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_SourcePortPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortPath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortPathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortPath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortPathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Transport_SourcePortSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port-set YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port-set YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port-set"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/state/source-port-set"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port-set"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port-set"
func (n *Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_TransportPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_TransportPath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_TransportPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_TransportPathAny struct {
	*ygnmi.NodePath
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/builtin-detail"
func (n *Acl_AclSet_AclEntry_TransportPath) BuiltinDetail() *Acl_AclSet_AclEntry_Transport_BuiltinDetailPath {
	ps := &Acl_AclSet_AclEntry_Transport_BuiltinDetailPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/builtin-detail"
func (n *Acl_AclSet_AclEntry_TransportPathAny) BuiltinDetail() *Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_BuiltinDetailPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/destination-port"
func (n *Acl_AclSet_AclEntry_TransportPath) DestinationPort() *Acl_AclSet_AclEntry_Transport_DestinationPortPath {
	ps := &Acl_AclSet_AclEntry_Transport_DestinationPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/destination-port"
func (n *Acl_AclSet_AclEntry_TransportPathAny) DestinationPort() *Acl_AclSet_AclEntry_Transport_DestinationPortPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_DestinationPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/destination-port-set"
func (n *Acl_AclSet_AclEntry_TransportPath) DestinationPortSet() *Acl_AclSet_AclEntry_Transport_DestinationPortSetPath {
	ps := &Acl_AclSet_AclEntry_Transport_DestinationPortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/destination-port-set"
func (n *Acl_AclSet_AclEntry_TransportPathAny) DestinationPortSet() *Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_DestinationPortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/detail-mode"
func (n *Acl_AclSet_AclEntry_TransportPath) DetailMode() *Acl_AclSet_AclEntry_Transport_DetailModePath {
	ps := &Acl_AclSet_AclEntry_Transport_DetailModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/detail-mode"
func (n *Acl_AclSet_AclEntry_TransportPathAny) DetailMode() *Acl_AclSet_AclEntry_Transport_DetailModePathAny {
	ps := &Acl_AclSet_AclEntry_Transport_DetailModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_TransportPath) ExplicitDetailMatchMode() *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath {
	ps := &Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/explicit-detail-match-mode"
func (n *Acl_AclSet_AclEntry_TransportPathAny) ExplicitDetailMatchMode() *Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny {
	ps := &Acl_AclSet_AclEntry_Transport_ExplicitDetailMatchModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_TransportPath) ExplicitTcpFlags() *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath {
	ps := &Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/explicit-tcp-flags"
func (n *Acl_AclSet_AclEntry_TransportPathAny) ExplicitTcpFlags() *Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_ExplicitTcpFlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/source-port"
func (n *Acl_AclSet_AclEntry_TransportPath) SourcePort() *Acl_AclSet_AclEntry_Transport_SourcePortPath {
	ps := &Acl_AclSet_AclEntry_Transport_SourcePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-port"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/source-port"
func (n *Acl_AclSet_AclEntry_TransportPathAny) SourcePort() *Acl_AclSet_AclEntry_Transport_SourcePortPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_SourcePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/source-port-set"
func (n *Acl_AclSet_AclEntry_TransportPath) SourcePortSet() *Acl_AclSet_AclEntry_Transport_SourcePortSetPath {
	ps := &Acl_AclSet_AclEntry_Transport_SourcePortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/*/source-port-set"
func (n *Acl_AclSet_AclEntry_TransportPathAny) SourcePortSet() *Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny {
	ps := &Acl_AclSet_AclEntry_Transport_SourcePortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_TransportPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Transport] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Transport](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_TransportPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Transport] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Transport](
		"Acl_AclSet_AclEntry_Transport",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_TransportPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Transport] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Transport](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_TransportPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Transport] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Transport](
		"Acl_AclSet_AclEntry_Transport",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
