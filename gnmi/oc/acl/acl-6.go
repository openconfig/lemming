/*
Package acl is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package acl

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Acl_Interface_IdPath represents the /openconfig-acl/acl/interfaces/interface/state/id YANG schema element.
type Acl_Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/state/id YANG schema element.
type Acl_Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/id"
//	Path from root:       "/acl/interfaces/interface/state/id"
func (n *Acl_Interface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/id"
//	Path from root:       "/acl/interfaces/interface/state/id"
func (n *Acl_Interface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/id"
//	Path from root:       "/acl/interfaces/interface/config/id"
func (n *Acl_Interface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/id"
//	Path from root:       "/acl/interfaces/interface/config/id"
func (n *Acl_Interface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_InterfacePath represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePath struct {
	*ygnmi.NodePath
}

// Acl_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePathAny struct {
	*ygnmi.NodePath
}

// Acl_InterfacePathMap represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePathMap struct {
	*ygnmi.NodePath
}

// Acl_InterfacePathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// EgressAclSetAny (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
func (n *Acl_InterfacePath) EgressAclSetAny() *Acl_Interface_EgressAclSetPathAny {
	ps := &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// EgressAclSetAny (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
func (n *Acl_InterfacePathAny) EgressAclSetAny() *Acl_Interface_EgressAclSetPathAny {
	ps := &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// WithSetName sets Acl_Interface_EgressAclSetPathAny's key "set-name" to the specified value.
// SetName: string
func (n *Acl_Interface_EgressAclSetPathAny) WithSetName(SetName string) *Acl_Interface_EgressAclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "set-name", SetName)
	return n
}

// WithType sets Acl_Interface_EgressAclSetPathAny's key "type" to the specified value.
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_Interface_EgressAclSetPathAny) WithType(Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "type", Type)
	return n
}

// EgressAclSet (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
//
//	SetName: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPath {
	ps := &Acl_Interface_EgressAclSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
	return ps
}

// EgressAclSet (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
//
//	SetName: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	ps := &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
	return ps
}

// EgressAclSetMap (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
func (n *Acl_InterfacePath) EgressAclSetMap() *Acl_Interface_EgressAclSetPathMap {
	ps := &Acl_Interface_EgressAclSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EgressAclSetMap (list): List of egress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "egress-acl-sets/egress-acl-set"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
func (n *Acl_InterfacePathAny) EgressAclSetMap() *Acl_Interface_EgressAclSetPathMapAny {
	ps := &Acl_Interface_EgressAclSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress-acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Id (leaf): User-defined identifier for the interface -- a common
// convention could be '<if name>.<subif index>'
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/id"
//	Path from root:       "/acl/interfaces/interface/*/id"
func (n *Acl_InterfacePath) Id() *Acl_Interface_IdPath {
	ps := &Acl_Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): User-defined identifier for the interface -- a common
// convention could be '<if name>.<subif index>'
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/id"
//	Path from root:       "/acl/interfaces/interface/*/id"
func (n *Acl_InterfacePathAny) Id() *Acl_Interface_IdPathAny {
	ps := &Acl_Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressAclSetAny (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
func (n *Acl_InterfacePath) IngressAclSetAny() *Acl_Interface_IngressAclSetPathAny {
	ps := &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// IngressAclSetAny (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
func (n *Acl_InterfacePathAny) IngressAclSetAny() *Acl_Interface_IngressAclSetPathAny {
	ps := &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// WithSetName sets Acl_Interface_IngressAclSetPathAny's key "set-name" to the specified value.
// SetName: string
func (n *Acl_Interface_IngressAclSetPathAny) WithSetName(SetName string) *Acl_Interface_IngressAclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "set-name", SetName)
	return n
}

// WithType sets Acl_Interface_IngressAclSetPathAny's key "type" to the specified value.
// Type: oc.E_Acl_ACL_TYPE
func (n *Acl_Interface_IngressAclSetPathAny) WithType(Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	ygnmi.ModifyKey(n.NodePath, "type", Type)
	return n
}

// IngressAclSet (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
//
//	SetName: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPath {
	ps := &Acl_Interface_IngressAclSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
	return ps
}

// IngressAclSet (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
//
//	SetName: string
//	Type: oc.E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSet(SetName string, Type oc.E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	ps := &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
	return ps
}

// IngressAclSetMap (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
func (n *Acl_InterfacePath) IngressAclSetMap() *Acl_Interface_IngressAclSetPathMap {
	ps := &Acl_Interface_IngressAclSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IngressAclSetMap (list): List of ingress ACLs on the interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "ingress-acl-sets/ingress-acl-set"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
func (n *Acl_InterfacePathAny) IngressAclSetMap() *Acl_Interface_IngressAclSetPathMapAny {
	ps := &Acl_Interface_IngressAclSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress-acl-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interface-ref"
//	Path from root:       "/acl/interfaces/interface/interface-ref"
func (n *Acl_InterfacePath) InterfaceRef() *Acl_Interface_InterfaceRefPath {
	ps := &Acl_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interface-ref"
//	Path from root:       "/acl/interfaces/interface/interface-ref"
func (n *Acl_InterfacePathAny) InterfaceRef() *Acl_Interface_InterfaceRefPathAny {
	ps := &Acl_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePath) State() ygnmi.SingletonQuery[*oc.Acl_Interface] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePath) Config() ygnmi.ConfigQuery[*oc.Acl_Interface] {
	return ygnmi.NewConfigQuery[*oc.Acl_Interface](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Acl_Interface] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.Acl_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Acl_Interface](
		"Acl",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Acl_Interface, bool) {
			ret := gs.(*oc.Acl).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:interfaces"},
			PostRelPath: []string{"openconfig-acl:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Acl_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Acl_Interface](
		"Acl",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Acl_Interface, bool) {
			ret := gs.(*oc.Acl).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:interfaces"},
			PostRelPath: []string{"openconfig-acl:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Acl_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.Acl_Interface](
		"Acl",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Acl_Interface, bool) {
			ret := gs.(*oc.Acl).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:interfaces"},
			PostRelPath: []string{"openconfig-acl:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Acl_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Acl_Interface](
		"Acl",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Acl_Interface, bool) {
			ret := gs.(*oc.Acl).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:interfaces"},
			PostRelPath: []string{"openconfig-acl:interface"},
		},
	)
}

// Acl_Interface_EgressAclSet_SetNamePath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name YANG schema element.
type Acl_Interface_EgressAclSet_SetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_SetNamePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name YANG schema element.
type Acl_Interface_EgressAclSet_SetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name"
func (n *Acl_Interface_EgressAclSet_SetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/set-name"
func (n *Acl_Interface_EgressAclSet_SetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/set-name"
func (n *Acl_Interface_EgressAclSet_SetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/set-name"
func (n *Acl_Interface_EgressAclSet_SetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSet_TypePath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type YANG schema element.
type Acl_Interface_EgressAclSet_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type YANG schema element.
type Acl_Interface_EgressAclSet_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type"
func (n *Acl_Interface_EgressAclSet_TypePath) State() ygnmi.SingletonQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/state/type"
func (n *Acl_Interface_EgressAclSet_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type"
func (n *Acl_Interface_EgressAclSet_TypePath) Config() ygnmi.ConfigQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type"
func (n *Acl_Interface_EgressAclSet_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSetPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSetPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPathAny struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSetPathMap represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPathMap struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSetPathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPathMapAny struct {
	*ygnmi.NodePath
}

// AclEntryAny (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_EgressAclSetPath) AclEntryAny() *Acl_Interface_EgressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntryAny (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_EgressAclSetPathAny) AclEntryAny() *Acl_Interface_EgressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_Interface_EgressAclSetPath) AclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntryPath {
	ps := &Acl_Interface_EgressAclSet_AclEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_Interface_EgressAclSetPathAny) AclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_EgressAclSetPath) AclEntryMap() *Acl_Interface_EgressAclSet_AclEntryPathMap {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_EgressAclSetPathAny) AclEntryMap() *Acl_Interface_EgressAclSet_AclEntryPathMapAny {
	ps := &Acl_Interface_EgressAclSet_AclEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetName (leaf): Reference to the ACL set name applied on egress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/*/set-name"
func (n *Acl_Interface_EgressAclSetPath) SetName() *Acl_Interface_EgressAclSet_SetNamePath {
	ps := &Acl_Interface_EgressAclSet_SetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetName (leaf): Reference to the ACL set name applied on egress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/set-name"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/*/set-name"
func (n *Acl_Interface_EgressAclSetPathAny) SetName() *Acl_Interface_EgressAclSet_SetNamePathAny {
	ps := &Acl_Interface_EgressAclSet_SetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Reference to the ACL set type applied on egress.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/*/type"
func (n *Acl_Interface_EgressAclSetPath) Type() *Acl_Interface_EgressAclSet_TypePath {
	ps := &Acl_Interface_EgressAclSet_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Reference to the ACL set type applied on egress.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/*/type"
func (n *Acl_Interface_EgressAclSetPathAny) Type() *Acl_Interface_EgressAclSet_TypePathAny {
	ps := &Acl_Interface_EgressAclSet_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPath) Config() ygnmi.ConfigQuery[*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewConfigQuery[*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface_EgressAclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathMap) State() ygnmi.SingletonQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewSingletonQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).EgressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:egress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:egress-acl-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathMapAny) State() ygnmi.WildcardQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).EgressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:egress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:egress-acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathMap) Config() ygnmi.ConfigQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewConfigQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).EgressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:egress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:egress-acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSetPathMapAny) Config() ygnmi.WildcardQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_EgressAclSet_Key]*oc.Acl_Interface_EgressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).EgressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:egress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:egress-acl-set"},
		},
	)
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "sequence-id"
//	Path from root:       ""
func (n *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_Interface_EgressAclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "sequence-id"
//	Path from root:       ""
func (n *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_EgressAclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_EgressAclSet_AclEntryPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPathAny struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSet_AclEntryPathMap represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPathMap struct {
	*ygnmi.NodePath
}

// Acl_Interface_EgressAclSet_AclEntryPathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPathMapAny struct {
	*ygnmi.NodePath
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) MatchedOctets() *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath {
	ps := &Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) MatchedOctets() *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) MatchedPackets() *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath {
	ps := &Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) MatchedPackets() *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) SequenceId() *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath {
	ps := &Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) SequenceId() *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny {
	ps := &Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSet_AclEntryPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_EgressAclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_EgressAclSet_AclEntry](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_EgressAclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_EgressAclSet_AclEntry](
		"Acl_Interface_EgressAclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSet_AclEntryPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_EgressAclSet_AclEntryPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry](
		"Acl_Interface_EgressAclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_Interface_EgressAclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_Interface_EgressAclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_EgressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// Acl_Interface_IngressAclSet_SetNamePath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name YANG schema element.
type Acl_Interface_IngressAclSet_SetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_SetNamePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name YANG schema element.
type Acl_Interface_IngressAclSet_SetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name"
func (n *Acl_Interface_IngressAclSet_SetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/set-name"
func (n *Acl_Interface_IngressAclSet_SetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-name"
func (n *Acl_Interface_IngressAclSet_SetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-name"
func (n *Acl_Interface_IngressAclSet_SetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).SetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IngressAclSet_TypePath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type YANG schema element.
type Acl_Interface_IngressAclSet_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type YANG schema element.
type Acl_Interface_IngressAclSet_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type"
func (n *Acl_Interface_IngressAclSet_TypePath) State() ygnmi.SingletonQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/state/type"
func (n *Acl_Interface_IngressAclSet_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type"
func (n *Acl_Interface_IngressAclSet_TypePath) Config() ygnmi.ConfigQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type"
func (n *Acl_Interface_IngressAclSet_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Acl_ACL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_ACL_TYPE](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_ACL_TYPE, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
