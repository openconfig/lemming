/*
Package acl is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package acl

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Acl_AclSet_AclEntry_Ipv4_HopLimitPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_LengthPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/length YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_LengthPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/length YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/length"
func (n *Acl_AclSet_AclEntry_Ipv4_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/length"
func (n *Acl_AclSet_AclEntry_Ipv4_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/length"
func (n *Acl_AclSet_AclEntry_Ipv4_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/length"
func (n *Acl_AclSet_AclEntry_Ipv4_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_ProtocolPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4_ProtocolPath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4_ProtocolPath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4Path struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_Ipv4PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4Path) DestinationAddress() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) DestinationAddress() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4Path) DestinationAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) DestinationAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Dscp() *Acl_AclSet_AclEntry_Ipv4_DscpPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Dscp() *Acl_AclSet_AclEntry_Ipv4_DscpPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4Path) DscpSet() *Acl_AclSet_AclEntry_Ipv4_DscpSetPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) DscpSet() *Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4Path) HopLimit() *Acl_AclSet_AclEntry_Ipv4_HopLimitPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) HopLimit() *Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "icmpv4"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Icmpv4() *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "icmpv4"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Icmpv4() *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/length"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Length() *Acl_AclSet_AclEntry_Ipv4_LengthPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/length"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/length"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Length() *Acl_AclSet_AclEntry_Ipv4_LengthPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Protocol() *Acl_AclSet_AclEntry_Ipv4_ProtocolPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/protocol"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Protocol() *Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4Path) SourceAddress() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) SourceAddress() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4Path) SourceAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath {
	ps := &Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/*/source-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) SourceAddressPrefixSet() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4Path) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv4](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4Path) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv4] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv4](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/code YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/code YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_CODE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/config/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_CODE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/config/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/type YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/type YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/state/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/config/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/config/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4Path struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/*/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path) Code() *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/*/code"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny) Code() *Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/*/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path) Type() *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/icmpv4/*/type"
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny) Type() *Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny {
	ps := &Acl_AclSet_AclEntry_Ipv4_Icmpv4_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4Path) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv4_Icmpv4PathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv4_Icmpv4](
		"Acl_AclSet_AclEntry_Ipv4_Icmpv4",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/state/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv6",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
