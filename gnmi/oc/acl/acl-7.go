/*
Package acl is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package acl

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Acl_Interface_IngressAclSetPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSetPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPathAny struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSetPathMap represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPathMap struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSetPathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPathMapAny struct {
	*ygnmi.NodePath
}

// AclEntryAny (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_IngressAclSetPath) AclEntryAny() *Acl_Interface_IngressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntryAny (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_IngressAclSetPathAny) AclEntryAny() *Acl_Interface_IngressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_Interface_IngressAclSetPath) AclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntryPath {
	ps := &Acl_Interface_IngressAclSet_AclEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntry (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
//
//	SequenceId: uint32
func (n *Acl_Interface_IngressAclSetPathAny) AclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntryPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_IngressAclSetPath) AclEntryMap() *Acl_Interface_IngressAclSet_AclEntryPathMap {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AclEntryMap (list): List of ACL entries assigned to an interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "acl-entries/acl-entry"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
func (n *Acl_Interface_IngressAclSetPathAny) AclEntryMap() *Acl_Interface_IngressAclSet_AclEntryPathMapAny {
	ps := &Acl_Interface_IngressAclSet_AclEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acl-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetName (leaf): Reference to the ACL set name applied on ingress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/*/set-name"
func (n *Acl_Interface_IngressAclSetPath) SetName() *Acl_Interface_IngressAclSet_SetNamePath {
	ps := &Acl_Interface_IngressAclSet_SetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetName (leaf): Reference to the ACL set name applied on ingress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/set-name"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/*/set-name"
func (n *Acl_Interface_IngressAclSetPathAny) SetName() *Acl_Interface_IngressAclSet_SetNamePathAny {
	ps := &Acl_Interface_IngressAclSet_SetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Reference to the ACL set type applied on ingress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/*/type"
func (n *Acl_Interface_IngressAclSetPath) Type() *Acl_Interface_IngressAclSet_TypePath {
	ps := &Acl_Interface_IngressAclSet_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Reference to the ACL set type applied on ingress
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/*/type"
func (n *Acl_Interface_IngressAclSetPathAny) Type() *Acl_Interface_IngressAclSet_TypePathAny {
	ps := &Acl_Interface_IngressAclSet_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPath) Config() ygnmi.ConfigQuery[*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewConfigQuery[*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface_IngressAclSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathMap) State() ygnmi.SingletonQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewSingletonQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).IngressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:ingress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:ingress-acl-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathMapAny) State() ygnmi.WildcardQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).IngressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:ingress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:ingress-acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathMap) Config() ygnmi.ConfigQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewConfigQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).IngressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:ingress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:ingress-acl-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSetPathMapAny) Config() ygnmi.WildcardQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet] {
	return ygnmi.NewWildcardQuery[map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet](
		"Acl_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Acl_Interface_IngressAclSet_Key]*oc.Acl_Interface_IngressAclSet, bool) {
			ret := gs.(*oc.Acl_Interface).IngressAclSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:ingress-acl-sets"},
			PostRelPath: []string{"openconfig-acl:ingress-acl-set"},
		},
	)
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).MatchedPackets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "sequence-id"
//	Path from root:       ""
func (n *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_Interface_IngressAclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "sequence-id"
//	Path from root:       ""
func (n *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_IngressAclSet_AclEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet_AclEntry).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet_AclEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_IngressAclSet_AclEntryPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPathAny struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSet_AclEntryPathMap represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPathMap struct {
	*ygnmi.NodePath
}

// Acl_Interface_IngressAclSet_AclEntryPathMapAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPathMapAny struct {
	*ygnmi.NodePath
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) MatchedOctets() *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath {
	ps := &Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) MatchedOctets() *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) MatchedPackets() *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath {
	ps := &Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/matched-packets"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) MatchedPackets() *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) SequenceId() *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath {
	ps := &Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/*/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) SequenceId() *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny {
	ps := &Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSet_AclEntryPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_IngressAclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_IngressAclSet_AclEntry](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_IngressAclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_IngressAclSet_AclEntry](
		"Acl_Interface_IngressAclSet_AclEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSet_AclEntryPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_IngressAclSet_AclEntryPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry](
		"Acl_Interface_IngressAclSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.Acl_Interface_IngressAclSet_AclEntry, bool) {
			ret := gs.(*oc.Acl_Interface_IngressAclSet).AclEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_IngressAclSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-acl:acl-entries"},
			PostRelPath: []string{"openconfig-acl:acl-entry"},
		},
	)
}

// Acl_Interface_InterfaceRef_InterfacePath represents the /openconfig-acl/acl/interfaces/interface/interface-ref/state/interface YANG schema element.
type Acl_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref/state/interface YANG schema element.
type Acl_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/state/interface"
func (n *Acl_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/state/interface"
func (n *Acl_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/config/interface"
func (n *Acl_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/config/interface"
func (n *Acl_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-acl/acl/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Acl_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type Acl_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/state/subinterface"
func (n *Acl_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/state/subinterface"
func (n *Acl_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/config/subinterface"
func (n *Acl_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/config/subinterface"
func (n *Acl_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_Interface_InterfaceRefPath represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Acl_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/*/interface"
func (n *Acl_Interface_InterfaceRefPath) Interface() *Acl_Interface_InterfaceRef_InterfacePath {
	ps := &Acl_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/interface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/*/interface"
func (n *Acl_Interface_InterfaceRefPathAny) Interface() *Acl_Interface_InterfaceRef_InterfacePathAny {
	ps := &Acl_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/*/subinterface"
func (n *Acl_Interface_InterfaceRefPath) Subinterface() *Acl_Interface_InterfaceRef_SubinterfacePath {
	ps := &Acl_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/acl/interfaces/interface/interface-ref/*/subinterface"
func (n *Acl_Interface_InterfaceRefPathAny) Subinterface() *Acl_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &Acl_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Acl_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Acl_Interface_InterfaceRef](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Acl_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_InterfaceRef](
		"Acl_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Acl_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Acl_Interface_InterfaceRef](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Acl_Interface_InterfaceRef](
		"Acl_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
