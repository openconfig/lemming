/*
Package acl is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package acl

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/type YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/type YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/state/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/config/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/config/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6Path struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/*/code"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6Path) Code() *Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePath {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/code"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/*/code"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny) Code() *Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/*/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6Path) Type() *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/type"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/icmpv6/*/type"
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny) Type() *Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny {
	ps := &Acl_AclSet_AclEntry_Ipv6_Icmpv6_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6Path) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6Path) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_Ipv6_Icmpv6PathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Ipv6_Icmpv6](
		"Acl_AclSet_AclEntry_Ipv6_Icmpv6",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_DestinationMacPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_DestinationMacPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_DestinationMacMaskPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_EthertypePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype YANG schema element.
type Acl_AclSet_AclEntry_L2_EthertypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_EthertypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype YANG schema element.
type Acl_AclSet_AclEntry_L2_EthertypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype"
func (n *Acl_AclSet_AclEntry_L2_EthertypePath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/ethertype"
func (n *Acl_AclSet_AclEntry_L2_EthertypePathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype"
func (n *Acl_AclSet_AclEntry_L2_EthertypePath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype"
func (n *Acl_AclSet_AclEntry_L2_EthertypePathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_L2_Ethertype_Union](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_SourceMacPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_SourceMacPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac"
func (n *Acl_AclSet_AclEntry_L2_SourceMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac"
func (n *Acl_AclSet_AclEntry_L2_SourceMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac"
func (n *Acl_AclSet_AclEntry_L2_SourceMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac"
func (n *Acl_AclSet_AclEntry_L2_SourceMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2_SourceMacMaskPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_SourceMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/state/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_SourceMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_L2Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2Path struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_L2PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2PathAny struct {
	*ygnmi.NodePath
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/destination-mac"
func (n *Acl_AclSet_AclEntry_L2Path) DestinationMac() *Acl_AclSet_AclEntry_L2_DestinationMacPath {
	ps := &Acl_AclSet_AclEntry_L2_DestinationMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/destination-mac"
func (n *Acl_AclSet_AclEntry_L2PathAny) DestinationMac() *Acl_AclSet_AclEntry_L2_DestinationMacPathAny {
	ps := &Acl_AclSet_AclEntry_L2_DestinationMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2Path) DestinationMacMask() *Acl_AclSet_AclEntry_L2_DestinationMacMaskPath {
	ps := &Acl_AclSet_AclEntry_L2_DestinationMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2PathAny) DestinationMacMask() *Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny {
	ps := &Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/ethertype"
func (n *Acl_AclSet_AclEntry_L2Path) Ethertype() *Acl_AclSet_AclEntry_L2_EthertypePath {
	ps := &Acl_AclSet_AclEntry_L2_EthertypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/ethertype"
func (n *Acl_AclSet_AclEntry_L2PathAny) Ethertype() *Acl_AclSet_AclEntry_L2_EthertypePathAny {
	ps := &Acl_AclSet_AclEntry_L2_EthertypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/source-mac"
func (n *Acl_AclSet_AclEntry_L2Path) SourceMac() *Acl_AclSet_AclEntry_L2_SourceMacPath {
	ps := &Acl_AclSet_AclEntry_L2_SourceMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/source-mac"
func (n *Acl_AclSet_AclEntry_L2PathAny) SourceMac() *Acl_AclSet_AclEntry_L2_SourceMacPathAny {
	ps := &Acl_AclSet_AclEntry_L2_SourceMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2Path) SourceMacMask() *Acl_AclSet_AclEntry_L2_SourceMacMaskPath {
	ps := &Acl_AclSet_AclEntry_L2_SourceMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/*/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2PathAny) SourceMacMask() *Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny {
	ps := &Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_L2Path) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_L2] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_L2](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_L2PathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_L2] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_L2](
		"Acl_AclSet_AclEntry_L2",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_L2Path) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_L2] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_L2](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_L2PathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_L2] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_L2](
		"Acl_AclSet_AclEntry_L2",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Mpls_EndLabelValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_EndLabelValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_EndLabelValuePath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/end-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/end-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_EndLabelValuePath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/end-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/end-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "end-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_EndLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).EndLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Mpls_StartLabelValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_StartLabelValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_StartLabelValuePath) State() ygnmi.SingletonQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union] {
	return ygnmi.NewSingletonQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/start-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny) State() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/start-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_StartLabelValuePath) Config() ygnmi.ConfigQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union] {
	return ygnmi.NewConfigQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/start-label-value"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/start-label-value"
func (n *Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny) Config() ygnmi.WildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union] {
	return ygnmi.NewWildcardQuery[oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "start-label-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.Acl_AclSet_AclEntry_Mpls_StartLabelValue_Union, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).StartLabelValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Mpls_TrafficClassPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TrafficClassPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class"
func (n *Acl_AclSet_AclEntry_Mpls_TrafficClassPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/state/traffic-class"
func (n *Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/traffic-class"
func (n *Acl_AclSet_AclEntry_Mpls_TrafficClassPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/traffic-class"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/traffic-class"
func (n *Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Mpls",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "traffic-class"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Mpls).TrafficClass
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
