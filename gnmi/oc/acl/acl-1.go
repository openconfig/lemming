/*
Package acl is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package acl

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Acl_AclSet_AclEntry_Actions_ForwardingActionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_ForwardingActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action"
func (n *Acl_AclSet_AclEntry_Actions_ForwardingActionPath) State() ygnmi.SingletonQuery[oc.E_Acl_FORWARDING_ACTION] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_FORWARDING_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_FORWARDING_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).ForwardingAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/forwarding-action"
func (n *Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny) State() ygnmi.WildcardQuery[oc.E_Acl_FORWARDING_ACTION] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_FORWARDING_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_FORWARDING_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).ForwardingAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action"
func (n *Acl_AclSet_AclEntry_Actions_ForwardingActionPath) Config() ygnmi.ConfigQuery[oc.E_Acl_FORWARDING_ACTION] {
	return ygnmi.NewConfigQuery[oc.E_Acl_FORWARDING_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_FORWARDING_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).ForwardingAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action"
func (n *Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny) Config() ygnmi.WildcardQuery[oc.E_Acl_FORWARDING_ACTION] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_FORWARDING_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_FORWARDING_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).ForwardingAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Actions_LogActionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_LogActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Actions_LogActionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_LogActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action"
func (n *Acl_AclSet_AclEntry_Actions_LogActionPath) State() ygnmi.SingletonQuery[oc.E_Acl_LOG_ACTION] {
	return ygnmi.NewSingletonQuery[oc.E_Acl_LOG_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "log-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_LOG_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).LogAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/state/log-action"
func (n *Acl_AclSet_AclEntry_Actions_LogActionPathAny) State() ygnmi.WildcardQuery[oc.E_Acl_LOG_ACTION] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_LOG_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "log-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_LOG_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).LogAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action"
func (n *Acl_AclSet_AclEntry_Actions_LogActionPath) Config() ygnmi.ConfigQuery[oc.E_Acl_LOG_ACTION] {
	return ygnmi.NewConfigQuery[oc.E_Acl_LOG_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "log-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_LOG_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).LogAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action"
func (n *Acl_AclSet_AclEntry_Actions_LogActionPathAny) Config() ygnmi.WildcardQuery[oc.E_Acl_LOG_ACTION] {
	return ygnmi.NewWildcardQuery[oc.E_Acl_LOG_ACTION](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "log-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Acl_LOG_ACTION, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Actions).LogAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_ActionsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_ActionsPath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_ActionsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_ActionsPathAny struct {
	*ygnmi.NodePath
}

// ForwardingAction (leaf): Specifies the forwarding action.  One forwarding action
// must be specified for each ACL entry
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/*/forwarding-action"
func (n *Acl_AclSet_AclEntry_ActionsPath) ForwardingAction() *Acl_AclSet_AclEntry_Actions_ForwardingActionPath {
	ps := &Acl_AclSet_AclEntry_Actions_ForwardingActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingAction (leaf): Specifies the forwarding action.  One forwarding action
// must be specified for each ACL entry
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/forwarding-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/*/forwarding-action"
func (n *Acl_AclSet_AclEntry_ActionsPathAny) ForwardingAction() *Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny {
	ps := &Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogAction (leaf): Specifies the log action and destination for
// matched packets.  The default is not to log the
// packet.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/*/log-action"
func (n *Acl_AclSet_AclEntry_ActionsPath) LogAction() *Acl_AclSet_AclEntry_Actions_LogActionPath {
	ps := &Acl_AclSet_AclEntry_Actions_LogActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "log-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LogAction (leaf): Specifies the log action and destination for
// matched packets.  The default is not to log the
// packet.
//
//	Defining module:      "openconfig-acl"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/log-action"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/*/log-action"
func (n *Acl_AclSet_AclEntry_ActionsPathAny) LogAction() *Acl_AclSet_AclEntry_Actions_LogActionPathAny {
	ps := &Acl_AclSet_AclEntry_Actions_LogActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "log-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_ActionsPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_Actions] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_Actions](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_ActionsPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Actions] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Actions](
		"Acl_AclSet_AclEntry_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_ActionsPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_Actions] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_Actions](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_ActionsPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_Actions] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_Actions](
		"Acl_AclSet_AclEntry_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_InputInterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterfacePath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_InputInterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterfacePathAny struct {
	*ygnmi.NodePath
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interface-ref"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref"
func (n *Acl_AclSet_AclEntry_InputInterfacePath) InterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "interface-ref"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref"
func (n *Acl_AclSet_AclEntry_InputInterfacePathAny) InterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterfacePath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_InputInterface] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_InputInterface](
		"Acl_AclSet_AclEntry_InputInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterfacePathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface](
		"Acl_AclSet_AclEntry_InputInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterfacePath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_InputInterface] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_InputInterface](
		"Acl_AclSet_AclEntry_InputInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterfacePathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface](
		"Acl_AclSet_AclEntry_InputInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/subinterface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/subinterface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/state/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/*/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) Interface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/interface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/*/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) Interface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/*/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) Subinterface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/*/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) Subinterface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny {
	ps := &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.Acl_AclSet_AclEntry_InputInterface_InterfaceRef](
		"Acl_AclSet_AclEntry_InputInterface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address-prefix-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address-prefix-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_DscpPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_DscpPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Acl_AclSet_AclEntry_Ipv4_DscpSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/state/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-acl"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"Acl_AclSet_AclEntry_Ipv4",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.Acl_AclSet_AclEntry_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.Acl_AclSet_AclEntry_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
