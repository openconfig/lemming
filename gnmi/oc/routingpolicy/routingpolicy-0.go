/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package routingpolicy

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RoutingPolicyPath represents the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPath struct {
	*ygnmi.NodePath
}

// RoutingPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicyPathAny struct {
	*ygnmi.NodePath
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "defined-sets"
//	Path from root:       "/routing-policy/defined-sets"
func (n *RoutingPolicyPath) DefinedSets() *RoutingPolicy_DefinedSetsPath {
	ps := &RoutingPolicy_DefinedSetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DefinedSets (container): Predefined sets of attributes used in policy match
// statements
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "defined-sets"
//	Path from root:       "/routing-policy/defined-sets"
func (n *RoutingPolicyPathAny) DefinedSets() *RoutingPolicy_DefinedSetsPathAny {
	ps := &RoutingPolicy_DefinedSetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
func (n *RoutingPolicyPath) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	ps := &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PolicyDefinitionAny (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
func (n *RoutingPolicyPathAny) PolicyDefinitionAny() *RoutingPolicy_PolicyDefinitionPathAny {
	ps := &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
//
//	Name: string
func (n *RoutingPolicyPath) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPath {
	ps := &RoutingPolicy_PolicyDefinitionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PolicyDefinition (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
//
//	Name: string
func (n *RoutingPolicyPathAny) PolicyDefinition(Name string) *RoutingPolicy_PolicyDefinitionPathAny {
	ps := &RoutingPolicy_PolicyDefinitionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions", "policy-definition"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PolicyDefinitionMap (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
func (n *RoutingPolicyPath) PolicyDefinitionMap() *RoutingPolicy_PolicyDefinitionPathMap {
	ps := &RoutingPolicy_PolicyDefinitionPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyDefinitionMap (list): List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "policy-definitions/policy-definition"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition"
func (n *RoutingPolicyPathAny) PolicyDefinitionMap() *RoutingPolicy_PolicyDefinitionPathMapAny {
	ps := &RoutingPolicy_PolicyDefinitionPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-definitions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicyPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy](
		"RoutingPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicyPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy](
		"RoutingPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicyPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy](
		"RoutingPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy](
		"RoutingPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSetsPathAny struct {
	*ygnmi.NodePath
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-defined-sets"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPath) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BgpDefinedSets (container): BGP-related set definitions for policy match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-defined-sets"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets"
func (n *RoutingPolicy_DefinedSetsPathAny) BgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-defined-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
func (n *RoutingPolicy_DefinedSetsPath) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// NeighborSetAny (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSetAny() *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPath) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPath {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// NeighborSet (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSetPathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets", "neighbor-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// NeighborSetMap (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
func (n *RoutingPolicy_DefinedSetsPath) NeighborSetMap() *RoutingPolicy_DefinedSets_NeighborSetPathMap {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborSetMap (list): List of defined neighbor sets for use in policies.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "neighbor-sets/neighbor-set"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set"
func (n *RoutingPolicy_DefinedSetsPathAny) NeighborSetMap() *RoutingPolicy_DefinedSets_NeighborSetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbor-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSetAny (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
func (n *RoutingPolicy_DefinedSetsPath) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PrefixSetAny (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSetAny() *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PrefixSet (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPath) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPath {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PrefixSet (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSetPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets", "prefix-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PrefixSetMap (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
func (n *RoutingPolicy_DefinedSetsPath) PrefixSetMap() *RoutingPolicy_DefinedSets_PrefixSetPathMap {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixSetMap (list): List of the defined prefix sets
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefix-sets/prefix-set"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set"
func (n *RoutingPolicy_DefinedSetsPathAny) PrefixSetMap() *RoutingPolicy_DefinedSets_PrefixSetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefix-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TagSetAny (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
func (n *RoutingPolicy_DefinedSetsPath) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	ps := &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// TagSetAny (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
func (n *RoutingPolicy_DefinedSetsPathAny) TagSetAny() *RoutingPolicy_DefinedSets_TagSetPathAny {
	ps := &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// TagSet (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPath) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPath {
	ps := &RoutingPolicy_DefinedSets_TagSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// TagSet (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
//
//	Name: string
func (n *RoutingPolicy_DefinedSetsPathAny) TagSet(Name string) *RoutingPolicy_DefinedSets_TagSetPathAny {
	ps := &RoutingPolicy_DefinedSets_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets", "tag-set"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// TagSetMap (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
func (n *RoutingPolicy_DefinedSetsPath) TagSetMap() *RoutingPolicy_DefinedSets_TagSetPathMap {
	ps := &RoutingPolicy_DefinedSets_TagSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TagSetMap (list): List of tag set definitions.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "tag-sets/tag-set"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set"
func (n *RoutingPolicy_DefinedSetsPathAny) TagSetMap() *RoutingPolicy_DefinedSets_TagSetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_TagSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tag-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSetsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSetsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSetsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSetsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny struct {
	*ygnmi.NodePath
}

// AsPathSetAny (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
	return ps
}

// AsPathSetAny (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": "*"},
			n,
		),
	}
	return ps
}

// AsPathSet (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
//
//	AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
	return ps
}

// AsPathSet (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
//
//	AsPathSetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets", "as-path-set"},
			map[string]interface{}{"as-path-set-name": AsPathSetName},
			n,
		),
	}
	return ps
}

// AsPathSetMap (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) AsPathSetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AsPathSetMap (list): List of defined AS path sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-sets/as-path-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) AsPathSetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunitySetAny (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
	return ps
}

// CommunitySetAny (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": "*"},
			n,
		),
	}
	return ps
}

// CommunitySet (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
//
//	CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
	return ps
}

// CommunitySet (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
//
//	CommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets", "community-set"},
			map[string]interface{}{"community-set-name": CommunitySetName},
			n,
		),
	}
	return ps
}

// CommunitySetMap (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) CommunitySetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunitySetMap (list): List of defined BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-sets/community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) CommunitySetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
	return ps
}

// ExtCommunitySetAny (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySetAny() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": "*"},
			n,
		),
	}
	return ps
}

// ExtCommunitySet (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
//
//	ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
	return ps
}

// ExtCommunitySet (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
//
//	ExtCommunitySetName: string
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets", "ext-community-set"},
			map[string]interface{}{"ext-community-set-name": ExtCommunitySetName},
			n,
		),
	}
	return ps
}

// ExtCommunitySetMap (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) ExtCommunitySetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExtCommunitySetMap (list): List of defined extended BGP community sets
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ext-community-sets/ext-community-set"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) ExtCommunitySetMap() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ext-community-sets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSetsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/state/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/config/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet).AsPathSetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny struct {
	*ygnmi.NodePath
}

// AsPathSetMember (leaf-list): AS path expression -- list of ASes in the set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/*/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathSetMember (leaf-list): AS path expression -- list of ASes in the set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/*/as-path-set-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetMemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/*/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathSetName (leaf): name of the AS path set -- this is used to reference
// the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set/*/as-path-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) AsPathSetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet_AsPathSetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).AsPathSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:as-path-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:as-path-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).AsPathSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:as-path-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:as-path-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).AsPathSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:as-path-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:as-path-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).AsPathSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:as-path-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:as-path-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath) State() ygnmi.SingletonQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union] {
	return ygnmi.NewSingletonQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny) State() ygnmi.WildcardQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath) Config() ygnmi.ConfigQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union] {
	return ygnmi.NewConfigQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny) Config() ygnmi.WildcardQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).CommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny struct {
	*ygnmi.NodePath
}

// CommunityMember (leaf-list): Members of the community set.
// For an ADD operation these are the communities that will be
// added.  The regexp type is not valid in this operation.
//
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
//
// For MATCH operations the posix-eregexp type should be evaluated
// against each community associated with a prefix one community
// at a time.  Communities must be represented as strings in formats
// conforming to oc-bgp-types:bgp-std-community-type.  For example:
// `1000:1000` for a standard community
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunityMember (leaf-list): Members of the community set.
// For an ADD operation these are the communities that will be
// added.  The regexp type is not valid in this operation.
//
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
//
// For MATCH operations the posix-eregexp type should be evaluated
// against each community associated with a prefix one community
// at a time.  Communities must be represented as strings in formats
// conforming to oc-bgp-types:bgp-std-community-type.  For example:
// `1000:1000` for a standard community
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySetName (leaf): name / label of the community set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) CommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunitySetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set/*/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).CommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:community-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).CommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:community-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).CommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:community-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).CommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:community-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-member"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunityMember
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ext-community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ext-community-set-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).ExtCommunitySetName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/state/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/config/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny struct {
	*ygnmi.NodePath
}

// ExtCommunityMember (leaf-list): Members of the extended community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
//
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
//
// For MATCH operations the posix-eregexp type should be evaluated
// against each community associated with a prefix one community
// at a time.  Communities must be represented as strings in formats
// conforming to oc-bgp-types:bgp-ext-community-type.  For example:
// `route-origin:1000:1000` for the origin type extended community,
// and so on.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunityMember (leaf-list): Members of the extended community set.
// For an ADD operation these are the communities that will be added;
// the regexp type is not valid in this operation.
//
// For REMOVE or REPLACE operations then matching communities will
// be removed unless match-set-options is INVERT which will
// reverse this to mean that anything that does not match will be
// removed.
//
// For MATCH operations the posix-eregexp type should be evaluated
// against each community associated with a prefix one community
// at a time.  Communities must be represented as strings in formats
// conforming to oc-bgp-types:bgp-ext-community-type.  For example:
// `route-origin:1000:1000` for the origin type extended community,
// and so on.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-member"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/ext-community-member"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunityMember() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunityMemberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-member"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySetName (leaf): name / label of the extended community set -- this is
// used to reference the set in match conditions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set-name"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/ext-community-set-name"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) ExtCommunitySetName() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_ExtCommunitySetNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set/*/match-set-options"
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) MatchSetOptions() *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).ExtCommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:ext-community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:ext-community-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).ExtCommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:ext-community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:ext-community-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).ExtCommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:ext-community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:ext-community-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet](
		"RoutingPolicy_DefinedSets_BgpDefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_BgpDefinedSets).ExtCommunitySet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_BgpDefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-policy:ext-community-sets"},
			PostRelPath: []string{"openconfig-bgp-policy:ext-community-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address"
func (n *RoutingPolicy_DefinedSets_NeighborSet_AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/address"
func (n *RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/address"
func (n *RoutingPolicy_DefinedSets_NeighborSet_AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/address"
func (n *RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
