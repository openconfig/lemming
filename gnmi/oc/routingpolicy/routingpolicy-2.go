/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package routingpolicy

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RoutingPolicy_PolicyDefinition_Statement_ActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny struct {
	*ygnmi.NodePath
}

// BgpActions (container): Top-level container for BGP-specific actions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BgpActions (container): Top-level container for BGP-specific actions
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) BgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsisActions (container): Actions that can be performed by IS-IS within a policy
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "isis-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) IsisActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsisActions (container): Actions that can be performed by IS-IS within a policy
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "isis-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) IsisActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OspfActions (container): Actions specific to OSPF
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ospf-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) OspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospf-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OspfActions (container): Actions specific to OSPF
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ospf-actions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) OspfActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospf-actions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/*/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "policy-result"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PolicyResult (leaf): Select the final disposition for the route, either
// accept or reject.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/*/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) PolicyResult() *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "policy-result"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetTag (container): Policy actions associated with setting tags for a particular
// route. A tag is an abstract entity which can be mapped to underlying
// protocol attributes where applicable.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) SetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-tag"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ActionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-local-pref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetLocalPref
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-local-pref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetLocalPref
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-local-pref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetLocalPref
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-local-pref"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetLocalPref
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath) State() ygnmi.SingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union] {
	return ygnmi.NewSingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-med"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny) State() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-med"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath) Config() ygnmi.ConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union] {
	return ygnmi.NewConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-med"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny) Config() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-med"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMed
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med-action YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med-action YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath) State() ygnmi.SingletonQuery[oc.E_BgpPolicy_BgpSetMedAction] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPolicy_BgpSetMedAction](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-med-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetMedAction, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMedAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny) State() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetMedAction] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetMedAction](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-med-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetMedAction, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMedAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath) Config() ygnmi.ConfigQuery[oc.E_BgpPolicy_BgpSetMedAction] {
	return ygnmi.NewConfigQuery[oc.E_BgpPolicy_BgpSetMedAction](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-med-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetMedAction, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMedAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetMedAction] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetMedAction](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-med-action"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetMedAction, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetMedAction
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath) State() ygnmi.SingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union] {
	return ygnmi.NewSingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetNextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny) State() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetNextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath) Config() ygnmi.ConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union] {
	return ygnmi.NewConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetNextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny) Config() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetNextHop
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath) State() ygnmi.SingletonQuery[oc.E_BgpTypes_BgpOriginAttrType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpTypes_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-route-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetRouteOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/state/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny) State() ygnmi.WildcardQuery[oc.E_BgpTypes_BgpOriginAttrType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-route-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetRouteOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath) Config() ygnmi.ConfigQuery[oc.E_BgpTypes_BgpOriginAttrType] {
	return ygnmi.NewConfigQuery[oc.E_BgpTypes_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-route-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetRouteOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/config/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpTypes_BgpOriginAttrType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpTypes_BgpOriginAttrType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-route-origin"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpTypes_BgpOriginAttrType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions).SetRouteOrigin
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny struct {
	*ygnmi.NodePath
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-as-path-prepend"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetAsPathPrepend (container): Action to prepend the specified AS number to the AS-path a
// specified number of times
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-as-path-prepend"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-as-path-prepend"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-community"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetCommunity (container): Action to set the community attributes of the route, along
// with options to modify how the community is modified.
// Communities may be set using an inline list OR
// reference to an existing defined set (not both).
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-community"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-ext-community"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetExtCommunity (container): Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified. Extended communities may be set using an inline
// list OR a reference to an existing defined set (but not
// both).
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-ext-community"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-ext-community"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetLocalPref (leaf): set the local pref attribute on the route
// update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-local-pref"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-local-pref"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetLocalPref() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetLocalPrefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-local-pref"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMed (leaf): Set the MED metric attribute in the route update.  When set, a
// valid `set-med-action` must be specified.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-med"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMed (leaf): Set the MED metric attribute in the route update.  When set, a
// valid `set-med-action` must be specified.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-med"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-med"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetMed() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-med"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMedAction (leaf): When set-med is specified, this leaf is mandatory to set the
// appropriate action on the MED metric value.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetMedAction() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-med-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMedAction (leaf): When set-med is specified, this leaf is mandatory to set the
// appropriate action on the MED metric value.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-med-action"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-med-action"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetMedAction() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMedActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-med-action"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetNextHop (leaf): set the next-hop attribute in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetNextHop (leaf): set the next-hop attribute in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-next-hop"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-next-hop"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetNextHop() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetRouteOrigin (leaf): set the origin attribute to the specified
// value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-route-origin"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/*/set-route-origin"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) SetRouteOrigin() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetRouteOriginPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-route-origin"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "repeat-n"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).RepeatN
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/state/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "repeat-n"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).RepeatN
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "repeat-n"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).RepeatN
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/config/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "repeat-n"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend).RepeatN
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny struct {
	*ygnmi.NodePath
}

// Asn (leaf): The AS number to prepend to the AS path. If this leaf is
// not specified and repeat-n is set, then the local AS
// number will be used for prepending.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Asn (leaf): The AS number to prepend to the AS path. If this leaf is
// not specified and repeat-n is set, then the local AS
// number will be used for prepending.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/asn"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/asn"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) Asn() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_AsnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "repeat-n"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RepeatN (leaf): Number of times to prepend the value specified in the asn
// leaf to the AS path. If no value is specified by the asn
// leaf, the local AS number of the system is used. The value
// should be between 1 and the maximum supported by the
// implementation.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/repeat-n"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend/*/repeat-n"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) RepeatN() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend_RepeatNPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "repeat-n"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrependPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath) State() ygnmi.SingletonQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewSingletonQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny) State() ygnmi.WildcardQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewWildcardQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath) Config() ygnmi.ConfigQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewConfigQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny) Config() ygnmi.WildcardQuery[oc.E_SetCommunity_Method] {
	return ygnmi.NewWildcardQuery[oc.E_SetCommunity_Method](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetCommunity_Method, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Method
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath) State() ygnmi.SingletonQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewSingletonQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/state/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny) State() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath) Config() ygnmi.ConfigQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewConfigQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/config/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType] {
	return ygnmi.NewWildcardQuery[oc.E_BgpPolicy_BgpSetCommunityOptionType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_BgpPolicy_BgpSetCommunityOptionType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity).Options
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny struct {
	*ygnmi.NodePath
}

// Inline (container): Set the community values for the action inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Inline (container): Set the community values for the action inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/*/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Method (leaf): Indicates the method used to specify the extended
// communities for the set-ext-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/method"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/*/method"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Method() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_MethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/*/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Options (leaf): Options for modifying the community attribute with
// the specified values.  These options apply to both
// methods of setting the community attribute.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/*/options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Options() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_OptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Reference (container): Provide a reference to a defined community set for the
// set-community action
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_ReferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunityPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath) State() ygnmi.SingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union] {
	return ygnmi.NewSingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/state/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny) State() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath) Config() ygnmi.ConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union] {
	return ygnmi.NewConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/config/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny) Config() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "communities"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline).Communities
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny struct {
	*ygnmi.NodePath
}

// Communities (leaf-list): Set the community values for the update inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/*/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "communities"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Communities (leaf-list): Set the community values for the update inline with
// a list.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/communities"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline/*/communities"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny) Communities() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_CommunitiesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "communities"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_InlinePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
