/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package routingpolicy

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny struct {
	*ygnmi.NodePath
}

// SetLevel (leaf): Set the level that a prefix is to be imported into.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-level"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-level"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) SetLevel() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetLevel (leaf): Set the level that a prefix is to be imported into.
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-level"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-level"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) SetLevel() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetLevelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-level"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetric (leaf): Set the metric of the IS-IS prefix
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetric (leaf): Set the metric of the IS-IS prefix
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetricStyleType (leaf): Set the style of the metric
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric-style-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric-style-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) SetMetricStyleType() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric-style-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetricStyleType (leaf): Set the style of the metric
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric-style-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric-style-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) SetMetricStyleType() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricStyleTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric-style-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetricType (leaf): This leaf sets the type of metric that is to be specified
// when the set-metric leaf is specified
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) SetMetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetricType (leaf): This leaf sets the type of metric that is to be specified
// when the set-metric leaf is specified
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/isis-actions/*/set-metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) SetMetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions_SetMetricTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_IsisActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/state/set-area YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/state/set-area YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/state/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath) State() ygnmi.SingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union] {
	return ygnmi.NewSingletonQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-area"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions).SetArea
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/state/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny) State() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-area"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions).SetArea
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/config/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath) Config() ygnmi.ConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union] {
	return ygnmi.NewConfigQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-area"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions).SetArea
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/config/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny) Config() ygnmi.WildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union] {
	return ygnmi.NewWildcardQuery[oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-area"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetArea_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions).SetArea
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny struct {
	*ygnmi.NodePath
}

// SetArea (leaf): Set the area for the matched route. This action is typically
// used when importing prefixes into OSPF, such that a route can
// be imported into a specific area within the instance.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/*/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) SetArea() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-area"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetArea (leaf): Set the area for the matched route. This action is typically
// used when importing prefixes into OSPF, such that a route can
// be imported into a specific area within the instance.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/set-area"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/*/set-area"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) SetArea() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetAreaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-area"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetMetric (container): Configuration and state parameters relating to manipulating
// the OSPF metric
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetMetric (container): Configuration and state parameters relating to manipulating
// the OSPF metric
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "set-metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) SetMetric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"set-metric"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).Metric
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric-type YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath) State() ygnmi.SingletonQuery[oc.E_SetMetric_MetricType] {
	return ygnmi.NewSingletonQuery[oc.E_SetMetric_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetMetric_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/state/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny) State() ygnmi.WildcardQuery[oc.E_SetMetric_MetricType] {
	return ygnmi.NewWildcardQuery[oc.E_SetMetric_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetMetric_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath) Config() ygnmi.ConfigQuery[oc.E_SetMetric_MetricType] {
	return ygnmi.NewConfigQuery[oc.E_SetMetric_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetMetric_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-ospf-policy"
//	Path from parent:     "config/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/config/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny) Config() ygnmi.WildcardQuery[oc.E_SetMetric_MetricType] {
	return ygnmi.NewWildcardQuery[oc.E_SetMetric_MetricType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetMetric_MetricType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny struct {
	*ygnmi.NodePath
}

// Metric (leaf): Set the metric of the routes matching the policy to the value
// specified by this leaf.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/*/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) Metric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): Set the metric of the routes matching the policy to the value
// specified by this leaf.
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/metric"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/*/metric"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) Metric() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): Specify the type of metric which is to be set by the policy
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/*/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) MetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): Specify the type of metric which is to be set by the policy
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/metric-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/ospf-actions/set-metric/*/metric-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) MetricType() *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric_MetricTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetricPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_OspfActions_SetMetric",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath) State() ygnmi.SingletonQuery[oc.E_SetTag_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_SetTag_Mode](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetTag_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/state/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny) State() ygnmi.WildcardQuery[oc.E_SetTag_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_SetTag_Mode](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetTag_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath) Config() ygnmi.ConfigQuery[oc.E_SetTag_Mode] {
	return ygnmi.NewConfigQuery[oc.E_SetTag_Mode](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetTag_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/config/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_SetTag_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_SetTag_Mode](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SetTag_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny struct {
	*ygnmi.NodePath
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Inline (container): The tags specified in this container are set on a route using
// the values directly. It is applicable when the mode of application
// is explicitly specified as INLINE.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "inline"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Inline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inline"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/*/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): This leaf controls the source of the tags that are set as a result
// of the action. In the case that the INLINE value is specified, the
// list of tags specified within the action is applied to matching prefixes.
// In the case that the REFERENCE value is specified, a pre-defined set of
// tags is utilised.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/mode"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/*/mode"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Mode() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Reference (container): This container is applicable when the mode of application is explicitly
// specified to as REFERENCE. The tags set on a route are those that are
// specified within the tag-set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "reference"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Reference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reference"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTagPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath) State() ygnmi.SingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union] {
	return ygnmi.NewSingletonQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline).Tag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/state/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny) State() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline).Tag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath) Config() ygnmi.ConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union] {
	return ygnmi.NewConfigQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline).Tag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/config/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny) Config() ygnmi.WildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline).Tag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny struct {
	*ygnmi.NodePath
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/*/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Tag (leaf-list): Set one or more tags for prefixes that match the specified condition(s)
// using the specified tag values. When a tag is set it MUST be possible to
// match the value set in subsequent policies on the local device. Where the
// protocol that is carrying the prefix has a tag field (OSPF, and IS-IS in
// particular) the tag MUST be set in the corresponding protocol advertisements
// of the prefix.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline/*/tag"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) Tag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_TagPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_InlinePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny struct {
	*ygnmi.NodePath
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/*/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagSet (leaf): Use the referenced tag-set to set tags on the prefixes that match the
// specified conditions. When a tag is set it MUST be possible to match the
// value set in subsequent policies on the local device. where the protocol that
// is carrying the prefix has a tag field (OSPF, and IS-IS for in particular)
// the tag MUST be set in the corresponding protocol advertisements of the
// prefix.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference/*/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_ReferencePathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference](
		"RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "call-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).CallPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "call-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).CallPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "call-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).CallPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "call-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).CallPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-protocol-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).InstallProtocolEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/state/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-protocol-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).InstallProtocolEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "install-protocol-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).InstallProtocolEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/config/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "install-protocol-eq"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions).InstallProtocolEq
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny struct {
	*ygnmi.NodePath
}

// BgpConditions (container): Top-level container
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BgpConditions (container): Top-level container
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "bgp-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) BgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/*/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "call-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CallPolicy (leaf): Applies the statements from the specified policy
// definition and then returns control the current
// policy statement. Note that the called policy may
// itself call other policies (subject to
// implementation limitations). This is intended to
// provide a policy 'subroutine' capability.  The
// called policy should contain an explicit or a
// default route disposition that returns an
// effective true (accept-route) or false
// (reject-route), otherwise the behavior may be
// ambiguous and implementation dependent
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/call-policy"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/*/call-policy"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) CallPolicy() *RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_CallPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "call-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/*/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallProtocolEq (leaf): Condition to check the protocol / method used to install
// the route into the local routing table
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/install-protocol-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/*/install-protocol-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) InstallProtocolEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_InstallProtocolEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "install-protocol-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IsisConditions (container): Match conditions relating to the IS-IS protocol
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "isis-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) IsisConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IsisConditions (container): Match conditions relating to the IS-IS protocol
//
//	Defining module:      "openconfig-isis-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "isis-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/isis-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) IsisConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_IsisConditionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchInterface (container): Top-level container for interface match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchInterface (container): Top-level container for interface match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchNeighborSet (container): Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-neighbor-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchPrefixSet (container): Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-prefix-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchTagSet (container): Match a referenced tag set according to the logic defined
// in the match-options-set leaf
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) MatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-tag-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OspfConditions (container): Match conditions specific to OSPF
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ospf-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) OspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospf-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OspfConditions (container): Match conditions specific to OSPF
//
//	Defining module:      "openconfig-ospf-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "ospf-conditions"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/ospf-conditions"
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) OspfConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_OspfConditionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospf-conditions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_ConditionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
