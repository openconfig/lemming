/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package routingpolicy

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RoutingPolicy_DefinedSets_NeighborSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_NeighborSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name"
func (n *RoutingPolicy_DefinedSets_NeighborSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/state/name"
func (n *RoutingPolicy_DefinedSets_NeighborSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/name"
func (n *RoutingPolicy_DefinedSets_NeighborSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/config/name"
func (n *RoutingPolicy_DefinedSets_NeighborSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_NeighborSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_NeighborSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_NeighborSetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSetPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf-list): List of IP addresses in the neighbor set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/*/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPath {
	ps := &RoutingPolicy_DefinedSets_NeighborSet_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf-list): List of IP addresses in the neighbor set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/address"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/*/address"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Address() *RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSet_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/*/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePath {
	ps := &RoutingPolicy_DefinedSets_NeighborSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the neighbor set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/neighbor-sets/neighbor-set/*/name"
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Name() *RoutingPolicy_DefinedSets_NeighborSet_NamePathAny {
	ps := &RoutingPolicy_DefinedSets_NeighborSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets_NeighborSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets_NeighborSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).NeighborSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:neighbor-sets"},
			PostRelPath: []string{"openconfig-routing-policy:neighbor-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).NeighborSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:neighbor-sets"},
			PostRelPath: []string{"openconfig-routing-policy:neighbor-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).NeighborSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:neighbor-sets"},
			PostRelPath: []string{"openconfig-routing-policy:neighbor-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_NeighborSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_NeighborSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).NeighborSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:neighbor-sets"},
			PostRelPath: []string{"openconfig-routing-policy:neighbor-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_PrefixSet_ModePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_ModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSet_ModePath) State() ygnmi.SingletonQuery[oc.E_PrefixSet_Mode] {
	return ygnmi.NewSingletonQuery[oc.E_PrefixSet_Mode](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSet_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/state/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSet_ModePathAny) State() ygnmi.WildcardQuery[oc.E_PrefixSet_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_PrefixSet_Mode](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSet_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/config/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSet_ModePath) Config() ygnmi.ConfigQuery[oc.E_PrefixSet_Mode] {
	return ygnmi.NewConfigQuery[oc.E_PrefixSet_Mode](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSet_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/config/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSet_ModePathAny) Config() ygnmi.WildcardQuery[oc.E_PrefixSet_Mode] {
	return ygnmi.NewWildcardQuery[oc.E_PrefixSet_Mode](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PrefixSet_Mode, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Mode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_PrefixSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/state/name"
func (n *RoutingPolicy_DefinedSets_PrefixSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/state/name"
func (n *RoutingPolicy_DefinedSets_PrefixSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/config/name"
func (n *RoutingPolicy_DefinedSets_PrefixSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/config/name"
func (n *RoutingPolicy_DefinedSets_PrefixSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSetPathMapAny struct {
	*ygnmi.NodePath
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/*/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_ModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Mode (leaf): Indicates the mode of the prefix set, in terms of which
// address families (IPv4, IPv6, or both) are present.  The
// mode provides a hint, but the device must validate that all
// prefixes are of the indicated type, and is expected to
// reject the configuration if there is a discrepancy.  The
// MIXED mode may not be supported on devices that require
// prefix sets to be of only one address family.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/mode"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/*/mode"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Mode() *RoutingPolicy_DefinedSets_PrefixSet_ModePathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_ModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/*/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the prefix set -- this is used to
// reference the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/*/name"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Name() *RoutingPolicy_DefinedSets_PrefixSet_NamePathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixAny (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
	return ps
}

// PrefixAny (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixAny() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": "*", "masklength-range": "*"},
			n,
		),
	}
	return ps
}

// WithIpPrefix sets RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny's key "ip-prefix" to the specified value.
// IpPrefix: string
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) WithIpPrefix(IpPrefix string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "ip-prefix", IpPrefix)
	return n
}

// WithMasklengthRange sets RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny's key "masklength-range" to the specified value.
// MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) WithMasklengthRange(MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ygnmi.ModifyKey(n.NodePath, "masklength-range", MasklengthRange)
	return n
}

// Prefix (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
//
//	IpPrefix: string
//	MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
	return ps
}

// Prefix (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
//
//	IpPrefix: string
//	MasklengthRange: string
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Prefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes", "prefix"},
			map[string]interface{}{"ip-prefix": IpPrefix, "masklength-range": MasklengthRange},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) PrefixMap() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PrefixMap (list): List of prefixes in the prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "prefixes/prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) PrefixMap() *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"prefixes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefix-sets"},
			PostRelPath: []string{"openconfig-routing-policy:prefix-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefix-sets"},
			PostRelPath: []string{"openconfig-routing-policy:prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefix-sets"},
			PostRelPath: []string{"openconfig-routing-policy:prefix-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_PrefixSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).PrefixSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefix-sets"},
			PostRelPath: []string{"openconfig-routing-policy:prefix-set"},
		},
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "masklength-range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).MasklengthRange
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/state/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "masklength-range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).MasklengthRange
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "masklength-range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).MasklengthRange
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/config/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "masklength-range"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix).MasklengthRange
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPath represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny struct {
	*ygnmi.NodePath
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/*/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpPrefix (leaf): The prefix member in CIDR notation -- while the
// prefix may be either IPv4 or IPv6, most
// implementations require all members of the prefix set
// to be the same address family.  Mixing address types in
// the same prefix set is likely to cause an error.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ip-prefix"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/*/ip-prefix"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) IpPrefix() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_Prefix_IpPrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/*/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "masklength-range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MasklengthRange (leaf): Defines a range for the masklength, or 'exact' if
// the prefix has an exact length.
//
// Example: 10.3.192.0/21 through 10.3.192.0/24 would be
// expressed as prefix: 10.3.192.0/21,
// masklength-range: 21..24.
//
// Example: 10.3.192.0/21 would be expressed as
// prefix: 10.3.192.0/21,
// masklength-range: exact
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/masklength-range"
//	Path from root:       "/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix/*/masklength-range"
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) MasklengthRange() *RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny {
	ps := &RoutingPolicy_DefinedSets_PrefixSet_Prefix_MasklengthRangePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "masklength-range"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet_Prefix",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap) State() ygnmi.SingletonQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewSingletonQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefixes"},
			PostRelPath: []string{"openconfig-routing-policy:prefix"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny) State() ygnmi.WildcardQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewWildcardQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefixes"},
			PostRelPath: []string{"openconfig-routing-policy:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMap) Config() ygnmi.ConfigQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewConfigQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefixes"},
			PostRelPath: []string{"openconfig-routing-policy:prefix"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_PrefixSet_PrefixPathMapAny) Config() ygnmi.WildcardQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix] {
	return ygnmi.NewWildcardQuery[map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix](
		"RoutingPolicy_DefinedSets_PrefixSet",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*oc.RoutingPolicy_DefinedSets_PrefixSet_Prefix, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_PrefixSet).Prefix
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_PrefixSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:prefixes"},
			PostRelPath: []string{"openconfig-routing-policy:prefix"},
		},
	)
}

// RoutingPolicy_DefinedSets_TagSet_NamePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_TagSet_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/name YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/state/name"
func (n *RoutingPolicy_DefinedSets_TagSet_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/state/name"
func (n *RoutingPolicy_DefinedSets_TagSet_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/config/name"
func (n *RoutingPolicy_DefinedSets_TagSet_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/config/name"
func (n *RoutingPolicy_DefinedSets_TagSet_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_DefinedSets_TagSet_TagValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value YANG schema element.
type RoutingPolicy_DefinedSets_TagSet_TagValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSet_TagValuePath) State() ygnmi.SingletonQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union] {
	return ygnmi.NewSingletonQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).TagValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/state/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSet_TagValuePathAny) State() ygnmi.WildcardQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).TagValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSet_TagValuePath) Config() ygnmi.ConfigQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union] {
	return ygnmi.NewConfigQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).TagValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSet_TagValuePathAny) Config() ygnmi.WildcardQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union] {
	return ygnmi.NewWildcardQuery[[]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.RoutingPolicy_DefinedSets_TagSet_TagValue_Union, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets_TagSet).TagValue
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets_TagSet) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_DefinedSets_TagSetPath represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_TagSetPathMap represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_DefinedSets_TagSetPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSetPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/*/name"
func (n *RoutingPolicy_DefinedSets_TagSetPath) Name() *RoutingPolicy_DefinedSets_TagSet_NamePath {
	ps := &RoutingPolicy_DefinedSets_TagSet_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name / label of the tag set -- this is used to reference
// the set in match conditions
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/*/name"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) Name() *RoutingPolicy_DefinedSets_TagSet_NamePathAny {
	ps := &RoutingPolicy_DefinedSets_TagSet_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagValue (leaf-list): Value of the tag set member
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/*/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPath) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePath {
	ps := &RoutingPolicy_DefinedSets_TagSet_TagValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagValue (leaf-list): Value of the tag set member
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-value"
//	Path from root:       "/routing-policy/defined-sets/tag-sets/tag-set/*/tag-value"
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) TagValue() *RoutingPolicy_DefinedSets_TagSet_TagValuePathAny {
	ps := &RoutingPolicy_DefinedSets_TagSet_TagValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets_TagSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets_TagSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_TagSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).TagSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:tag-sets"},
			PostRelPath: []string{"openconfig-routing-policy:tag-set"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_TagSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).TagSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:tag-sets"},
			PostRelPath: []string{"openconfig-routing-policy:tag-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_TagSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).TagSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:tag-sets"},
			PostRelPath: []string{"openconfig-routing-policy:tag-set"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_DefinedSets_TagSetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_DefinedSets_TagSet](
		"RoutingPolicy_DefinedSets",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_DefinedSets_TagSet, bool) {
			ret := gs.(*oc.RoutingPolicy_DefinedSets).TagSet
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_DefinedSets) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:tag-sets"},
			PostRelPath: []string{"openconfig-routing-policy:tag-set"},
		},
	)
}

// RoutingPolicy_PolicyDefinition_NamePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/state/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_NamePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/state/name YANG schema element.
type RoutingPolicy_PolicyDefinition_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/state/name"
func (n *RoutingPolicy_PolicyDefinition_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/state/name"
func (n *RoutingPolicy_PolicyDefinition_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/config/name"
func (n *RoutingPolicy_PolicyDefinition_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/config/name"
func (n *RoutingPolicy_PolicyDefinition_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinitionPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinitionPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinitionPathMap represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinitionPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinitionPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/*/name"
func (n *RoutingPolicy_PolicyDefinitionPath) Name() *RoutingPolicy_PolicyDefinition_NamePath {
	ps := &RoutingPolicy_PolicyDefinition_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Name of the top-level policy definition -- this name
// is used in references to the current policy
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/name"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/*/name"
func (n *RoutingPolicy_PolicyDefinitionPathAny) Name() *RoutingPolicy_PolicyDefinition_NamePathAny {
	ps := &RoutingPolicy_PolicyDefinition_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StatementMap (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "statements/statement"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement"
func (n *RoutingPolicy_PolicyDefinitionPath) StatementMap() *RoutingPolicy_PolicyDefinition_StatementPathMap {
	ps := &RoutingPolicy_PolicyDefinition_StatementPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"statements"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StatementMap (list): Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "statements/statement"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement"
func (n *RoutingPolicy_PolicyDefinitionPathAny) StatementMap() *RoutingPolicy_PolicyDefinition_StatementPathMapAny {
	ps := &RoutingPolicy_PolicyDefinition_StatementPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"statements"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathMap) State() ygnmi.SingletonQuery[map[string]*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewSingletonQuery[map[string]*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_PolicyDefinition, bool) {
			ret := gs.(*oc.RoutingPolicy).PolicyDefinition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:policy-definitions"},
			PostRelPath: []string{"openconfig-routing-policy:policy-definition"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_PolicyDefinition, bool) {
			ret := gs.(*oc.RoutingPolicy).PolicyDefinition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:policy-definitions"},
			PostRelPath: []string{"openconfig-routing-policy:policy-definition"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewConfigQuery[map[string]*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_PolicyDefinition, bool) {
			ret := gs.(*oc.RoutingPolicy).PolicyDefinition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:policy-definitions"},
			PostRelPath: []string{"openconfig-routing-policy:policy-definition"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinitionPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.RoutingPolicy_PolicyDefinition] {
	return ygnmi.NewWildcardQuery[map[string]*oc.RoutingPolicy_PolicyDefinition](
		"RoutingPolicy",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.RoutingPolicy_PolicyDefinition, bool) {
			ret := gs.(*oc.RoutingPolicy).PolicyDefinition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:policy-definitions"},
			PostRelPath: []string{"openconfig-routing-policy:policy-definition"},
		},
	)
}

// RoutingPolicy_PolicyDefinition_StatementPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_StatementPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPathAny struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_StatementPathMap represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPathMap struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_StatementPathMapAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_StatementPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_StatementPathMap) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Statement
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:statements"},
			PostRelPath: []string{"openconfig-routing-policy:statement"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_StatementPathMapAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap](
		"RoutingPolicy_PolicyDefinition",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Statement
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:statements"},
			PostRelPath: []string{"openconfig-routing-policy:statement"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_StatementPathMap) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Statement
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:statements"},
			PostRelPath: []string{"openconfig-routing-policy:statement"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_StatementPathMapAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap](
		"RoutingPolicy_PolicyDefinition",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.RoutingPolicy_PolicyDefinition_Statement_OrderedMap, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition).Statement
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-routing-policy:statements"},
			PostRelPath: []string{"openconfig-routing-policy:statement"},
		},
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_PolicyResultType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_PolicyResultType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "policy-result"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_PolicyResultType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions).PolicyResult
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/state/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_PolicyResultType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_PolicyResultType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "policy-result"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_PolicyResultType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions).PolicyResult
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_PolicyResultType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_PolicyResultType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "policy-result"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_PolicyResultType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions).PolicyResult
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/policy-result"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/actions/config/policy-result"
func (n *RoutingPolicy_PolicyDefinition_Statement_Actions_PolicyResultPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_PolicyResultType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_PolicyResultType](
		"RoutingPolicy_PolicyDefinition_Statement_Actions",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "policy-result"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_PolicyResultType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Actions).PolicyResult
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.RoutingPolicy_PolicyDefinition_Statement_Actions) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
