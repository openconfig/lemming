/*
Package sampling is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package sampling

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Sampling_SflowPath represents the /openconfig-sampling/sampling/sflow YANG schema element.
type Sampling_SflowPath struct {
	*ygnmi.NodePath
}

// Sampling_SflowPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow YANG schema element.
type Sampling_SflowPathAny struct {
	*ygnmi.NodePath
}

// AgentIdIpv4 (leaf): Sets the agent identifier for IPv4 PDUs.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/agent-id-ipv4"
//	Path from root:       "/sampling/sflow/*/agent-id-ipv4"
func (n *Sampling_SflowPath) AgentIdIpv4() *Sampling_Sflow_AgentIdIpv4Path {
	ps := &Sampling_Sflow_AgentIdIpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "agent-id-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AgentIdIpv4 (leaf): Sets the agent identifier for IPv4 PDUs.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/agent-id-ipv4"
//	Path from root:       "/sampling/sflow/*/agent-id-ipv4"
func (n *Sampling_SflowPathAny) AgentIdIpv4() *Sampling_Sflow_AgentIdIpv4PathAny {
	ps := &Sampling_Sflow_AgentIdIpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "agent-id-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AgentIdIpv6 (leaf): Sets the agent identifier for IPv6 PDUs.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/agent-id-ipv6"
//	Path from root:       "/sampling/sflow/*/agent-id-ipv6"
func (n *Sampling_SflowPath) AgentIdIpv6() *Sampling_Sflow_AgentIdIpv6Path {
	ps := &Sampling_Sflow_AgentIdIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "agent-id-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AgentIdIpv6 (leaf): Sets the agent identifier for IPv6 PDUs.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/agent-id-ipv6"
//	Path from root:       "/sampling/sflow/*/agent-id-ipv6"
func (n *Sampling_SflowPathAny) AgentIdIpv6() *Sampling_Sflow_AgentIdIpv6PathAny {
	ps := &Sampling_Sflow_AgentIdIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "agent-id-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CollectorAny (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
func (n *Sampling_SflowPath) CollectorAny() *Sampling_Sflow_CollectorPathAny {
	ps := &Sampling_Sflow_CollectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": "*", "port": "*"},
			n,
		),
	}
	return ps
}

// CollectorAny (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
func (n *Sampling_SflowPathAny) CollectorAny() *Sampling_Sflow_CollectorPathAny {
	ps := &Sampling_Sflow_CollectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": "*", "port": "*"},
			n,
		),
	}
	return ps
}

// WithAddress sets Sampling_Sflow_CollectorPathAny's key "address" to the specified value.
// Address: string
func (n *Sampling_Sflow_CollectorPathAny) WithAddress(Address string) *Sampling_Sflow_CollectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "address", Address)
	return n
}

// WithPort sets Sampling_Sflow_CollectorPathAny's key "port" to the specified value.
// Port: uint16
func (n *Sampling_Sflow_CollectorPathAny) WithPort(Port uint16) *Sampling_Sflow_CollectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "port", Port)
	return n
}

// Collector (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
//
//	Address: string
//	Port: uint16
func (n *Sampling_SflowPath) Collector(Address string, Port uint16) *Sampling_Sflow_CollectorPath {
	ps := &Sampling_Sflow_CollectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": Address, "port": Port},
			n,
		),
	}
	return ps
}

// Collector (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
//
//	Address: string
//	Port: uint16
func (n *Sampling_SflowPathAny) Collector(Address string, Port uint16) *Sampling_Sflow_CollectorPathAny {
	ps := &Sampling_Sflow_CollectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors", "collector"},
			map[string]interface{}{"address": Address, "port": Port},
			n,
		),
	}
	return ps
}

// CollectorMap (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
func (n *Sampling_SflowPath) CollectorMap() *Sampling_Sflow_CollectorPathMap {
	ps := &Sampling_Sflow_CollectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CollectorMap (list): List of sFlow collectors to send sampling data.  Packet
// samples are sent to all collectors specified.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "collectors/collector"
//	Path from root:       "/sampling/sflow/collectors/collector"
func (n *Sampling_SflowPathAny) CollectorMap() *Sampling_Sflow_CollectorPathMapAny {
	ps := &Sampling_Sflow_CollectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"collectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dscp (leaf): DSCP marking of packets generated by the sFlow subsystem
// on the network device.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/dscp"
//	Path from root:       "/sampling/sflow/*/dscp"
func (n *Sampling_SflowPath) Dscp() *Sampling_Sflow_DscpPath {
	ps := &Sampling_Sflow_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): DSCP marking of packets generated by the sFlow subsystem
// on the network device.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/dscp"
//	Path from root:       "/sampling/sflow/*/dscp"
func (n *Sampling_SflowPathAny) Dscp() *Sampling_Sflow_DscpPathAny {
	ps := &Sampling_Sflow_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressSamplingRate (leaf): Sets the egress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/*/egress-sampling-rate"
func (n *Sampling_SflowPath) EgressSamplingRate() *Sampling_Sflow_EgressSamplingRatePath {
	ps := &Sampling_Sflow_EgressSamplingRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "egress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EgressSamplingRate (leaf): Sets the egress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/egress-sampling-rate"
//	Path from root:       "/sampling/sflow/*/egress-sampling-rate"
func (n *Sampling_SflowPathAny) EgressSamplingRate() *Sampling_Sflow_EgressSamplingRatePathAny {
	ps := &Sampling_Sflow_EgressSamplingRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "egress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables or disables sFlow sampling for the device.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/enabled"
//	Path from root:       "/sampling/sflow/*/enabled"
func (n *Sampling_SflowPath) Enabled() *Sampling_Sflow_EnabledPath {
	ps := &Sampling_Sflow_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): Enables or disables sFlow sampling for the device.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/enabled"
//	Path from root:       "/sampling/sflow/*/enabled"
func (n *Sampling_SflowPathAny) Enabled() *Sampling_Sflow_EnabledPathAny {
	ps := &Sampling_Sflow_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressSamplingRate (leaf): Sets the ingress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/*/ingress-sampling-rate"
func (n *Sampling_SflowPath) IngressSamplingRate() *Sampling_Sflow_IngressSamplingRatePath {
	ps := &Sampling_Sflow_IngressSamplingRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ingress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IngressSamplingRate (leaf): Sets the ingress packet sampling rate.  The rate is expressed
// as an integer N, where the intended sampling rate is 1/N
// packets.  An implementation may implement the sampling rate as
// a statistical average, rather than a strict periodic sampling.
//
// The allowable sampling rate range is generally a property of
// the system, e.g., determined by the capability of the
// hardware.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/ingress-sampling-rate"
//	Path from root:       "/sampling/sflow/*/ingress-sampling-rate"
func (n *Sampling_SflowPathAny) IngressSamplingRate() *Sampling_Sflow_IngressSamplingRatePathAny {
	ps := &Sampling_Sflow_IngressSamplingRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ingress-sampling-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
func (n *Sampling_SflowPath) InterfaceAny() *Sampling_Sflow_InterfacePathAny {
	ps := &Sampling_Sflow_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
func (n *Sampling_SflowPathAny) InterfaceAny() *Sampling_Sflow_InterfacePathAny {
	ps := &Sampling_Sflow_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
//
//	Name: string
func (n *Sampling_SflowPath) Interface(Name string) *Sampling_Sflow_InterfacePath {
	ps := &Sampling_Sflow_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Interface (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
//
//	Name: string
func (n *Sampling_SflowPathAny) Interface(Name string) *Sampling_Sflow_InterfacePathAny {
	ps := &Sampling_Sflow_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
func (n *Sampling_SflowPath) InterfaceMap() *Sampling_Sflow_InterfacePathMap {
	ps := &Sampling_Sflow_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of interfaces with sFlow data.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/sampling/sflow/interfaces/interface"
func (n *Sampling_SflowPathAny) InterfaceMap() *Sampling_Sflow_InterfacePathMapAny {
	ps := &Sampling_Sflow_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PollingInterval (leaf): Sets the traffic sampling polling interval.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/polling-interval"
//	Path from root:       "/sampling/sflow/*/polling-interval"
func (n *Sampling_SflowPath) PollingInterval() *Sampling_Sflow_PollingIntervalPath {
	ps := &Sampling_Sflow_PollingIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "polling-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PollingInterval (leaf): Sets the traffic sampling polling interval.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/polling-interval"
//	Path from root:       "/sampling/sflow/*/polling-interval"
func (n *Sampling_SflowPathAny) PollingInterval() *Sampling_Sflow_PollingIntervalPathAny {
	ps := &Sampling_Sflow_PollingIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "polling-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SampleSize (leaf): Sets the maximum number of bytes to be copied from a
// sampled packet.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/sample-size"
//	Path from root:       "/sampling/sflow/*/sample-size"
func (n *Sampling_SflowPath) SampleSize() *Sampling_Sflow_SampleSizePath {
	ps := &Sampling_Sflow_SampleSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sample-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SampleSize (leaf): Sets the maximum number of bytes to be copied from a
// sampled packet.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling"
//	Path from parent:     "*/sample-size"
//	Path from root:       "/sampling/sflow/*/sample-size"
func (n *Sampling_SflowPathAny) SampleSize() *Sampling_Sflow_SampleSizePathAny {
	ps := &Sampling_Sflow_SampleSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sample-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_SflowPath) State() ygnmi.SingletonQuery[*oc.Sampling_Sflow] {
	return ygnmi.NewSingletonQuery[*oc.Sampling_Sflow](
		"Sampling_Sflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Sampling_SflowPathAny) State() ygnmi.WildcardQuery[*oc.Sampling_Sflow] {
	return ygnmi.NewWildcardQuery[*oc.Sampling_Sflow](
		"Sampling_Sflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_SflowPath) Config() ygnmi.ConfigQuery[*oc.Sampling_Sflow] {
	return ygnmi.NewConfigQuery[*oc.Sampling_Sflow](
		"Sampling_Sflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Sampling_SflowPathAny) Config() ygnmi.WildcardQuery[*oc.Sampling_Sflow] {
	return ygnmi.NewWildcardQuery[*oc.Sampling_Sflow](
		"Sampling_Sflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Collector_AddressPath represents the /openconfig-sampling/sampling/sflow/collectors/collector/state/address YANG schema element.
type Sampling_Sflow_Collector_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Collector_AddressPathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/collectors/collector/state/address YANG schema element.
type Sampling_Sflow_Collector_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/address"
//	Path from root:       "/sampling/sflow/collectors/collector/state/address"
func (n *Sampling_Sflow_Collector_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/address"
//	Path from root:       "/sampling/sflow/collectors/collector/state/address"
func (n *Sampling_Sflow_Collector_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/address"
//	Path from root:       "/sampling/sflow/collectors/collector/config/address"
func (n *Sampling_Sflow_Collector_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/address"
//	Path from root:       "/sampling/sflow/collectors/collector/config/address"
func (n *Sampling_Sflow_Collector_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Sampling_Sflow_Collector_NetworkInstancePath represents the /openconfig-sampling/sampling/sflow/collectors/collector/state/network-instance YANG schema element.
type Sampling_Sflow_Collector_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Sampling_Sflow_Collector_NetworkInstancePathAny represents the wildcard version of the /openconfig-sampling/sampling/sflow/collectors/collector/state/network-instance YANG schema element.
type Sampling_Sflow_Collector_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/state/network-instance"
func (n *Sampling_Sflow_Collector_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/state/network-instance"
func (n *Sampling_Sflow_Collector_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/config/network-instance"
func (n *Sampling_Sflow_Collector_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-sampling-sflow"
//	Instantiating module: "openconfig-sampling-sflow"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/sampling/sflow/collectors/collector/config/network-instance"
func (n *Sampling_Sflow_Collector_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Sampling_Sflow_Collector",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Sampling_Sflow_Collector).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Sampling_Sflow_Collector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
