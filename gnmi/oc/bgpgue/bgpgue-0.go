/*
Package bgpgue is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by ygnmi version: v0.7.7: (ygot: v0.25.7)
using the following YANG input files:
  - gnsi/yang/gnsi-telemetry.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
  - gnsi/...
*/
package bgpgue

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// BgpGueIpv4Policy_DstPortIpv4Path represents the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/dst-port-ipv4 YANG schema element.
type BgpGueIpv4Policy_DstPortIpv4Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv4Policy_DstPortIpv4PathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/dst-port-ipv4 YANG schema element.
type BgpGueIpv4Policy_DstPortIpv4PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv4PolicyPath) State() ygnmi.SingletonQuery[*oc.BgpGueIpv4Policy] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.BgpGueIpv4Policy](
		"BgpGueIpv4Policy",
		true,
		n,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv4PolicyPathAny) State() ygnmi.WildcardQuery[*oc.BgpGueIpv4Policy] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.BgpGueIpv4Policy](
		"BgpGueIpv4Policy",
		true,
		n,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv4PolicyPath) Config() ygnmi.ConfigQuery[*oc.BgpGueIpv4Policy] {
	return ygnmi.NewNonLeafConfigQuery[*oc.BgpGueIpv4Policy](
		"BgpGueIpv4Policy",
		false,
		n,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv4PolicyPathAny) Config() ygnmi.WildcardQuery[*oc.BgpGueIpv4Policy] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.BgpGueIpv4Policy](
		"BgpGueIpv4Policy",
		false,
		n,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/dst-port-ipv4"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/dst-port-ipv4"
func (n *BgpGueIpv4Policy_DstPortIpv4Path) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewLeafSingletonQuery[uint16](
		"BgpGueIpv4Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).DstPortIpv4
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/dst-port-ipv4"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/dst-port-ipv4"
func (n *BgpGueIpv4Policy_DstPortIpv4PathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewLeafWildcardQuery[uint16](
		"BgpGueIpv4Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).DstPortIpv4
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/dst-port-ipv4"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/config/dst-port-ipv4"
func (n *BgpGueIpv4Policy_DstPortIpv4Path) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewLeafConfigQuery[uint16](
		"BgpGueIpv4Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "dst-port-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).DstPortIpv4
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/dst-port-ipv4"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/config/dst-port-ipv4"
func (n *BgpGueIpv4Policy_DstPortIpv4PathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewLeafWildcardQuery[uint16](
		"BgpGueIpv4Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "dst-port-ipv4"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).DstPortIpv4
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/dst-port-ipv6"
func (n *BgpGueIpv4Policy_DstPortIpv6Path) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewLeafSingletonQuery[uint16](
		"BgpGueIpv4Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).DstPortIpv6
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/dst-port-ipv6"
func (n *BgpGueIpv4Policy_DstPortIpv6PathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewLeafWildcardQuery[uint16](
		"BgpGueIpv4Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).DstPortIpv6
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/config/dst-port-ipv6"
func (n *BgpGueIpv4Policy_DstPortIpv6Path) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewLeafConfigQuery[uint16](
		"BgpGueIpv4Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "dst-port-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).DstPortIpv6
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/config/dst-port-ipv6"
func (n *BgpGueIpv4Policy_DstPortIpv6PathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewLeafWildcardQuery[uint16](
		"BgpGueIpv4Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "dst-port-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).DstPortIpv6
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/prefix"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/prefix"
func (n *BgpGueIpv4Policy_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"BgpGueIpv4Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/prefix"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/prefix"
func (n *BgpGueIpv4Policy_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGueIpv4Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/prefix"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/config/prefix"
func (n *BgpGueIpv4Policy_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"BgpGueIpv4Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/prefix"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/config/prefix"
func (n *BgpGueIpv4Policy_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGueIpv4Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/src-ip"
func (n *BgpGueIpv4Policy_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"BgpGueIpv4Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/src-ip"
func (n *BgpGueIpv4Policy_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGueIpv4Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/src-ip"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/config/src-ip"
func (n *BgpGueIpv4Policy_SrcIpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"BgpGueIpv4Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/src-ip"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/config/src-ip"
func (n *BgpGueIpv4Policy_SrcIpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGueIpv4Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv4Policy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv4Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// BgpGueIpv4Policy_DstPortIpv6Path represents the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/dst-port-ipv6 YANG schema element.
type BgpGueIpv4Policy_DstPortIpv6Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv4Policy_DstPortIpv6PathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/dst-port-ipv6 YANG schema element.
type BgpGueIpv4Policy_DstPortIpv6PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv4Policy_PrefixPath represents the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/prefix YANG schema element.
type BgpGueIpv4Policy_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv4Policy_PrefixPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/prefix YANG schema element.
type BgpGueIpv4Policy_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv4Policy_SrcIpPath represents the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/src-ip YANG schema element.
type BgpGueIpv4Policy_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv4Policy_SrcIpPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/state/src-ip YANG schema element.
type BgpGueIpv4Policy_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv4PolicyPath represents the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy YANG schema element.
type BgpGueIpv4PolicyPath struct {
	*ygnmi.NodePath
}

// BgpGueIpv4PolicyPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy YANG schema element.
type BgpGueIpv4PolicyPathAny struct {
	*ygnmi.NodePath
}

// DstPortIpv4 (leaf): Destination port of UDP encap for an IPv4 payload.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port-ipv4"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/*/dst-port-ipv4"
func (n *BgpGueIpv4PolicyPath) DstPortIpv4() *BgpGueIpv4Policy_DstPortIpv4Path {
	return &BgpGueIpv4Policy_DstPortIpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// DstPortIpv4 (leaf): Destination port of UDP encap for an IPv4 payload.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port-ipv4"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/*/dst-port-ipv4"
func (n *BgpGueIpv4PolicyPathAny) DstPortIpv4() *BgpGueIpv4Policy_DstPortIpv4PathAny {
	return &BgpGueIpv4Policy_DstPortIpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port-ipv4"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// DstPortIpv6 (leaf): Destination port of UDP encap for an IPv6 payload.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/*/dst-port-ipv6"
func (n *BgpGueIpv4PolicyPath) DstPortIpv6() *BgpGueIpv4Policy_DstPortIpv6Path {
	return &BgpGueIpv4Policy_DstPortIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// DstPortIpv6 (leaf): Destination port of UDP encap for an IPv6 payload.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/*/dst-port-ipv6"
func (n *BgpGueIpv4PolicyPathAny) DstPortIpv6() *BgpGueIpv4Policy_DstPortIpv6PathAny {
	return &BgpGueIpv4Policy_DstPortIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Prefix (leaf): Prefix containing BGP path's next-hop attribute of NLRI to which GUE
// policy applies.
//
// In case of overlapping prefixes, the policy with the longest-matching
// prefix will apply.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/prefix"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/*/prefix"
func (n *BgpGueIpv4PolicyPath) Prefix() *BgpGueIpv4Policy_PrefixPath {
	return &BgpGueIpv4Policy_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Prefix (leaf): Prefix containing BGP path's next-hop attribute of NLRI to which GUE
// policy applies.
//
// In case of overlapping prefixes, the policy with the longest-matching
// prefix will apply.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/prefix"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/*/prefix"
func (n *BgpGueIpv4PolicyPathAny) Prefix() *BgpGueIpv4Policy_PrefixPathAny {
	return &BgpGueIpv4Policy_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SrcIp (leaf): Source IP address of IPv4 encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/src-ip"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/*/src-ip"
func (n *BgpGueIpv4PolicyPath) SrcIp() *BgpGueIpv4Policy_SrcIpPath {
	return &BgpGueIpv4Policy_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SrcIp (leaf): Source IP address of IPv4 encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/src-ip"
//	Path from root:       "/bgp-gue-ipv4-policies/bgp-gue-ipv4-policy/*/src-ip"
func (n *BgpGueIpv4PolicyPathAny) SrcIp() *BgpGueIpv4Policy_SrcIpPathAny {
	return &BgpGueIpv4Policy_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// BgpGueIpv6Policy_DstPortIpv6Path represents the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/dst-port-ipv6 YANG schema element.
type BgpGueIpv6Policy_DstPortIpv6Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv6Policy_DstPortIpv6PathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/dst-port-ipv6 YANG schema element.
type BgpGueIpv6Policy_DstPortIpv6PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6PolicyPath) State() ygnmi.SingletonQuery[*oc.BgpGueIpv6Policy] {
	return ygnmi.NewNonLeafSingletonQuery[*oc.BgpGueIpv6Policy](
		"BgpGueIpv6Policy",
		true,
		n,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6PolicyPathAny) State() ygnmi.WildcardQuery[*oc.BgpGueIpv6Policy] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.BgpGueIpv6Policy](
		"BgpGueIpv6Policy",
		true,
		n,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6PolicyPath) Config() ygnmi.ConfigQuery[*oc.BgpGueIpv6Policy] {
	return ygnmi.NewNonLeafConfigQuery[*oc.BgpGueIpv6Policy](
		"BgpGueIpv6Policy",
		false,
		n,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6PolicyPathAny) Config() ygnmi.WildcardQuery[*oc.BgpGueIpv6Policy] {
	return ygnmi.NewNonLeafWildcardQuery[*oc.BgpGueIpv6Policy](
		"BgpGueIpv6Policy",
		false,
		n,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/dst-port-ipv6"
func (n *BgpGueIpv6Policy_DstPortIpv6Path) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewLeafSingletonQuery[uint16](
		"BgpGueIpv6Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).DstPortIpv6
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/dst-port-ipv6"
func (n *BgpGueIpv6Policy_DstPortIpv6PathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewLeafWildcardQuery[uint16](
		"BgpGueIpv6Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "dst-port-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).DstPortIpv6
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/config/dst-port-ipv6"
func (n *BgpGueIpv6Policy_DstPortIpv6Path) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewLeafConfigQuery[uint16](
		"BgpGueIpv6Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "dst-port-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).DstPortIpv6
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/config/dst-port-ipv6"
func (n *BgpGueIpv6Policy_DstPortIpv6PathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewLeafWildcardQuery[uint16](
		"BgpGueIpv6Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "dst-port-ipv6"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).DstPortIpv6
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/prefix"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/prefix"
func (n *BgpGueIpv6Policy_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"BgpGueIpv6Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/prefix"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/prefix"
func (n *BgpGueIpv6Policy_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGueIpv6Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/prefix"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/config/prefix"
func (n *BgpGueIpv6Policy_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"BgpGueIpv6Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/prefix"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/config/prefix"
func (n *BgpGueIpv6Policy_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGueIpv6Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/src-ip"
func (n *BgpGueIpv6Policy_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewLeafSingletonQuery[string](
		"BgpGueIpv6Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/src-ip"
func (n *BgpGueIpv6Policy_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGueIpv6Policy",
		true,
		true,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/src-ip"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/config/src-ip"
func (n *BgpGueIpv6Policy_SrcIpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewLeafConfigQuery[string](
		"BgpGueIpv6Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "config/src-ip"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/config/src-ip"
func (n *BgpGueIpv6Policy_SrcIpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewLeafWildcardQuery[string](
		"BgpGueIpv6Policy",
		false,
		true,
		ygnmi.NewNodePath(
			[]string{"config", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.BgpGueIpv6Policy).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.BgpGueIpv6Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
	)
}

// BgpGueIpv6Policy_PrefixPath represents the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/prefix YANG schema element.
type BgpGueIpv6Policy_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv6Policy_PrefixPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/prefix YANG schema element.
type BgpGueIpv6Policy_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv6Policy_SrcIpPath represents the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/src-ip YANG schema element.
type BgpGueIpv6Policy_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv6Policy_SrcIpPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/state/src-ip YANG schema element.
type BgpGueIpv6Policy_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// BgpGueIpv6PolicyPath represents the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy YANG schema element.
type BgpGueIpv6PolicyPath struct {
	*ygnmi.NodePath
}

// BgpGueIpv6PolicyPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy YANG schema element.
type BgpGueIpv6PolicyPathAny struct {
	*ygnmi.NodePath
}

// DstPortIpv6 (leaf): Destination port of UDP encap for an IPv6 payload.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/*/dst-port-ipv6"
func (n *BgpGueIpv6PolicyPath) DstPortIpv6() *BgpGueIpv6Policy_DstPortIpv6Path {
	return &BgpGueIpv6Policy_DstPortIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// DstPortIpv6 (leaf): Destination port of UDP encap for an IPv6 payload.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/*/dst-port-ipv6"
func (n *BgpGueIpv6PolicyPathAny) DstPortIpv6() *BgpGueIpv6Policy_DstPortIpv6PathAny {
	return &BgpGueIpv6Policy_DstPortIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Prefix (leaf): Prefix containing BGP path's next-hop attribute of NLRI to which GUE
// policy applies.
//
// In case of overlapping prefixes, the policy with the longest-matching
// prefix will apply.
//
// Any prefix coverage of IPv4-mapped IPv6 addresses will be ignored,
// since the IPv4 policy must be used for IPv4 next-hop addresses.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/prefix"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/*/prefix"
func (n *BgpGueIpv6PolicyPath) Prefix() *BgpGueIpv6Policy_PrefixPath {
	return &BgpGueIpv6Policy_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// Prefix (leaf): Prefix containing BGP path's next-hop attribute of NLRI to which GUE
// policy applies.
//
// In case of overlapping prefixes, the policy with the longest-matching
// prefix will apply.
//
// Any prefix coverage of IPv4-mapped IPv6 addresses will be ignored,
// since the IPv4 policy must be used for IPv4 next-hop addresses.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/prefix"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/*/prefix"
func (n *BgpGueIpv6PolicyPathAny) Prefix() *BgpGueIpv6Policy_PrefixPathAny {
	return &BgpGueIpv6Policy_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SrcIp (leaf): Source IP address of IPv6 encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/src-ip"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/*/src-ip"
func (n *BgpGueIpv6PolicyPath) SrcIp() *BgpGueIpv6Policy_SrcIpPath {
	return &BgpGueIpv6Policy_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}

// SrcIp (leaf): Source IP address of IPv6 encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/src-ip"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-policy/*/src-ip"
func (n *BgpGueIpv6PolicyPathAny) SrcIp() *BgpGueIpv6Policy_SrcIpPathAny {
	return &BgpGueIpv6Policy_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
}
