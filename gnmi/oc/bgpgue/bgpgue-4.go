/*
Package bgpgue is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package bgpgue

import (
	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// BgpGueIpv6GlobalPolicyPath represents the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy YANG schema element.
type BgpGueIpv6GlobalPolicyPath struct {
	*ygnmi.NodePath
}

// BgpGueIpv6GlobalPolicyPathAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy YANG schema element.
type BgpGueIpv6GlobalPolicyPathAny struct {
	*ygnmi.NodePath
}

// BgpGueIpv6GlobalPolicyPathMap represents the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy YANG schema element.
type BgpGueIpv6GlobalPolicyPathMap struct {
	*ygnmi.NodePath
}

// BgpGueIpv6GlobalPolicyPathMapAny represents the wildcard version of the /openconfig-bgp-gue/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy YANG schema element.
type BgpGueIpv6GlobalPolicyPathMapAny struct {
	*ygnmi.NodePath
}

// DstPortIpv6 (leaf): Destination port of UDP encap for an IPv6 payload.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy/*/dst-port-ipv6"
func (n *BgpGueIpv6GlobalPolicyPath) DstPortIpv6() *BgpGueIpv6GlobalPolicy_DstPortIpv6Path {
	ps := &BgpGueIpv6GlobalPolicy_DstPortIpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstPortIpv6 (leaf): Destination port of UDP encap for an IPv6 payload.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/dst-port-ipv6"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy/*/dst-port-ipv6"
func (n *BgpGueIpv6GlobalPolicyPathAny) DstPortIpv6() *BgpGueIpv6GlobalPolicy_DstPortIpv6PathAny {
	ps := &BgpGueIpv6GlobalPolicy_DstPortIpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dst-port-ipv6"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): Prefix containing BGP path's next-hop attribute of NLRI to which GUE
// global policy applies.
//
// In case of overlapping prefixes, the global policy with the
// longest-matching prefix will apply.
//
// Any prefix coverage of IPv4-mapped IPv6 addresses will be ignored,
// since the IPv4 global policy must be used for IPv4 next-hop
// addresses.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/prefix"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy/*/prefix"
func (n *BgpGueIpv6GlobalPolicyPath) Prefix() *BgpGueIpv6GlobalPolicy_PrefixPath {
	ps := &BgpGueIpv6GlobalPolicy_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): Prefix containing BGP path's next-hop attribute of NLRI to which GUE
// global policy applies.
//
// In case of overlapping prefixes, the global policy with the
// longest-matching prefix will apply.
//
// Any prefix coverage of IPv4-mapped IPv6 addresses will be ignored,
// since the IPv4 global policy must be used for IPv4 next-hop
// addresses.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/prefix"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy/*/prefix"
func (n *BgpGueIpv6GlobalPolicyPathAny) Prefix() *BgpGueIpv6GlobalPolicy_PrefixPathAny {
	ps := &BgpGueIpv6GlobalPolicy_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address of IPv6 encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/src-ip"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy/*/src-ip"
func (n *BgpGueIpv6GlobalPolicyPath) SrcIp() *BgpGueIpv6GlobalPolicy_SrcIpPath {
	ps := &BgpGueIpv6GlobalPolicy_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address of IPv6 encap.
//
//	Defining module:      "openconfig-bgp-gue"
//	Instantiating module: "openconfig-bgp-gue"
//	Path from parent:     "*/src-ip"
//	Path from root:       "/bgp-gue-ipv6-policies/bgp-gue-ipv6-global-policy/*/src-ip"
func (n *BgpGueIpv6GlobalPolicyPathAny) SrcIp() *BgpGueIpv6GlobalPolicy_SrcIpPathAny {
	ps := &BgpGueIpv6GlobalPolicy_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6GlobalPolicyPath) State() ygnmi.SingletonQuery[*oc.BgpGueIpv6GlobalPolicy] {
	return ygnmi.NewSingletonQuery[*oc.BgpGueIpv6GlobalPolicy](
		"BgpGueIpv6GlobalPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6GlobalPolicyPathAny) State() ygnmi.WildcardQuery[*oc.BgpGueIpv6GlobalPolicy] {
	return ygnmi.NewWildcardQuery[*oc.BgpGueIpv6GlobalPolicy](
		"BgpGueIpv6GlobalPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6GlobalPolicyPath) Config() ygnmi.ConfigQuery[*oc.BgpGueIpv6GlobalPolicy] {
	return ygnmi.NewConfigQuery[*oc.BgpGueIpv6GlobalPolicy](
		"BgpGueIpv6GlobalPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6GlobalPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.BgpGueIpv6GlobalPolicy] {
	return ygnmi.NewWildcardQuery[*oc.BgpGueIpv6GlobalPolicy](
		"BgpGueIpv6GlobalPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6GlobalPolicyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.BgpGueIpv6GlobalPolicy] {
	return ygnmi.NewSingletonQuery[map[string]*oc.BgpGueIpv6GlobalPolicy](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.BgpGueIpv6GlobalPolicy, bool) {
			ret := gs.(*oc.Root).BgpGueIpv6GlobalPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-gue:bgp-gue-ipv6-policies"},
			PostRelPath: []string{"openconfig-bgp-gue:bgp-gue-ipv6-global-policy"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6GlobalPolicyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.BgpGueIpv6GlobalPolicy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.BgpGueIpv6GlobalPolicy](
		"Root",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.BgpGueIpv6GlobalPolicy, bool) {
			ret := gs.(*oc.Root).BgpGueIpv6GlobalPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-gue:bgp-gue-ipv6-policies"},
			PostRelPath: []string{"openconfig-bgp-gue:bgp-gue-ipv6-global-policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6GlobalPolicyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.BgpGueIpv6GlobalPolicy] {
	return ygnmi.NewConfigQuery[map[string]*oc.BgpGueIpv6GlobalPolicy](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.BgpGueIpv6GlobalPolicy, bool) {
			ret := gs.(*oc.Root).BgpGueIpv6GlobalPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-gue:bgp-gue-ipv6-policies"},
			PostRelPath: []string{"openconfig-bgp-gue:bgp-gue-ipv6-global-policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *BgpGueIpv6GlobalPolicyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.BgpGueIpv6GlobalPolicy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.BgpGueIpv6GlobalPolicy](
		"Root",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.BgpGueIpv6GlobalPolicy, bool) {
			ret := gs.(*oc.Root).BgpGueIpv6GlobalPolicy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-bgp-gue:bgp-gue-ipv6-policies"},
			PostRelPath: []string{"openconfig-bgp-gue:bgp-gue-ipv6-global-policy"},
		},
	)
}
