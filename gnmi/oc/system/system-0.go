/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_BootTimePath represents the /openconfig-system/system/state/boot-time YANG schema element.
type System_BootTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_BootTimePathAny represents the wildcard version of the /openconfig-system/system/state/boot-time YANG schema element.
type System_BootTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/system/state/boot-time"
func (n *System_BootTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).BootTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/system/state/boot-time"
func (n *System_BootTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).BootTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_CurrentDatetimePath represents the /openconfig-system/system/state/current-datetime YANG schema element.
type System_CurrentDatetimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_CurrentDatetimePathAny represents the wildcard version of the /openconfig-system/system/state/current-datetime YANG schema element.
type System_CurrentDatetimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/current-datetime"
//	Path from root:       "/system/state/current-datetime"
func (n *System_CurrentDatetimePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-datetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).CurrentDatetime
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/current-datetime"
//	Path from root:       "/system/state/current-datetime"
func (n *System_CurrentDatetimePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "current-datetime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).CurrentDatetime
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_DomainNamePath represents the /openconfig-system/system/state/domain-name YANG schema element.
type System_DomainNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_DomainNamePathAny represents the wildcard version of the /openconfig-system/system/state/domain-name YANG schema element.
type System_DomainNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/domain-name"
//	Path from root:       "/system/state/domain-name"
func (n *System_DomainNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "domain-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).DomainName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/domain-name"
//	Path from root:       "/system/state/domain-name"
func (n *System_DomainNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "domain-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).DomainName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/domain-name"
//	Path from root:       "/system/config/domain-name"
func (n *System_DomainNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "domain-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).DomainName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/domain-name"
//	Path from root:       "/system/config/domain-name"
func (n *System_DomainNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "domain-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).DomainName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_HostnamePath represents the /openconfig-system/system/state/hostname YANG schema element.
type System_HostnamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_HostnamePathAny represents the wildcard version of the /openconfig-system/system/state/hostname YANG schema element.
type System_HostnamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/state/hostname"
func (n *System_HostnamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/state/hostname"
func (n *System_HostnamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/config/hostname"
func (n *System_HostnamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/config/hostname"
func (n *System_HostnamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_LastConfigurationTimestampPath represents the /openconfig-system/system/state/last-configuration-timestamp YANG schema element.
type System_LastConfigurationTimestampPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_LastConfigurationTimestampPathAny represents the wildcard version of the /openconfig-system/system/state/last-configuration-timestamp YANG schema element.
type System_LastConfigurationTimestampPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-configuration-timestamp"
//	Path from root:       "/system/state/last-configuration-timestamp"
func (n *System_LastConfigurationTimestampPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).LastConfigurationTimestamp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-configuration-timestamp"
//	Path from root:       "/system/state/last-configuration-timestamp"
func (n *System_LastConfigurationTimestampPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).LastConfigurationTimestamp
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_LoginBannerPath represents the /openconfig-system/system/state/login-banner YANG schema element.
type System_LoginBannerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_LoginBannerPathAny represents the wildcard version of the /openconfig-system/system/state/login-banner YANG schema element.
type System_LoginBannerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/login-banner"
//	Path from root:       "/system/state/login-banner"
func (n *System_LoginBannerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "login-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).LoginBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/login-banner"
//	Path from root:       "/system/state/login-banner"
func (n *System_LoginBannerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "login-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).LoginBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/login-banner"
//	Path from root:       "/system/config/login-banner"
func (n *System_LoginBannerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "login-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).LoginBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/login-banner"
//	Path from root:       "/system/config/login-banner"
func (n *System_LoginBannerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "login-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).LoginBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MotdBannerPath represents the /openconfig-system/system/state/motd-banner YANG schema element.
type System_MotdBannerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MotdBannerPathAny represents the wildcard version of the /openconfig-system/system/state/motd-banner YANG schema element.
type System_MotdBannerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/motd-banner"
//	Path from root:       "/system/state/motd-banner"
func (n *System_MotdBannerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "motd-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).MotdBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/motd-banner"
//	Path from root:       "/system/state/motd-banner"
func (n *System_MotdBannerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "motd-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).MotdBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/motd-banner"
//	Path from root:       "/system/config/motd-banner"
func (n *System_MotdBannerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "motd-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).MotdBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/motd-banner"
//	Path from root:       "/system/config/motd-banner"
func (n *System_MotdBannerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "motd-banner"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).MotdBanner
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_SoftwareVersionPath represents the /openconfig-system/system/state/software-version YANG schema element.
type System_SoftwareVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_SoftwareVersionPathAny represents the wildcard version of the /openconfig-system/system/state/software-version YANG schema element.
type System_SoftwareVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-version"
//	Path from root:       "/system/state/software-version"
func (n *System_SoftwareVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).SoftwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-version"
//	Path from root:       "/system/state/software-version"
func (n *System_SoftwareVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System).SoftwareVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_UpTimePath represents the /openconfig-system/system/state/up-time YANG schema element.
type System_UpTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_UpTimePathAny represents the wildcard version of the /openconfig-system/system/state/up-time YANG schema element.
type System_UpTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/up-time"
//	Path from root:       "/system/state/up-time"
func (n *System_UpTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).UpTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/up-time"
//	Path from root:       "/system/state/up-time"
func (n *System_UpTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System).UpTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// SystemPath represents the /openconfig-system/system YANG schema element.
type SystemPath struct {
	*ygnmi.NodePath
}

// SystemPathAny represents the wildcard version of the /openconfig-system/system YANG schema element.
type SystemPathAny struct {
	*ygnmi.NodePath
}

// Aaa (container): Top-level container for AAA services
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "aaa"
//	Path from root:       "/system/aaa"
func (n *SystemPath) Aaa() *System_AaaPath {
	ps := &System_AaaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Aaa (container): Top-level container for AAA services
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "aaa"
//	Path from root:       "/system/aaa"
func (n *SystemPathAny) Aaa() *System_AaaPathAny {
	ps := &System_AaaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aaa"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AlarmAny (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
func (n *SystemPath) AlarmAny() *System_AlarmPathAny {
	ps := &System_AlarmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// AlarmAny (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
func (n *SystemPathAny) AlarmAny() *System_AlarmPathAny {
	ps := &System_AlarmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Alarm (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
//
//	Id: string
func (n *SystemPath) Alarm(Id string) *System_AlarmPath {
	ps := &System_AlarmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Alarm (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
//
//	Id: string
func (n *SystemPathAny) Alarm(Id string) *System_AlarmPathAny {
	ps := &System_AlarmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms", "alarm"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// AlarmMap (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
func (n *SystemPath) AlarmMap() *System_AlarmPathMap {
	ps := &System_AlarmPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AlarmMap (list): List of alarms, keyed by a unique id
//
//	Defining module:      "openconfig-alarms"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "alarms/alarm"
//	Path from root:       "/system/alarms/alarm"
func (n *SystemPathAny) AlarmMap() *System_AlarmPathMapAny {
	ps := &System_AlarmPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"alarms"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BootTime (leaf): This timestamp indicates the time that the system was last
// restarted.  The value is the timestamp in nanoseconds relative
// to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/system/state/boot-time"
func (n *SystemPath) BootTime() *System_BootTimePath {
	ps := &System_BootTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BootTime (leaf): This timestamp indicates the time that the system was last
// restarted.  The value is the timestamp in nanoseconds relative
// to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/boot-time"
//	Path from root:       "/system/state/boot-time"
func (n *SystemPathAny) BootTime() *System_BootTimePathAny {
	ps := &System_BootTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "boot-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bootz (container): Bootz protocol container for management of bootz protocol state.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "bootz"
//	Path from root:       "/system/bootz"
func (n *SystemPath) Bootz() *System_BootzPath {
	ps := &System_BootzPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootz"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Bootz (container): Bootz protocol container for management of bootz protocol state.
//
//	Defining module:      "openconfig-system-bootz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "bootz"
//	Path from root:       "/system/bootz"
func (n *SystemPathAny) Bootz() *System_BootzPathAny {
	ps := &System_BootzPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bootz"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Clock (container): Top-level container for clock configuration data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "clock"
//	Path from root:       "/system/clock"
func (n *SystemPath) Clock() *System_ClockPath {
	ps := &System_ClockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Clock (container): Top-level container for clock configuration data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "clock"
//	Path from root:       "/system/clock"
func (n *SystemPathAny) Clock() *System_ClockPathAny {
	ps := &System_ClockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"clock"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Console (container): Console-related configuration and state.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "console"
//	Path from root:       "/system/console"
func (n *SystemPath) Console() *System_ConsolePath {
	ps := &System_ConsolePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Console (container): Console-related configuration and state.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "console"
//	Path from root:       "/system/console"
func (n *SystemPathAny) Console() *System_ConsolePathAny {
	ps := &System_ConsolePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ControlPlaneTraffic (container): Policies and configuration relating to the traffic destined towards
//
//	 the system control-plane.
//		Defining module:      "openconfig-system-controlplane"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "control-plane-traffic"
//		Path from root:       "/system/control-plane-traffic"
func (n *SystemPath) ControlPlaneTraffic() *System_ControlPlaneTrafficPath {
	ps := &System_ControlPlaneTrafficPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"control-plane-traffic"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ControlPlaneTraffic (container): Policies and configuration relating to the traffic destined towards
//
//	 the system control-plane.
//		Defining module:      "openconfig-system-controlplane"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "control-plane-traffic"
//		Path from root:       "/system/control-plane-traffic"
func (n *SystemPathAny) ControlPlaneTraffic() *System_ControlPlaneTrafficPathAny {
	ps := &System_ControlPlaneTrafficPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"control-plane-traffic"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CpuAny (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
func (n *SystemPath) CpuAny() *System_CpuPathAny {
	ps := &System_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// CpuAny (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
func (n *SystemPathAny) CpuAny() *System_CpuPathAny {
	ps := &System_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// Cpu (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
//
//	Index: [oc.E_Cpu_Index_Enum, oc.UnionUint32]
func (n *SystemPath) Cpu(Index oc.System_Cpu_Index_Union) *System_CpuPath {
	ps := &System_CpuPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// Cpu (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
//
//	Index: [oc.E_Cpu_Index_Enum, oc.UnionUint32]
func (n *SystemPathAny) Cpu(Index oc.System_Cpu_Index_Union) *System_CpuPathAny {
	ps := &System_CpuPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus", "cpu"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// CpuMap (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
func (n *SystemPath) CpuMap() *System_CpuPathMap {
	ps := &System_CpuPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CpuMap (list): List of CPU cores on the system (including logical CPUs
// on hyperthreaded systems), keyed by either a numerical
// index, or the ALL value for an entry representing the
// aggregation across all CPUs.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "cpus/cpu"
//	Path from root:       "/system/cpus/cpu"
func (n *SystemPathAny) CpuMap() *System_CpuPathMapAny {
	ps := &System_CpuPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"cpus"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CurrentDatetime (leaf): The current system date and time.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/current-datetime"
//	Path from root:       "/system/state/current-datetime"
func (n *SystemPath) CurrentDatetime() *System_CurrentDatetimePath {
	ps := &System_CurrentDatetimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-datetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentDatetime (leaf): The current system date and time.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/current-datetime"
//	Path from root:       "/system/state/current-datetime"
func (n *SystemPathAny) CurrentDatetime() *System_CurrentDatetimePathAny {
	ps := &System_CurrentDatetimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "current-datetime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dns (container): Enclosing container for DNS resolver data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "dns"
//	Path from root:       "/system/dns"
func (n *SystemPath) Dns() *System_DnsPath {
	ps := &System_DnsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Dns (container): Enclosing container for DNS resolver data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "dns"
//	Path from root:       "/system/dns"
func (n *SystemPathAny) Dns() *System_DnsPathAny {
	ps := &System_DnsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"dns"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/domain-name"
//	Path from root:       "/system/*/domain-name"
func (n *SystemPath) DomainName() *System_DomainNamePath {
	ps := &System_DomainNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "domain-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DomainName (leaf): Specifies the domain name used to form fully qualified name
// for unqualified hostnames.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/domain-name"
//	Path from root:       "/system/*/domain-name"
func (n *SystemPathAny) DomainName() *System_DomainNamePathAny {
	ps := &System_DomainNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "domain-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GnmiPathzPolicies (container): Collection of OpenConfig-path-based authorization policies that
// have been installed on the device using the gNSI OpenConfig-
// path-based authorization policy management service.
// Each policy listed here is identified by its status (either
//
//	ACTIVE or SANDBOX) and has its version and creation date/time
//
// listed.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "gnmi-pathz-policies"
//	Path from root:       "/system/gnmi-pathz-policies"
func (n *SystemPath) GnmiPathzPolicies() *System_GnmiPathzPoliciesPath {
	ps := &System_GnmiPathzPoliciesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"gnmi-pathz-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GnmiPathzPolicies (container): Collection of OpenConfig-path-based authorization policies that
// have been installed on the device using the gNSI OpenConfig-
// path-based authorization policy management service.
// Each policy listed here is identified by its status (either
//
//	ACTIVE or SANDBOX) and has its version and creation date/time
//
// listed.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "gnmi-pathz-policies"
//	Path from root:       "/system/gnmi-pathz-policies"
func (n *SystemPathAny) GnmiPathzPolicies() *System_GnmiPathzPoliciesPathAny {
	ps := &System_GnmiPathzPoliciesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"gnmi-pathz-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GrpcServerAny (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
func (n *SystemPath) GrpcServerAny() *System_GrpcServerPathAny {
	ps := &System_GrpcServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// GrpcServerAny (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
func (n *SystemPathAny) GrpcServerAny() *System_GrpcServerPathAny {
	ps := &System_GrpcServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// GrpcServer (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
//
//	Name: string
func (n *SystemPath) GrpcServer(Name string) *System_GrpcServerPath {
	ps := &System_GrpcServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// GrpcServer (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
//
//	Name: string
func (n *SystemPathAny) GrpcServer(Name string) *System_GrpcServerPathAny {
	ps := &System_GrpcServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers", "grpc-server"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// GrpcServerMap (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
func (n *SystemPath) GrpcServerMap() *System_GrpcServerPathMap {
	ps := &System_GrpcServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GrpcServerMap (list): The list of gRPC servers that are running on the device. Each
// instance within this list corresponds to an individual gRPC listener
// that listens on a single TCP port on the specified addresses.
// Where there are multiple services that run on a single port, these
// are enabled through the service leaf-list which uses the GRPC_SERVICE
// identity to list the supported service types.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "grpc-servers/grpc-server"
//	Path from root:       "/system/grpc-servers/grpc-server"
func (n *SystemPathAny) GrpcServerMap() *System_GrpcServerPathMapAny {
	ps := &System_GrpcServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"grpc-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/*/hostname"
func (n *SystemPath) Hostname() *System_HostnamePath {
	ps := &System_HostnamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): The hostname of the device -- should be a single domain
// label, without the domain.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/*/hostname"
func (n *SystemPathAny) Hostname() *System_HostnamePathAny {
	ps := &System_HostnamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastConfigurationTimestamp (leaf): Indicates the monotonically increasing timestamp at which the
// last configuration change was made. This may may be through CLI,
// gNMI or some other mechanism. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-configuration-timestamp"
//	Path from root:       "/system/state/last-configuration-timestamp"
func (n *SystemPath) LastConfigurationTimestamp() *System_LastConfigurationTimestampPath {
	ps := &System_LastConfigurationTimestampPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastConfigurationTimestamp (leaf): Indicates the monotonically increasing timestamp at which the
// last configuration change was made. This may may be through CLI,
// gNMI or some other mechanism. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/last-configuration-timestamp"
//	Path from root:       "/system/state/last-configuration-timestamp"
func (n *SystemPathAny) LastConfigurationTimestamp() *System_LastConfigurationTimestampPathAny {
	ps := &System_LastConfigurationTimestampPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-configuration-timestamp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// License (container): Container for license model
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "license"
//	Path from root:       "/system/license"
func (n *SystemPath) License() *System_LicensePath {
	ps := &System_LicensePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// License (container): Container for license model
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "license"
//	Path from root:       "/system/license"
func (n *SystemPathAny) License() *System_LicensePathAny {
	ps := &System_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"license"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Logging (container): Top-level container for data related to logging / syslog
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "logging"
//	Path from root:       "/system/logging"
func (n *SystemPath) Logging() *System_LoggingPath {
	ps := &System_LoggingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Logging (container): Top-level container for data related to logging / syslog
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "logging"
//	Path from root:       "/system/logging"
func (n *SystemPathAny) Logging() *System_LoggingPathAny {
	ps := &System_LoggingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"logging"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/login-banner"
//	Path from root:       "/system/*/login-banner"
func (n *SystemPath) LoginBanner() *System_LoginBannerPath {
	ps := &System_LoginBannerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "login-banner"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LoginBanner (leaf): The console login message displayed before the login prompt,
// i.e., before a user logs into the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/login-banner"
//	Path from root:       "/system/*/login-banner"
func (n *SystemPathAny) LoginBanner() *System_LoginBannerPathAny {
	ps := &System_LoginBannerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "login-banner"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (container): Top-level container for system's MAC address configuration and state
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mac-address"
//	Path from root:       "/system/mac-address"
func (n *SystemPath) MacAddress() *System_MacAddressPath {
	ps := &System_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacAddress (container): Top-level container for system's MAC address configuration and state
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mac-address"
//	Path from root:       "/system/mac-address"
func (n *SystemPathAny) MacAddress() *System_MacAddressPathAny {
	ps := &System_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-address"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Top-level container for system memory data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "memory"
//	Path from root:       "/system/memory"
func (n *SystemPath) Memory() *System_MemoryPath {
	ps := &System_MemoryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Memory (container): Top-level container for system memory data
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "memory"
//	Path from root:       "/system/memory"
func (n *SystemPathAny) Memory() *System_MemoryPathAny {
	ps := &System_MemoryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"memory"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Messages (container): Top-level container for Syslog messages.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "messages"
//	Path from root:       "/system/messages"
func (n *SystemPath) Messages() *System_MessagesPath {
	ps := &System_MessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Messages (container): Top-level container for Syslog messages.
//
//	Defining module:      "openconfig-messages"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "messages"
//	Path from root:       "/system/messages"
func (n *SystemPathAny) Messages() *System_MessagesPathAny {
	ps := &System_MessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"messages"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/motd-banner"
//	Path from root:       "/system/*/motd-banner"
func (n *SystemPath) MotdBanner() *System_MotdBannerPath {
	ps := &System_MotdBannerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "motd-banner"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MotdBanner (leaf): The console message displayed after a user logs into the
// system.  They system may append additional standard
// information such as the current system date and time, uptime,
// last login timestamp, etc.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/motd-banner"
//	Path from root:       "/system/*/motd-banner"
func (n *SystemPathAny) MotdBanner() *System_MotdBannerPathAny {
	ps := &System_MotdBannerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "motd-banner"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MountPointAny (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
func (n *SystemPath) MountPointAny() *System_MountPointPathAny {
	ps := &System_MountPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// MountPointAny (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
func (n *SystemPathAny) MountPointAny() *System_MountPointPathAny {
	ps := &System_MountPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// MountPoint (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
//
//	Name: string
func (n *SystemPath) MountPoint(Name string) *System_MountPointPath {
	ps := &System_MountPointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// MountPoint (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
//
//	Name: string
func (n *SystemPathAny) MountPoint(Name string) *System_MountPointPathAny {
	ps := &System_MountPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points", "mount-point"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// MountPointMap (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
func (n *SystemPath) MountPointMap() *System_MountPointPathMap {
	ps := &System_MountPointPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MountPointMap (list): List of mount points in the system.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "mount-points/mount-point"
//	Path from root:       "/system/mount-points/mount-point"
func (n *SystemPathAny) MountPointMap() *System_MountPointPathMapAny {
	ps := &System_MountPointPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mount-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ntp (container): Top-level container for NTP configuration and state
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp"
//	Path from root:       "/system/ntp"
func (n *SystemPath) Ntp() *System_NtpPath {
	ps := &System_NtpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ntp (container): Top-level container for NTP configuration and state
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ntp"
//	Path from root:       "/system/ntp"
func (n *SystemPathAny) Ntp() *System_NtpPathAny {
	ps := &System_NtpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ntp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProcessAny (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
func (n *SystemPath) ProcessAny() *System_ProcessPathAny {
	ps := &System_ProcessPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": "*"},
			n,
		),
	}
	return ps
}

// ProcessAny (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
func (n *SystemPathAny) ProcessAny() *System_ProcessPathAny {
	ps := &System_ProcessPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": "*"},
			n,
		),
	}
	return ps
}

// Process (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
//
//	Pid: uint64
func (n *SystemPath) Process(Pid uint64) *System_ProcessPath {
	ps := &System_ProcessPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": Pid},
			n,
		),
	}
	return ps
}

// Process (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
//
//	Pid: uint64
func (n *SystemPathAny) Process(Pid uint64) *System_ProcessPathAny {
	ps := &System_ProcessPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes", "process"},
			map[string]interface{}{"pid": Pid},
			n,
		),
	}
	return ps
}

// ProcessMap (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
func (n *SystemPath) ProcessMap() *System_ProcessPathMap {
	ps := &System_ProcessPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProcessMap (list): List of monitored processes
//
//	Defining module:      "openconfig-procmon"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "processes/process"
//	Path from root:       "/system/processes/process"
func (n *SystemPathAny) ProcessMap() *System_ProcessPathMapAny {
	ps := &System_ProcessPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"processes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SoftwareVersion (leaf): Operating system version of the currently active controller
// of the device.  It is required that this value matches the
// value of the state/software-version leaf in the component
// of type OPERATING_SYSTEM.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-version"
//	Path from root:       "/system/state/software-version"
func (n *SystemPath) SoftwareVersion() *System_SoftwareVersionPath {
	ps := &System_SoftwareVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftwareVersion (leaf): Operating system version of the currently active controller
// of the device.  It is required that this value matches the
// value of the state/software-version leaf in the component
// of type OPERATING_SYSTEM.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/software-version"
//	Path from root:       "/system/state/software-version"
func (n *SystemPathAny) SoftwareVersion() *System_SoftwareVersionPathAny {
	ps := &System_SoftwareVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SshServer (container): Top-level container for ssh server
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ssh-server"
//	Path from root:       "/system/ssh-server"
func (n *SystemPath) SshServer() *System_SshServerPath {
	ps := &System_SshServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SshServer (container): Top-level container for ssh server
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "ssh-server"
//	Path from root:       "/system/ssh-server"
func (n *SystemPathAny) SshServer() *System_SshServerPathAny {
	ps := &System_SshServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ssh-server"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TelnetServer (container): Top-level container for telnet terminal servers
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "telnet-server"
//	Path from root:       "/system/telnet-server"
func (n *SystemPath) TelnetServer() *System_TelnetServerPath {
	ps := &System_TelnetServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TelnetServer (container): Top-level container for telnet terminal servers
//
//	Defining module:      "openconfig-system-terminal"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "telnet-server"
//	Path from root:       "/system/telnet-server"
func (n *SystemPathAny) TelnetServer() *System_TelnetServerPathAny {
	ps := &System_TelnetServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"telnet-server"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UpTime (leaf): The amount of time since the network operating system was
// initialized.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/up-time"
//	Path from root:       "/system/state/up-time"
func (n *SystemPath) UpTime() *System_UpTimePath {
	ps := &System_UpTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpTime (leaf): The amount of time since the network operating system was
// initialized.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/up-time"
//	Path from root:       "/system/state/up-time"
func (n *SystemPathAny) UpTime() *System_UpTimePathAny {
	ps := &System_UpTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "up-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Utilization (container): System wide resource utilization configuration.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "utilization"
//	Path from root:       "/system/utilization"
func (n *SystemPath) Utilization() *System_UtilizationPath {
	ps := &System_UtilizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Utilization (container): System wide resource utilization configuration.
//
//	Defining module:      "openconfig-system-utilization"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "utilization"
//	Path from root:       "/system/utilization"
func (n *SystemPathAny) Utilization() *System_UtilizationPathAny {
	ps := &System_UtilizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *SystemPath) State() ygnmi.SingletonQuery[*oc.System] {
	return ygnmi.NewSingletonQuery[*oc.System](
		"System",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *SystemPathAny) State() ygnmi.WildcardQuery[*oc.System] {
	return ygnmi.NewWildcardQuery[*oc.System](
		"System",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *SystemPath) Config() ygnmi.ConfigQuery[*oc.System] {
	return ygnmi.NewConfigQuery[*oc.System](
		"System",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *SystemPathAny) Config() ygnmi.WildcardQuery[*oc.System] {
	return ygnmi.NewWildcardQuery[*oc.System](
		"System",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_AaaPath represents the /openconfig-system/system/aaa YANG schema element.
type System_AaaPath struct {
	*ygnmi.NodePath
}

// System_AaaPathAny represents the wildcard version of the /openconfig-system/system/aaa YANG schema element.
type System_AaaPathAny struct {
	*ygnmi.NodePath
}

// Accounting (container): Top-level container for AAA accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "accounting"
//	Path from root:       "/system/aaa/accounting"
func (n *System_AaaPath) Accounting() *System_Aaa_AccountingPath {
	ps := &System_Aaa_AccountingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Accounting (container): Top-level container for AAA accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "accounting"
//	Path from root:       "/system/aaa/accounting"
func (n *System_AaaPathAny) Accounting() *System_Aaa_AccountingPathAny {
	ps := &System_Aaa_AccountingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"accounting"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): Top-level container for global authentication data
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authentication"
//	Path from root:       "/system/aaa/authentication"
func (n *System_AaaPath) Authentication() *System_Aaa_AuthenticationPath {
	ps := &System_Aaa_AuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): Top-level container for global authentication data
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authentication"
//	Path from root:       "/system/aaa/authentication"
func (n *System_AaaPathAny) Authentication() *System_Aaa_AuthenticationPathAny {
	ps := &System_Aaa_AuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authorization"
//	Path from root:       "/system/aaa/authorization"
func (n *System_AaaPath) Authorization() *System_Aaa_AuthorizationPath {
	ps := &System_Aaa_AuthorizationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authorization (container): Top-level container for AAA authorization configuration
// and operational state data
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "authorization"
//	Path from root:       "/system/aaa/authorization"
func (n *System_AaaPathAny) Authorization() *System_Aaa_AuthorizationPathAny {
	ps := &System_Aaa_AuthorizationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authorization"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
func (n *System_AaaPath) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	ps := &System_Aaa_ServerGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ServerGroupAny (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
func (n *System_AaaPathAny) ServerGroupAny() *System_Aaa_ServerGroupPathAny {
	ps := &System_Aaa_ServerGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
//
//	Name: string
func (n *System_AaaPath) ServerGroup(Name string) *System_Aaa_ServerGroupPath {
	ps := &System_Aaa_ServerGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ServerGroup (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
//
//	Name: string
func (n *System_AaaPathAny) ServerGroup(Name string) *System_Aaa_ServerGroupPathAny {
	ps := &System_Aaa_ServerGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups", "server-group"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// ServerGroupMap (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
func (n *System_AaaPath) ServerGroupMap() *System_Aaa_ServerGroupPathMap {
	ps := &System_Aaa_ServerGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerGroupMap (list): List of AAA server groups.  All servers in a group
// must have the same type as indicated by the server
// type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "server-groups/server-group"
//	Path from root:       "/system/aaa/server-groups/server-group"
func (n *System_AaaPathAny) ServerGroupMap() *System_Aaa_ServerGroupPathMapAny {
	ps := &System_Aaa_ServerGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"server-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AaaPath) State() ygnmi.SingletonQuery[*oc.System_Aaa] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa](
		"System_Aaa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_AaaPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa](
		"System_Aaa",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_AaaPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa](
		"System_Aaa",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_AaaPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa](
		"System_Aaa",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_AccountingMethodPath represents the /openconfig-system/system/aaa/accounting/state/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Accounting_AccountingMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/state/accounting-method YANG schema element.
type System_Aaa_Accounting_AccountingMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/accounting-method"
//	Path from root:       "/system/aaa/accounting/state/accounting-method"
func (n *System_Aaa_Accounting_AccountingMethodPath) State() ygnmi.SingletonQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union] {
	return ygnmi.NewSingletonQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union](
		"System_Aaa_Accounting",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accounting-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Accounting_AccountingMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).AccountingMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/accounting-method"
//	Path from root:       "/system/aaa/accounting/state/accounting-method"
func (n *System_Aaa_Accounting_AccountingMethodPathAny) State() ygnmi.WildcardQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union](
		"System_Aaa_Accounting",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "accounting-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Accounting_AccountingMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).AccountingMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/accounting-method"
//	Path from root:       "/system/aaa/accounting/config/accounting-method"
func (n *System_Aaa_Accounting_AccountingMethodPath) Config() ygnmi.ConfigQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union] {
	return ygnmi.NewConfigQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union](
		"System_Aaa_Accounting",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accounting-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Accounting_AccountingMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).AccountingMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/accounting-method"
//	Path from root:       "/system/aaa/accounting/config/accounting-method"
func (n *System_Aaa_Accounting_AccountingMethodPathAny) Config() ygnmi.WildcardQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Accounting_AccountingMethod_Union](
		"System_Aaa_Accounting",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "accounting-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Accounting_AccountingMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).AccountingMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_AccountingPath represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPath struct {
	*ygnmi.NodePath
}

// System_Aaa_AccountingPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_AccountingPathAny struct {
	*ygnmi.NodePath
}

// AccountingMethod (leaf-list): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/accounting-method"
//	Path from root:       "/system/aaa/accounting/*/accounting-method"
func (n *System_Aaa_AccountingPath) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPath {
	ps := &System_Aaa_Accounting_AccountingMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accounting-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccountingMethod (leaf-list): An ordered list of methods used for AAA accounting for this
// event type.  The method is defined by the destination for
// accounting data, which may be specified as the group of
// all TACACS+/RADIUS servers, a defined server group, or
// the local system.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/accounting-method"
//	Path from root:       "/system/aaa/accounting/*/accounting-method"
func (n *System_Aaa_AccountingPathAny) AccountingMethod() *System_Aaa_Accounting_AccountingMethodPathAny {
	ps := &System_Aaa_Accounting_AccountingMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "accounting-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Acctz (container): A collection of counters regarding the creation of gNSI.acctz records.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "acctz"
//	Path from root:       "/system/aaa/accounting/acctz"
func (n *System_Aaa_AccountingPath) Acctz() *System_Aaa_Accounting_AcctzPath {
	ps := &System_Aaa_Accounting_AcctzPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"acctz"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Acctz (container): A collection of counters regarding the creation of gNSI.acctz records.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "acctz"
//	Path from root:       "/system/aaa/accounting/acctz"
func (n *System_Aaa_AccountingPathAny) Acctz() *System_Aaa_Accounting_AcctzPathAny {
	ps := &System_Aaa_Accounting_AcctzPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"acctz"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EventAny (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
func (n *System_Aaa_AccountingPath) EventAny() *System_Aaa_Accounting_EventPathAny {
	ps := &System_Aaa_Accounting_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
	return ps
}

// EventAny (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
func (n *System_Aaa_AccountingPathAny) EventAny() *System_Aaa_Accounting_EventPathAny {
	ps := &System_Aaa_Accounting_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
	return ps
}

// Event (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
//
//	EventType: oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPath) Event(EventType oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPath {
	ps := &System_Aaa_Accounting_EventPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
	return ps
}

// Event (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
//
//	EventType: oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE
func (n *System_Aaa_AccountingPathAny) Event(EventType oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_EventPathAny {
	ps := &System_Aaa_Accounting_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
	return ps
}

// EventMap (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
func (n *System_Aaa_AccountingPath) EventMap() *System_Aaa_Accounting_EventPathMap {
	ps := &System_Aaa_Accounting_EventPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"events"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EventMap (list): List of events subject to accounting
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/accounting/events/event"
func (n *System_Aaa_AccountingPathAny) EventMap() *System_Aaa_Accounting_EventPathMapAny {
	ps := &System_Aaa_Accounting_EventPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AccountingPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Accounting] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Accounting](
		"System_Aaa_Accounting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AccountingPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting](
		"System_Aaa_Accounting",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AccountingPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Accounting] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Accounting](
		"System_Aaa_Accounting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AccountingPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting](
		"System_Aaa_Accounting",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_AcctzPath represents the /openconfig-system/system/aaa/accounting/acctz YANG schema element.
type System_Aaa_Accounting_AcctzPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_AcctzPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/acctz YANG schema element.
type System_Aaa_Accounting_AcctzPathAny struct {
	*ygnmi.NodePath
}

// SourceRecordAny (list): A collection of counters for each service request type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "source-records/source-record"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record"
func (n *System_Aaa_Accounting_AcctzPath) SourceRecordAny() *System_Aaa_Accounting_Acctz_SourceRecordPathAny {
	ps := &System_Aaa_Accounting_Acctz_SourceRecordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"source-records", "source-record"},
			map[string]interface{}{"service": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// SourceRecordAny (list): A collection of counters for each service request type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "source-records/source-record"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record"
func (n *System_Aaa_Accounting_AcctzPathAny) SourceRecordAny() *System_Aaa_Accounting_Acctz_SourceRecordPathAny {
	ps := &System_Aaa_Accounting_Acctz_SourceRecordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"source-records", "source-record"},
			map[string]interface{}{"service": "*", "type": "*"},
			n,
		),
	}
	return ps
}

// WithService sets System_Aaa_Accounting_Acctz_SourceRecordPathAny's key "service" to the specified value.
// Service: oc.E_GnsiAcctz_ServiceRequest
func (n *System_Aaa_Accounting_Acctz_SourceRecordPathAny) WithService(Service oc.E_GnsiAcctz_ServiceRequest) *System_Aaa_Accounting_Acctz_SourceRecordPathAny {
	ygnmi.ModifyKey(n.NodePath, "service", Service)
	return n
}

// WithType sets System_Aaa_Accounting_Acctz_SourceRecordPathAny's key "type" to the specified value.
// Type: [oc.E_GnsiAcctz_CmdService, oc.E_GnsiAcctz_GrpcService]
func (n *System_Aaa_Accounting_Acctz_SourceRecordPathAny) WithType(Type oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union) *System_Aaa_Accounting_Acctz_SourceRecordPathAny {
	ygnmi.ModifyKey(n.NodePath, "type", Type)
	return n
}

// SourceRecord (list): A collection of counters for each service request type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "source-records/source-record"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record"
//
//	Service: oc.E_GnsiAcctz_ServiceRequest
//	Type: [oc.E_GnsiAcctz_CmdService, oc.E_GnsiAcctz_GrpcService]
func (n *System_Aaa_Accounting_AcctzPath) SourceRecord(Service oc.E_GnsiAcctz_ServiceRequest, Type oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union) *System_Aaa_Accounting_Acctz_SourceRecordPath {
	ps := &System_Aaa_Accounting_Acctz_SourceRecordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"source-records", "source-record"},
			map[string]interface{}{"service": Service, "type": Type},
			n,
		),
	}
	return ps
}

// SourceRecord (list): A collection of counters for each service request type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "source-records/source-record"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record"
//
//	Service: oc.E_GnsiAcctz_ServiceRequest
//	Type: [oc.E_GnsiAcctz_CmdService, oc.E_GnsiAcctz_GrpcService]
func (n *System_Aaa_Accounting_AcctzPathAny) SourceRecord(Service oc.E_GnsiAcctz_ServiceRequest, Type oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union) *System_Aaa_Accounting_Acctz_SourceRecordPathAny {
	ps := &System_Aaa_Accounting_Acctz_SourceRecordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"source-records", "source-record"},
			map[string]interface{}{"service": Service, "type": Type},
			n,
		),
	}
	return ps
}

// SourceRecordMap (list): A collection of counters for each service request type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "source-records/source-record"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record"
func (n *System_Aaa_Accounting_AcctzPath) SourceRecordMap() *System_Aaa_Accounting_Acctz_SourceRecordPathMap {
	ps := &System_Aaa_Accounting_Acctz_SourceRecordPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"source-records"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SourceRecordMap (list): A collection of counters for each service request type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "source-records/source-record"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record"
func (n *System_Aaa_Accounting_AcctzPathAny) SourceRecordMap() *System_Aaa_Accounting_Acctz_SourceRecordPathMapAny {
	ps := &System_Aaa_Accounting_Acctz_SourceRecordPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"source-records"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_AcctzPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Accounting_Acctz] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Accounting_Acctz](
		"System_Aaa_Accounting_Acctz",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_AcctzPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting_Acctz] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting_Acctz](
		"System_Aaa_Accounting_Acctz",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_Acctz_SourceRecord_ServicePath represents the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record/state/service YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord_ServicePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Accounting_Acctz_SourceRecord_ServicePathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record/state/service YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord_ServicePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "state/service"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/service"
func (n *System_Aaa_Accounting_Acctz_SourceRecord_ServicePath) State() ygnmi.SingletonQuery[oc.E_GnsiAcctz_ServiceRequest] {
	return ygnmi.NewSingletonQuery[oc.E_GnsiAcctz_ServiceRequest](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_GnsiAcctz_ServiceRequest, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "state/service"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/service"
func (n *System_Aaa_Accounting_Acctz_SourceRecord_ServicePathAny) State() ygnmi.WildcardQuery[oc.E_GnsiAcctz_ServiceRequest] {
	return ygnmi.NewWildcardQuery[oc.E_GnsiAcctz_ServiceRequest](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_GnsiAcctz_ServiceRequest, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "service"
//	Path from root:       ""
func (n *System_Aaa_Accounting_Acctz_SourceRecord_ServicePath) Config() ygnmi.ConfigQuery[oc.E_GnsiAcctz_ServiceRequest] {
	return ygnmi.NewConfigQuery[oc.E_GnsiAcctz_ServiceRequest](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_GnsiAcctz_ServiceRequest, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "service"
//	Path from root:       ""
func (n *System_Aaa_Accounting_Acctz_SourceRecord_ServicePathAny) Config() ygnmi.WildcardQuery[oc.E_GnsiAcctz_ServiceRequest] {
	return ygnmi.NewWildcardQuery[oc.E_GnsiAcctz_ServiceRequest](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"service"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_GnsiAcctz_ServiceRequest, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord).Service
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_Acctz_SourceRecord_TypePath represents the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record/state/type YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Accounting_Acctz_SourceRecord_TypePathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record/state/type YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "state/type"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/type"
func (n *System_Aaa_Accounting_Acctz_SourceRecord_TypePath) State() ygnmi.SingletonQuery[oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union] {
	return ygnmi.NewSingletonQuery[oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "state/type"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/type"
func (n *System_Aaa_Accounting_Acctz_SourceRecord_TypePathAny) State() ygnmi.WildcardQuery[oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *System_Aaa_Accounting_Acctz_SourceRecord_TypePath) Config() ygnmi.ConfigQuery[oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union] {
	return ygnmi.NewConfigQuery[oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "type"
//	Path from root:       ""
func (n *System_Aaa_Accounting_Acctz_SourceRecord_TypePathAny) Config() ygnmi.WildcardQuery[oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Accounting_Acctz_SourceRecord_Type_Union, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_Acctz_SourceRecordPath represents the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecordPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_Acctz_SourceRecordPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecordPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_Acctz_SourceRecordPathMap represents the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecordPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_Acctz_SourceRecordPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecordPathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): A collection of counters for gNSI.acctz record production per
// service-type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/counters"
func (n *System_Aaa_Accounting_Acctz_SourceRecordPath) Counters() *System_Aaa_Accounting_Acctz_SourceRecord_CountersPath {
	ps := &System_Aaa_Accounting_Acctz_SourceRecord_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): A collection of counters for gNSI.acctz record production per
// service-type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/counters"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/counters"
func (n *System_Aaa_Accounting_Acctz_SourceRecordPathAny) Counters() *System_Aaa_Accounting_Acctz_SourceRecord_CountersPathAny {
	ps := &System_Aaa_Accounting_Acctz_SourceRecord_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Service (leaf): service request type for the gNSI.acctz record.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/service"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/*/service"
func (n *System_Aaa_Accounting_Acctz_SourceRecordPath) Service() *System_Aaa_Accounting_Acctz_SourceRecord_ServicePath {
	ps := &System_Aaa_Accounting_Acctz_SourceRecord_ServicePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Service (leaf): service request type for the gNSI.acctz record.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/service"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/*/service"
func (n *System_Aaa_Accounting_Acctz_SourceRecordPathAny) Service() *System_Aaa_Accounting_Acctz_SourceRecord_ServicePathAny {
	ps := &System_Aaa_Accounting_Acctz_SourceRecord_ServicePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): service request application enum for the gNSI.acctz record.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/type"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/*/type"
func (n *System_Aaa_Accounting_Acctz_SourceRecordPath) Type() *System_Aaa_Accounting_Acctz_SourceRecord_TypePath {
	ps := &System_Aaa_Accounting_Acctz_SourceRecord_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): service request application enum for the gNSI.acctz record.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/type"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/*/type"
func (n *System_Aaa_Accounting_Acctz_SourceRecordPathAny) Type() *System_Aaa_Accounting_Acctz_SourceRecord_TypePathAny {
	ps := &System_Aaa_Accounting_Acctz_SourceRecord_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_Acctz_SourceRecordPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Accounting_Acctz_SourceRecord] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Accounting_Acctz_SourceRecord](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_Acctz_SourceRecordPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting_Acctz_SourceRecord] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting_Acctz_SourceRecord](
		"System_Aaa_Accounting_Acctz_SourceRecord",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_Acctz_SourceRecordPathMap) State() ygnmi.SingletonQuery[map[oc.System_Aaa_Accounting_Acctz_SourceRecord_Key]*oc.System_Aaa_Accounting_Acctz_SourceRecord] {
	return ygnmi.NewSingletonQuery[map[oc.System_Aaa_Accounting_Acctz_SourceRecord_Key]*oc.System_Aaa_Accounting_Acctz_SourceRecord](
		"System_Aaa_Accounting_Acctz",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Aaa_Accounting_Acctz_SourceRecord_Key]*oc.System_Aaa_Accounting_Acctz_SourceRecord, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz).SourceRecord
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-gnsi-acctz:source-records"},
			PostRelPath: []string{"openconfig-gnsi-acctz:source-record"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_Acctz_SourceRecordPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Aaa_Accounting_Acctz_SourceRecord_Key]*oc.System_Aaa_Accounting_Acctz_SourceRecord] {
	return ygnmi.NewWildcardQuery[map[oc.System_Aaa_Accounting_Acctz_SourceRecord_Key]*oc.System_Aaa_Accounting_Acctz_SourceRecord](
		"System_Aaa_Accounting_Acctz",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Aaa_Accounting_Acctz_SourceRecord_Key]*oc.System_Aaa_Accounting_Acctz_SourceRecord, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz).SourceRecord
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-gnsi-acctz:source-records"},
			PostRelPath: []string{"openconfig-gnsi-acctz:source-record"},
		},
	)
}

// System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPath represents the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record/state/counters/records YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record/state/counters/records YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "records"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/counters/records"
func (n *System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Accounting_Acctz_SourceRecord_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"records"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord_Counters).Records
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-gnsi-acctz"
//	Path from parent:     "records"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/counters/records"
func (n *System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Accounting_Acctz_SourceRecord_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"records"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Acctz_SourceRecord_Counters).Records
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Acctz_SourceRecord_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_Acctz_SourceRecord_CountersPath represents the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record/state/counters YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord_CountersPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_Acctz_SourceRecord_CountersPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/acctz/source-records/source-record/state/counters YANG schema element.
type System_Aaa_Accounting_Acctz_SourceRecord_CountersPathAny struct {
	*ygnmi.NodePath
}

// Records (leaf): The total number of records produced for the service-type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "records"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/counters/records"
func (n *System_Aaa_Accounting_Acctz_SourceRecord_CountersPath) Records() *System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPath {
	ps := &System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"records"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Records (leaf): The total number of records produced for the service-type.
//
//	Defining module:      "openconfig-gnsi-acctz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "records"
//	Path from root:       "/system/aaa/accounting/acctz/source-records/source-record/state/counters/records"
func (n *System_Aaa_Accounting_Acctz_SourceRecord_CountersPathAny) Records() *System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPathAny {
	ps := &System_Aaa_Accounting_Acctz_SourceRecord_Counters_RecordsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"records"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_Acctz_SourceRecord_CountersPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Accounting_Acctz_SourceRecord_Counters] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Accounting_Acctz_SourceRecord_Counters](
		"System_Aaa_Accounting_Acctz_SourceRecord_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_Acctz_SourceRecord_CountersPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting_Acctz_SourceRecord_Counters] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting_Acctz_SourceRecord_Counters](
		"System_Aaa_Accounting_Acctz_SourceRecord_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_Event_EventTypePath represents the /openconfig-system/system/aaa/accounting/events/event/state/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Accounting_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/state/event-type YANG schema element.
type System_Aaa_Accounting_Event_EventTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/state/event-type"
func (n *System_Aaa_Accounting_Event_EventTypePath) State() ygnmi.SingletonQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE](
		"System_Aaa_Accounting_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/state/event-type"
func (n *System_Aaa_Accounting_Event_EventTypePathAny) State() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE](
		"System_Aaa_Accounting_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/config/event-type"
func (n *System_Aaa_Accounting_Event_EventTypePath) Config() ygnmi.ConfigQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE](
		"System_Aaa_Accounting_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/config/event-type"
func (n *System_Aaa_Accounting_Event_EventTypePathAny) Config() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE](
		"System_Aaa_Accounting_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_Event_RecordPath represents the /openconfig-system/system/aaa/accounting/events/event/state/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Accounting_Event_RecordPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event/state/record YANG schema element.
type System_Aaa_Accounting_Event_RecordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/record"
//	Path from root:       "/system/aaa/accounting/events/event/state/record"
func (n *System_Aaa_Accounting_Event_RecordPath) State() ygnmi.SingletonQuery[oc.E_Event_Record] {
	return ygnmi.NewSingletonQuery[oc.E_Event_Record](
		"System_Aaa_Accounting_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "record"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Event_Record, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).Record
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/record"
//	Path from root:       "/system/aaa/accounting/events/event/state/record"
func (n *System_Aaa_Accounting_Event_RecordPathAny) State() ygnmi.WildcardQuery[oc.E_Event_Record] {
	return ygnmi.NewWildcardQuery[oc.E_Event_Record](
		"System_Aaa_Accounting_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "record"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Event_Record, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).Record
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/record"
//	Path from root:       "/system/aaa/accounting/events/event/config/record"
func (n *System_Aaa_Accounting_Event_RecordPath) Config() ygnmi.ConfigQuery[oc.E_Event_Record] {
	return ygnmi.NewConfigQuery[oc.E_Event_Record](
		"System_Aaa_Accounting_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "record"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Event_Record, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).Record
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/record"
//	Path from root:       "/system/aaa/accounting/events/event/config/record"
func (n *System_Aaa_Accounting_Event_RecordPathAny) Config() ygnmi.WildcardQuery[oc.E_Event_Record] {
	return ygnmi.NewWildcardQuery[oc.E_Event_Record](
		"System_Aaa_Accounting_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "record"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Event_Record, bool) {
			ret := gs.(*oc.System_Aaa_Accounting_Event).Record
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Accounting_EventPath represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_EventPathAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_EventPathMap represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_Accounting_EventPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_EventPathMapAny struct {
	*ygnmi.NodePath
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/*/event-type"
func (n *System_Aaa_Accounting_EventPath) EventType() *System_Aaa_Accounting_Event_EventTypePath {
	ps := &System_Aaa_Accounting_Event_EventTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "event-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EventType (leaf): The type of activity to record at the AAA accounting
// server
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/event-type"
//	Path from root:       "/system/aaa/accounting/events/event/*/event-type"
func (n *System_Aaa_Accounting_EventPathAny) EventType() *System_Aaa_Accounting_Event_EventTypePathAny {
	ps := &System_Aaa_Accounting_Event_EventTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "event-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/record"
//	Path from root:       "/system/aaa/accounting/events/event/*/record"
func (n *System_Aaa_Accounting_EventPath) Record() *System_Aaa_Accounting_Event_RecordPath {
	ps := &System_Aaa_Accounting_Event_RecordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "record"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Record (leaf): Type of record to send to the accounting server for this
// activity type
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/record"
//	Path from root:       "/system/aaa/accounting/events/event/*/record"
func (n *System_Aaa_Accounting_EventPathAny) Record() *System_Aaa_Accounting_Event_RecordPathAny {
	ps := &System_Aaa_Accounting_Event_RecordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "record"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting_Event",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting_Event",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting_Event",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting_Event",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathMap) State() ygnmi.SingletonQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewSingletonQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewWildcardQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathMap) Config() ygnmi.ConfigQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewConfigQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Accounting_EventPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event] {
	return ygnmi.NewWildcardQuery[map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event](
		"System_Aaa_Accounting",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*oc.System_Aaa_Accounting_Event, bool) {
			ret := gs.(*oc.System_Aaa_Accounting).Event
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Accounting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:events"},
			PostRelPath: []string{"openconfig-system:event"},
		},
	)
}

// System_Aaa_Authentication_AuthenticationMethodPath represents the /openconfig-system/system/aaa/authentication/state/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AuthenticationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/state/authentication-method YANG schema element.
type System_Aaa_Authentication_AuthenticationMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authentication-method"
//	Path from root:       "/system/aaa/authentication/state/authentication-method"
func (n *System_Aaa_Authentication_AuthenticationMethodPath) State() ygnmi.SingletonQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union] {
	return ygnmi.NewSingletonQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union](
		"System_Aaa_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authentication_AuthenticationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).AuthenticationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authentication-method"
//	Path from root:       "/system/aaa/authentication/state/authentication-method"
func (n *System_Aaa_Authentication_AuthenticationMethodPathAny) State() ygnmi.WildcardQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union](
		"System_Aaa_Authentication",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authentication_AuthenticationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).AuthenticationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/authentication-method"
//	Path from root:       "/system/aaa/authentication/config/authentication-method"
func (n *System_Aaa_Authentication_AuthenticationMethodPath) Config() ygnmi.ConfigQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union] {
	return ygnmi.NewConfigQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union](
		"System_Aaa_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authentication_AuthenticationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).AuthenticationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/authentication-method"
//	Path from root:       "/system/aaa/authentication/config/authentication-method"
func (n *System_Aaa_Authentication_AuthenticationMethodPathAny) Config() ygnmi.WildcardQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Authentication_AuthenticationMethod_Union](
		"System_Aaa_Authentication",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authentication_AuthenticationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).AuthenticationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_AuthenticationPath represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPath struct {
	*ygnmi.NodePath
}

// System_Aaa_AuthenticationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_AuthenticationPathAny struct {
	*ygnmi.NodePath
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "admin-user"
//	Path from root:       "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPath) AdminUser() *System_Aaa_Authentication_AdminUserPath {
	ps := &System_Aaa_Authentication_AdminUserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminUser (container): Top-level container for the system root or admin user
// configuration and operational state
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "admin-user"
//	Path from root:       "/system/aaa/authentication/admin-user"
func (n *System_Aaa_AuthenticationPathAny) AdminUser() *System_Aaa_Authentication_AdminUserPathAny {
	ps := &System_Aaa_Authentication_AdminUserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-user"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AuthenticationMethod (leaf-list): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/authentication-method"
//	Path from root:       "/system/aaa/authentication/*/authentication-method"
func (n *System_Aaa_AuthenticationPath) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPath {
	ps := &System_Aaa_Authentication_AuthenticationMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationMethod (leaf-list): Ordered list of authentication methods for users.  This
// can be either a reference to a server group, or a well-
// defined designation in the AAA_METHOD_TYPE identity.  If
// authentication fails with one method, the next defined
// method is tried -- failure of all methods results in the
// user being denied access.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/authentication-method"
//	Path from root:       "/system/aaa/authentication/*/authentication-method"
func (n *System_Aaa_AuthenticationPathAny) AuthenticationMethod() *System_Aaa_Authentication_AuthenticationMethodPathAny {
	ps := &System_Aaa_Authentication_AuthenticationMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UserAny (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
func (n *System_Aaa_AuthenticationPath) UserAny() *System_Aaa_Authentication_UserPathAny {
	ps := &System_Aaa_Authentication_UserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
	return ps
}

// UserAny (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
func (n *System_Aaa_AuthenticationPathAny) UserAny() *System_Aaa_Authentication_UserPathAny {
	ps := &System_Aaa_Authentication_UserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": "*"},
			n,
		),
	}
	return ps
}

// User (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
//
//	Username: string
func (n *System_Aaa_AuthenticationPath) User(Username string) *System_Aaa_Authentication_UserPath {
	ps := &System_Aaa_Authentication_UserPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
	return ps
}

// User (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
//
//	Username: string
func (n *System_Aaa_AuthenticationPathAny) User(Username string) *System_Aaa_Authentication_UserPathAny {
	ps := &System_Aaa_Authentication_UserPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"users", "user"},
			map[string]interface{}{"username": Username},
			n,
		),
	}
	return ps
}

// UserMap (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
func (n *System_Aaa_AuthenticationPath) UserMap() *System_Aaa_Authentication_UserPathMap {
	ps := &System_Aaa_Authentication_UserPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"users"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UserMap (list): List of local users on the system
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "users/user"
//	Path from root:       "/system/aaa/authentication/users/user"
func (n *System_Aaa_AuthenticationPathAny) UserMap() *System_Aaa_Authentication_UserPathMapAny {
	ps := &System_Aaa_Authentication_UserPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"users"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthenticationPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authentication] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authentication](
		"System_Aaa_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthenticationPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication](
		"System_Aaa_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthenticationPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authentication] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authentication](
		"System_Aaa_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthenticationPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication](
		"System_Aaa_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AdminPasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-password"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-password"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/config/admin-password"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/config/admin-password"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPassword
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-password-hashed YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/config/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/config/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminPasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AdminUsernamePath represents the /openconfig-system/system/aaa/authentication/admin-user/state/admin-username YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminUsernamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AdminUsernamePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/admin-username YANG schema element.
type System_Aaa_Authentication_AdminUser_AdminUsernamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-username"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUser_AdminUsernamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminUsername
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-username"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUser_AdminUsernamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AdminUsername
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/authorized-keys-list-created-on YANG schema element.
type System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/authorized-keys-list-created-on YANG schema element.
type System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AuthorizedKeysListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AuthorizedKeysListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/authorized-keys-list-version YANG schema element.
type System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/authorized-keys-list-version YANG schema element.
type System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AuthorizedKeysListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AuthorizedKeysListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/authorized-principals-list-created-on YANG schema element.
type System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/authorized-principals-list-created-on YANG schema element.
type System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-principals-list-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-principals-list-created-on"
func (n *System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AuthorizedPrincipalsListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-principals-list-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-principals-list-created-on"
func (n *System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AuthorizedPrincipalsListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/authorized-principals-list-version YANG schema element.
type System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/authorized-principals-list-version YANG schema element.
type System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-principals-list-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-principals-list-version"
func (n *System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AuthorizedPrincipalsListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-principals-list-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-principals-list-version"
func (n *System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).AuthorizedPrincipalsListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_PasswordCreatedOnPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/password-created-on YANG schema element.
type System_Aaa_Authentication_AdminUser_PasswordCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_PasswordCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/password-created-on YANG schema element.
type System_Aaa_Authentication_AdminUser_PasswordCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/password-created-on"
func (n *System_Aaa_Authentication_AdminUser_PasswordCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).PasswordCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/password-created-on"
func (n *System_Aaa_Authentication_AdminUser_PasswordCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).PasswordCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUser_PasswordVersionPath represents the /openconfig-system/system/aaa/authentication/admin-user/state/password-version YANG schema element.
type System_Aaa_Authentication_AdminUser_PasswordVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_AdminUser_PasswordVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user/state/password-version YANG schema element.
type System_Aaa_Authentication_AdminUser_PasswordVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/password-version"
func (n *System_Aaa_Authentication_AdminUser_PasswordVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).PasswordVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/password-version"
func (n *System_Aaa_Authentication_AdminUser_PasswordVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_AdminUser).PasswordVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_AdminUser) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_AdminUserPath represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Authentication_AdminUserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUserPathAny struct {
	*ygnmi.NodePath
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/*/admin-password"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPath {
	ps := &System_Aaa_Authentication_AdminUser_AdminPasswordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminPassword (leaf): The admin/root password, supplied as a cleartext string.
// The system should hash and only store the password as a
// hashed value.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/admin-password"
//	Path from root:       "/system/aaa/authentication/admin-user/*/admin-password"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPassword() *System_Aaa_Authentication_AdminUser_AdminPasswordPathAny {
	ps := &System_Aaa_Authentication_AdminUser_AdminPasswordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/*/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPath) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath {
	ps := &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminPasswordHashed (leaf): The admin/root password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/admin-password-hashed"
//	Path from root:       "/system/aaa/authentication/admin-user/*/admin-password-hashed"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminPasswordHashed() *System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny {
	ps := &System_Aaa_Authentication_AdminUser_AdminPasswordHashedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-password-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminUsername (leaf): Name of the administrator user account, e.g., admin, root,
// etc.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-username"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUserPath) AdminUsername() *System_Aaa_Authentication_AdminUser_AdminUsernamePath {
	ps := &System_Aaa_Authentication_AdminUser_AdminUsernamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-username"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminUsername (leaf): Name of the administrator user account, e.g., admin, root,
// etc.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/admin-username"
//	Path from root:       "/system/aaa/authentication/admin-user/state/admin-username"
func (n *System_Aaa_Authentication_AdminUserPathAny) AdminUsername() *System_Aaa_Authentication_AdminUser_AdminUsernamePathAny {
	ps := &System_Aaa_Authentication_AdminUser_AdminUsernamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "admin-username"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized keys has been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_AdminUserPath) AuthorizedKeysListCreatedOn() *System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPath {
	ps := &System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized keys has been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_AdminUserPathAny) AuthorizedKeysListCreatedOn() *System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPathAny {
	ps := &System_Aaa_Authentication_AdminUser_AuthorizedKeysListCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListVersion (leaf): The version of the list of authorized keys that is currently
// associated with this system role.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_AdminUserPath) AuthorizedKeysListVersion() *System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPath {
	ps := &System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListVersion (leaf): The version of the list of authorized keys that is currently
// associated with this system role.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_AdminUserPathAny) AuthorizedKeysListVersion() *System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPathAny {
	ps := &System_Aaa_Authentication_AdminUser_AuthorizedKeysListVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedPrincipalsListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized principals has been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-principals-list-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-principals-list-created-on"
func (n *System_Aaa_Authentication_AdminUserPath) AuthorizedPrincipalsListCreatedOn() *System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPath {
	ps := &System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedPrincipalsListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized principals has been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-principals-list-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-principals-list-created-on"
func (n *System_Aaa_Authentication_AdminUserPathAny) AuthorizedPrincipalsListCreatedOn() *System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPathAny {
	ps := &System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedPrincipalsListVersion (leaf): The version of the list of authorized principals currently
// associated with this system role.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-principals-list-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-principals-list-version"
func (n *System_Aaa_Authentication_AdminUserPath) AuthorizedPrincipalsListVersion() *System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPath {
	ps := &System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedPrincipalsListVersion (leaf): The version of the list of authorized principals currently
// associated with this system role.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-principals-list-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/authorized-principals-list-version"
func (n *System_Aaa_Authentication_AdminUserPathAny) AuthorizedPrincipalsListVersion() *System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPathAny {
	ps := &System_Aaa_Authentication_AdminUser_AuthorizedPrincipalsListVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordCreatedOn (leaf): The timestamp of the moment the currently used password has
// been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/password-created-on"
func (n *System_Aaa_Authentication_AdminUserPath) PasswordCreatedOn() *System_Aaa_Authentication_AdminUser_PasswordCreatedOnPath {
	ps := &System_Aaa_Authentication_AdminUser_PasswordCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordCreatedOn (leaf): The timestamp of the moment the currently used password has
// been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/admin-user/state/password-created-on"
func (n *System_Aaa_Authentication_AdminUserPathAny) PasswordCreatedOn() *System_Aaa_Authentication_AdminUser_PasswordCreatedOnPathAny {
	ps := &System_Aaa_Authentication_AdminUser_PasswordCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordVersion (leaf): The version of the password that is currently used to
// authenticate this user account.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/password-version"
func (n *System_Aaa_Authentication_AdminUserPath) PasswordVersion() *System_Aaa_Authentication_AdminUser_PasswordVersionPath {
	ps := &System_Aaa_Authentication_AdminUser_PasswordVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordVersion (leaf): The version of the password that is currently used to
// authenticate this user account.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/admin-user/state/password-version"
func (n *System_Aaa_Authentication_AdminUserPathAny) PasswordVersion() *System_Aaa_Authentication_AdminUser_PasswordVersionPathAny {
	ps := &System_Aaa_Authentication_AdminUser_PasswordVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_AdminUserPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authentication_AdminUser] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authentication_AdminUser](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_AdminUserPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication_AdminUser] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication_AdminUser](
		"System_Aaa_Authentication_AdminUser",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_AdminUserPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authentication_AdminUser] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authentication_AdminUser](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_AdminUserPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication_AdminUser] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication_AdminUser](
		"System_Aaa_Authentication_AdminUser",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath represents the /openconfig-system/system/aaa/authentication/users/user/state/authorized-keys-list-created-on YANG schema element.
type System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/authorized-keys-list-created-on YANG schema element.
type System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedKeysListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedKeysListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_AuthorizedKeysListVersionPath represents the /openconfig-system/system/aaa/authentication/users/user/state/authorized-keys-list-version YANG schema element.
type System_Aaa_Authentication_User_AuthorizedKeysListVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/authorized-keys-list-version YANG schema element.
type System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_User_AuthorizedKeysListVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedKeysListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedKeysListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPath represents the /openconfig-system/system/aaa/authentication/users/user/state/authorized-principals-list-created-on YANG schema element.
type System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/authorized-principals-list-created-on YANG schema element.
type System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-principals-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-principals-list-created-on"
func (n *System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedPrincipalsListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-principals-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-principals-list-created-on"
func (n *System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedPrincipalsListCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPath represents the /openconfig-system/system/aaa/authentication/users/user/state/authorized-principals-list-version YANG schema element.
type System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/authorized-principals-list-version YANG schema element.
type System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-principals-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-principals-list-version"
func (n *System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedPrincipalsListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/authorized-principals-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-principals-list-version"
func (n *System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).AuthorizedPrincipalsListVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_PasswordPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_PasswordPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password YANG schema element.
type System_Aaa_Authentication_User_PasswordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password"
//	Path from root:       "/system/aaa/authentication/users/user/state/password"
func (n *System_Aaa_Authentication_User_PasswordPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Password
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password"
//	Path from root:       "/system/aaa/authentication/users/user/state/password"
func (n *System_Aaa_Authentication_User_PasswordPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Password
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/password"
//	Path from root:       "/system/aaa/authentication/users/user/config/password"
func (n *System_Aaa_Authentication_User_PasswordPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Password
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/password"
//	Path from root:       "/system/aaa/authentication/users/user/config/password"
func (n *System_Aaa_Authentication_User_PasswordPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "password"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Password
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_PasswordCreatedOnPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password-created-on YANG schema element.
type System_Aaa_Authentication_User_PasswordCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_PasswordCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password-created-on YANG schema element.
type System_Aaa_Authentication_User_PasswordCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-created-on"
func (n *System_Aaa_Authentication_User_PasswordCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-created-on"
func (n *System_Aaa_Authentication_User_PasswordCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_PasswordHashedPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_PasswordHashedPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password-hashed YANG schema element.
type System_Aaa_Authentication_User_PasswordHashedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-hashed"
func (n *System_Aaa_Authentication_User_PasswordHashedPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-hashed"
func (n *System_Aaa_Authentication_User_PasswordHashedPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/config/password-hashed"
func (n *System_Aaa_Authentication_User_PasswordHashedPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/config/password-hashed"
func (n *System_Aaa_Authentication_User_PasswordHashedPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "password-hashed"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordHashed
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_PasswordVersionPath represents the /openconfig-system/system/aaa/authentication/users/user/state/password-version YANG schema element.
type System_Aaa_Authentication_User_PasswordVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_PasswordVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/password-version YANG schema element.
type System_Aaa_Authentication_User_PasswordVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-version"
func (n *System_Aaa_Authentication_User_PasswordVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-gnsi-credentialz"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-version"
func (n *System_Aaa_Authentication_User_PasswordVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).PasswordVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_RolePath represents the /openconfig-system/system/aaa/authentication/users/user/state/role YANG schema element.
type System_Aaa_Authentication_User_RolePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_RolePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/role YANG schema element.
type System_Aaa_Authentication_User_RolePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/role"
//	Path from root:       "/system/aaa/authentication/users/user/state/role"
func (n *System_Aaa_Authentication_User_RolePath) State() ygnmi.SingletonQuery[oc.System_Aaa_Authentication_User_Role_Union] {
	return ygnmi.NewSingletonQuery[oc.System_Aaa_Authentication_User_Role_Union](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Authentication_User_Role_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/role"
//	Path from root:       "/system/aaa/authentication/users/user/state/role"
func (n *System_Aaa_Authentication_User_RolePathAny) State() ygnmi.WildcardQuery[oc.System_Aaa_Authentication_User_Role_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Aaa_Authentication_User_Role_Union](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Authentication_User_Role_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/role"
//	Path from root:       "/system/aaa/authentication/users/user/config/role"
func (n *System_Aaa_Authentication_User_RolePath) Config() ygnmi.ConfigQuery[oc.System_Aaa_Authentication_User_Role_Union] {
	return ygnmi.NewConfigQuery[oc.System_Aaa_Authentication_User_Role_Union](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Authentication_User_Role_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/role"
//	Path from root:       "/system/aaa/authentication/users/user/config/role"
func (n *System_Aaa_Authentication_User_RolePathAny) Config() ygnmi.WildcardQuery[oc.System_Aaa_Authentication_User_Role_Union] {
	return ygnmi.NewWildcardQuery[oc.System_Aaa_Authentication_User_Role_Union](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_Aaa_Authentication_User_Role_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_SshKeyPath represents the /openconfig-system/system/aaa/authentication/users/user/state/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_SshKeyPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/ssh-key YANG schema element.
type System_Aaa_Authentication_User_SshKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/state/ssh-key"
func (n *System_Aaa_Authentication_User_SshKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssh-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).SshKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/state/ssh-key"
func (n *System_Aaa_Authentication_User_SshKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssh-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).SshKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/config/ssh-key"
func (n *System_Aaa_Authentication_User_SshKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ssh-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).SshKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/config/ssh-key"
func (n *System_Aaa_Authentication_User_SshKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ssh-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).SshKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_User_UsernamePath represents the /openconfig-system/system/aaa/authentication/users/user/state/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authentication_User_UsernamePathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user/state/username YANG schema element.
type System_Aaa_Authentication_User_UsernamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/username"
//	Path from root:       "/system/aaa/authentication/users/user/state/username"
func (n *System_Aaa_Authentication_User_UsernamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Username
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/username"
//	Path from root:       "/system/aaa/authentication/users/user/state/username"
func (n *System_Aaa_Authentication_User_UsernamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Username
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/username"
//	Path from root:       "/system/aaa/authentication/users/user/config/username"
func (n *System_Aaa_Authentication_User_UsernamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Username
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/username"
//	Path from root:       "/system/aaa/authentication/users/user/config/username"
func (n *System_Aaa_Authentication_User_UsernamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authentication_User",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "username"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authentication_User).Username
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authentication_UserPath represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPath struct {
	*ygnmi.NodePath
}

// System_Aaa_Authentication_UserPathAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPathAny struct {
	*ygnmi.NodePath
}

// System_Aaa_Authentication_UserPathMap represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPathMap struct {
	*ygnmi.NodePath
}

// System_Aaa_Authentication_UserPathMapAny represents the wildcard version of the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_UserPathMapAny struct {
	*ygnmi.NodePath
}

// AuthorizedKeysListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized keys has been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_UserPath) AuthorizedKeysListCreatedOn() *System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath {
	ps := &System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized keys has been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-created-on"
func (n *System_Aaa_Authentication_UserPathAny) AuthorizedKeysListCreatedOn() *System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny {
	ps := &System_Aaa_Authentication_User_AuthorizedKeysListCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListVersion (leaf): The version of the list of authorized keys that is currently
// associated with this system role.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_UserPath) AuthorizedKeysListVersion() *System_Aaa_Authentication_User_AuthorizedKeysListVersionPath {
	ps := &System_Aaa_Authentication_User_AuthorizedKeysListVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedKeysListVersion (leaf): The version of the list of authorized keys that is currently
// associated with this system role.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-keys-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-keys-list-version"
func (n *System_Aaa_Authentication_UserPathAny) AuthorizedKeysListVersion() *System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny {
	ps := &System_Aaa_Authentication_User_AuthorizedKeysListVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-keys-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedPrincipalsListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized principals has been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-principals-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-principals-list-created-on"
func (n *System_Aaa_Authentication_UserPath) AuthorizedPrincipalsListCreatedOn() *System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPath {
	ps := &System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedPrincipalsListCreatedOn (leaf): The timestamp of the moment the currently used list of
// authorized principals has been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-principals-list-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-principals-list-created-on"
func (n *System_Aaa_Authentication_UserPathAny) AuthorizedPrincipalsListCreatedOn() *System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPathAny {
	ps := &System_Aaa_Authentication_User_AuthorizedPrincipalsListCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedPrincipalsListVersion (leaf): The version of the list of authorized principals currently
// associated with this system role.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-principals-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-principals-list-version"
func (n *System_Aaa_Authentication_UserPath) AuthorizedPrincipalsListVersion() *System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPath {
	ps := &System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizedPrincipalsListVersion (leaf): The version of the list of authorized principals currently
// associated with this system role.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorized-principals-list-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/authorized-principals-list-version"
func (n *System_Aaa_Authentication_UserPathAny) AuthorizedPrincipalsListVersion() *System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPathAny {
	ps := &System_Aaa_Authentication_User_AuthorizedPrincipalsListVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "authorized-principals-list-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/password"
//	Path from root:       "/system/aaa/authentication/users/user/*/password"
func (n *System_Aaa_Authentication_UserPath) Password() *System_Aaa_Authentication_User_PasswordPath {
	ps := &System_Aaa_Authentication_User_PasswordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Password (leaf): The user password, supplied as cleartext.  The system
// must hash the value and only store the hashed value.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/password"
//	Path from root:       "/system/aaa/authentication/users/user/*/password"
func (n *System_Aaa_Authentication_UserPathAny) Password() *System_Aaa_Authentication_User_PasswordPathAny {
	ps := &System_Aaa_Authentication_User_PasswordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "password"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordCreatedOn (leaf): The timestamp of the moment the currently used password has
// been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-created-on"
func (n *System_Aaa_Authentication_UserPath) PasswordCreatedOn() *System_Aaa_Authentication_User_PasswordCreatedOnPath {
	ps := &System_Aaa_Authentication_User_PasswordCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordCreatedOn (leaf): The timestamp of the moment the currently used password has
// been created.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-created-on"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-created-on"
func (n *System_Aaa_Authentication_UserPathAny) PasswordCreatedOn() *System_Aaa_Authentication_User_PasswordCreatedOnPathAny {
	ps := &System_Aaa_Authentication_User_PasswordCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/*/password-hashed"
func (n *System_Aaa_Authentication_UserPath) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPath {
	ps := &System_Aaa_Authentication_User_PasswordHashedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "password-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordHashed (leaf): The user password, supplied as a hashed value
// using the notation described in the definition of the
// crypt-password-type.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/password-hashed"
//	Path from root:       "/system/aaa/authentication/users/user/*/password-hashed"
func (n *System_Aaa_Authentication_UserPathAny) PasswordHashed() *System_Aaa_Authentication_User_PasswordHashedPathAny {
	ps := &System_Aaa_Authentication_User_PasswordHashedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "password-hashed"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordVersion (leaf): The version of the password that is currently used to
// authenticate this user account.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-version"
func (n *System_Aaa_Authentication_UserPath) PasswordVersion() *System_Aaa_Authentication_User_PasswordVersionPath {
	ps := &System_Aaa_Authentication_User_PasswordVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PasswordVersion (leaf): The version of the password that is currently used to
// authenticate this user account.
//
//	Defining module:      "openconfig-gnsi-credentialz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/password-version"
//	Path from root:       "/system/aaa/authentication/users/user/state/password-version"
func (n *System_Aaa_Authentication_UserPathAny) PasswordVersion() *System_Aaa_Authentication_User_PasswordVersionPathAny {
	ps := &System_Aaa_Authentication_User_PasswordVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "password-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Role (leaf): Role assigned to the user.  The role must be supplied
// as a role defined by the SYSTEM_DEFINED_ROLES
// identity or a string that matches a user defined role.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/role"
//	Path from root:       "/system/aaa/authentication/users/user/*/role"
func (n *System_Aaa_Authentication_UserPath) Role() *System_Aaa_Authentication_User_RolePath {
	ps := &System_Aaa_Authentication_User_RolePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Role (leaf): Role assigned to the user.  The role must be supplied
// as a role defined by the SYSTEM_DEFINED_ROLES
// identity or a string that matches a user defined role.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/role"
//	Path from root:       "/system/aaa/authentication/users/user/*/role"
func (n *System_Aaa_Authentication_UserPathAny) Role() *System_Aaa_Authentication_User_RolePathAny {
	ps := &System_Aaa_Authentication_User_RolePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/*/ssh-key"
func (n *System_Aaa_Authentication_UserPath) SshKey() *System_Aaa_Authentication_User_SshKeyPath {
	ps := &System_Aaa_Authentication_User_SshKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ssh-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SshKey (leaf): SSH public key for the user (RSA or DSA)
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ssh-key"
//	Path from root:       "/system/aaa/authentication/users/user/*/ssh-key"
func (n *System_Aaa_Authentication_UserPathAny) SshKey() *System_Aaa_Authentication_User_SshKeyPathAny {
	ps := &System_Aaa_Authentication_User_SshKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ssh-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Username (leaf): Assigned username for this user
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/username"
//	Path from root:       "/system/aaa/authentication/users/user/*/username"
func (n *System_Aaa_Authentication_UserPath) Username() *System_Aaa_Authentication_User_UsernamePath {
	ps := &System_Aaa_Authentication_User_UsernamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "username"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Username (leaf): Assigned username for this user
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/username"
//	Path from root:       "/system/aaa/authentication/users/user/*/username"
func (n *System_Aaa_Authentication_UserPathAny) Username() *System_Aaa_Authentication_User_UsernamePathAny {
	ps := &System_Aaa_Authentication_User_UsernamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "username"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication_User",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication_User",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_Authentication_User, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).User
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:users"},
			PostRelPath: []string{"openconfig-system:user"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_Authentication_User, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).User
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:users"},
			PostRelPath: []string{"openconfig-system:user"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_Authentication_User, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).User
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:users"},
			PostRelPath: []string{"openconfig-system:user"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_Authentication_UserPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Aaa_Authentication_User] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Aaa_Authentication_User](
		"System_Aaa_Authentication",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Aaa_Authentication_User, bool) {
			ret := gs.(*oc.System_Aaa_Authentication).User
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authentication) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:users"},
			PostRelPath: []string{"openconfig-system:user"},
		},
	)
}

// System_Aaa_Authorization_AuthorizationMethodPath represents the /openconfig-system/system/aaa/authorization/state/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authorization_AuthorizationMethodPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/state/authorization-method YANG schema element.
type System_Aaa_Authorization_AuthorizationMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorization-method"
//	Path from root:       "/system/aaa/authorization/state/authorization-method"
func (n *System_Aaa_Authorization_AuthorizationMethodPath) State() ygnmi.SingletonQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union] {
	return ygnmi.NewSingletonQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union](
		"System_Aaa_Authorization",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorization-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authorization_AuthorizationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).AuthorizationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/authorization-method"
//	Path from root:       "/system/aaa/authorization/state/authorization-method"
func (n *System_Aaa_Authorization_AuthorizationMethodPathAny) State() ygnmi.WildcardQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union](
		"System_Aaa_Authorization",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authorization-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authorization_AuthorizationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).AuthorizationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/authorization-method"
//	Path from root:       "/system/aaa/authorization/config/authorization-method"
func (n *System_Aaa_Authorization_AuthorizationMethodPath) Config() ygnmi.ConfigQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union] {
	return ygnmi.NewConfigQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union](
		"System_Aaa_Authorization",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authorization-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authorization_AuthorizationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).AuthorizationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/authorization-method"
//	Path from root:       "/system/aaa/authorization/config/authorization-method"
func (n *System_Aaa_Authorization_AuthorizationMethodPathAny) Config() ygnmi.WildcardQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union] {
	return ygnmi.NewWildcardQuery[[]oc.System_Aaa_Authorization_AuthorizationMethod_Union](
		"System_Aaa_Authorization",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authorization-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.System_Aaa_Authorization_AuthorizationMethod_Union, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).AuthorizationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPath represents the /openconfig-system/system/aaa/authorization/state/grpc-authz-policy-created-on YANG schema element.
type System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/state/grpc-authz-policy-created-on YANG schema element.
type System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/grpc-authz-policy-created-on"
//	Path from root:       "/system/aaa/authorization/state/grpc-authz-policy-created-on"
func (n *System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Aaa_Authorization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "grpc-authz-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).GrpcAuthzPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/grpc-authz-policy-created-on"
//	Path from root:       "/system/aaa/authorization/state/grpc-authz-policy-created-on"
func (n *System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Aaa_Authorization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "grpc-authz-policy-created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).GrpcAuthzPolicyCreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authorization_GrpcAuthzPolicyVersionPath represents the /openconfig-system/system/aaa/authorization/state/grpc-authz-policy-version YANG schema element.
type System_Aaa_Authorization_GrpcAuthzPolicyVersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authorization_GrpcAuthzPolicyVersionPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/state/grpc-authz-policy-version YANG schema element.
type System_Aaa_Authorization_GrpcAuthzPolicyVersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/grpc-authz-policy-version"
//	Path from root:       "/system/aaa/authorization/state/grpc-authz-policy-version"
func (n *System_Aaa_Authorization_GrpcAuthzPolicyVersionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Aaa_Authorization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "grpc-authz-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).GrpcAuthzPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-gnsi-authz"
//	Path from parent:     "state/grpc-authz-policy-version"
//	Path from root:       "/system/aaa/authorization/state/grpc-authz-policy-version"
func (n *System_Aaa_Authorization_GrpcAuthzPolicyVersionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Aaa_Authorization",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "grpc-authz-policy-version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Aaa_Authorization).GrpcAuthzPolicyVersion
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_AuthorizationPath represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPath struct {
	*ygnmi.NodePath
}

// System_Aaa_AuthorizationPathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_AuthorizationPathAny struct {
	*ygnmi.NodePath
}

// AuthorizationMethod (leaf-list): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/authorization-method"
//	Path from root:       "/system/aaa/authorization/*/authorization-method"
func (n *System_Aaa_AuthorizationPath) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPath {
	ps := &System_Aaa_Authorization_AuthorizationMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authorization-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthorizationMethod (leaf-list): Ordered list of methods for authorizing commands.  The first
// method that provides a response (positive or negative) should
// be used.  The list may contain a well-defined method such
// as the set of all TACACS or RADIUS servers, or the name of
// a defined AAA server group.  The system must validate
// that the named server group exists.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/authorization-method"
//	Path from root:       "/system/aaa/authorization/*/authorization-method"
func (n *System_Aaa_AuthorizationPathAny) AuthorizationMethod() *System_Aaa_Authorization_AuthorizationMethodPathAny {
	ps := &System_Aaa_Authorization_AuthorizationMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authorization-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EventAny (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
func (n *System_Aaa_AuthorizationPath) EventAny() *System_Aaa_Authorization_EventPathAny {
	ps := &System_Aaa_Authorization_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
	return ps
}

// EventAny (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
func (n *System_Aaa_AuthorizationPathAny) EventAny() *System_Aaa_Authorization_EventPathAny {
	ps := &System_Aaa_Authorization_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": "*"},
			n,
		),
	}
	return ps
}

// Event (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
//
//	EventType: oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPath) Event(EventType oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPath {
	ps := &System_Aaa_Authorization_EventPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
	return ps
}

// Event (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
//
//	EventType: oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
func (n *System_Aaa_AuthorizationPathAny) Event(EventType oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_EventPathAny {
	ps := &System_Aaa_Authorization_EventPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events", "event"},
			map[string]interface{}{"event-type": EventType},
			n,
		),
	}
	return ps
}

// EventMap (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
func (n *System_Aaa_AuthorizationPath) EventMap() *System_Aaa_Authorization_EventPathMap {
	ps := &System_Aaa_Authorization_EventPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"events"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EventMap (list): List of events subject to AAA authorization
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "events/event"
//	Path from root:       "/system/aaa/authorization/events/event"
func (n *System_Aaa_AuthorizationPathAny) EventMap() *System_Aaa_Authorization_EventPathMapAny {
	ps := &System_Aaa_Authorization_EventPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"events"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GrpcAuthzPolicyCreatedOn (leaf): The timestamp of the moment when the gRPC authorization policy
// that is currently used by this system was created.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/grpc-authz-policy-created-on"
//	Path from root:       "/system/aaa/authorization/state/grpc-authz-policy-created-on"
func (n *System_Aaa_AuthorizationPath) GrpcAuthzPolicyCreatedOn() *System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPath {
	ps := &System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "grpc-authz-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GrpcAuthzPolicyCreatedOn (leaf): The timestamp of the moment when the gRPC authorization policy
// that is currently used by this system was created.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/grpc-authz-policy-created-on"
//	Path from root:       "/system/aaa/authorization/state/grpc-authz-policy-created-on"
func (n *System_Aaa_AuthorizationPathAny) GrpcAuthzPolicyCreatedOn() *System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPathAny {
	ps := &System_Aaa_Authorization_GrpcAuthzPolicyCreatedOnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "grpc-authz-policy-created-on"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GrpcAuthzPolicyVersion (leaf): The version of the gRPC authorization policy that is used by
// this system.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/grpc-authz-policy-version"
//	Path from root:       "/system/aaa/authorization/state/grpc-authz-policy-version"
func (n *System_Aaa_AuthorizationPath) GrpcAuthzPolicyVersion() *System_Aaa_Authorization_GrpcAuthzPolicyVersionPath {
	ps := &System_Aaa_Authorization_GrpcAuthzPolicyVersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "grpc-authz-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GrpcAuthzPolicyVersion (leaf): The version of the gRPC authorization policy that is used by
// this system.
//
//	Defining module:      "openconfig-gnsi-authz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/grpc-authz-policy-version"
//	Path from root:       "/system/aaa/authorization/state/grpc-authz-policy-version"
func (n *System_Aaa_AuthorizationPathAny) GrpcAuthzPolicyVersion() *System_Aaa_Authorization_GrpcAuthzPolicyVersionPathAny {
	ps := &System_Aaa_Authorization_GrpcAuthzPolicyVersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "grpc-authz-policy-version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthorizationPath) State() ygnmi.SingletonQuery[*oc.System_Aaa_Authorization] {
	return ygnmi.NewSingletonQuery[*oc.System_Aaa_Authorization](
		"System_Aaa_Authorization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthorizationPathAny) State() ygnmi.WildcardQuery[*oc.System_Aaa_Authorization] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authorization](
		"System_Aaa_Authorization",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthorizationPath) Config() ygnmi.ConfigQuery[*oc.System_Aaa_Authorization] {
	return ygnmi.NewConfigQuery[*oc.System_Aaa_Authorization](
		"System_Aaa_Authorization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Aaa_AuthorizationPathAny) Config() ygnmi.WildcardQuery[*oc.System_Aaa_Authorization] {
	return ygnmi.NewWildcardQuery[*oc.System_Aaa_Authorization](
		"System_Aaa_Authorization",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Aaa_Authorization_Event_EventTypePath represents the /openconfig-system/system/aaa/authorization/events/event/state/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Aaa_Authorization_Event_EventTypePathAny represents the wildcard version of the /openconfig-system/system/aaa/authorization/events/event/state/event-type YANG schema element.
type System_Aaa_Authorization_Event_EventTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/state/event-type"
func (n *System_Aaa_Authorization_Event_EventTypePath) State() ygnmi.SingletonQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE](
		"System_Aaa_Authorization_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Authorization_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/state/event-type"
func (n *System_Aaa_Authorization_Event_EventTypePathAny) State() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE](
		"System_Aaa_Authorization_Event",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Authorization_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/config/event-type"
func (n *System_Aaa_Authorization_Event_EventTypePath) Config() ygnmi.ConfigQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE](
		"System_Aaa_Authorization_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Authorization_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aaa"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/event-type"
//	Path from root:       "/system/aaa/authorization/events/event/config/event-type"
func (n *System_Aaa_Authorization_Event_EventTypePathAny) Config() ygnmi.WildcardQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE](
		"System_Aaa_Authorization_Event",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "event-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE, bool) {
			ret := gs.(*oc.System_Aaa_Authorization_Event).EventType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Aaa_Authorization_Event) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
