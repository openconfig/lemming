/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_GrpcServer_Connection_Counters_DataSendErrorPath represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/counters/data-send-error YANG schema element.
type System_GrpcServer_Connection_Counters_DataSendErrorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Connection_Counters_DataSendErrorPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/counters/data-send-error YANG schema element.
type System_GrpcServer_Connection_Counters_DataSendErrorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "data-send-error"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/data-send-error"
func (n *System_GrpcServer_Connection_Counters_DataSendErrorPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Connection_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-send-error"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection_Counters).DataSendError
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "data-send-error"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/data-send-error"
func (n *System_GrpcServer_Connection_Counters_DataSendErrorPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Connection_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"data-send-error"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection_Counters).DataSendError
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Connection_Counters_PacketsSentPath represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/counters/packets-sent YANG schema element.
type System_GrpcServer_Connection_Counters_PacketsSentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Connection_Counters_PacketsSentPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/counters/packets-sent YANG schema element.
type System_GrpcServer_Connection_Counters_PacketsSentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "packets-sent"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/packets-sent"
func (n *System_GrpcServer_Connection_Counters_PacketsSentPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Connection_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection_Counters).PacketsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system-grpc"
//	Path from parent:     "packets-sent"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/packets-sent"
func (n *System_GrpcServer_Connection_Counters_PacketsSentPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Connection_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-sent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Connection_Counters).PacketsSent
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Connection_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Connection_CountersPath represents the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/counters YANG schema element.
type System_GrpcServer_Connection_CountersPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_Connection_CountersPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/connections/connection/state/counters YANG schema element.
type System_GrpcServer_Connection_CountersPathAny struct {
	*ygnmi.NodePath
}

// BytesSent (leaf): The total number of bytes sent to the client.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "bytes-sent"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/bytes-sent"
func (n *System_GrpcServer_Connection_CountersPath) BytesSent() *System_GrpcServer_Connection_Counters_BytesSentPath {
	ps := &System_GrpcServer_Connection_Counters_BytesSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bytes-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BytesSent (leaf): The total number of bytes sent to the client.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "bytes-sent"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/bytes-sent"
func (n *System_GrpcServer_Connection_CountersPathAny) BytesSent() *System_GrpcServer_Connection_Counters_BytesSentPathAny {
	ps := &System_GrpcServer_Connection_Counters_BytesSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bytes-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataSendError (leaf): A count of errors the gRPC server encountered when
// sending data to a grpc client.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "data-send-error"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/data-send-error"
func (n *System_GrpcServer_Connection_CountersPath) DataSendError() *System_GrpcServer_Connection_Counters_DataSendErrorPath {
	ps := &System_GrpcServer_Connection_Counters_DataSendErrorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-send-error"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DataSendError (leaf): A count of errors the gRPC server encountered when
// sending data to a grpc client.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "data-send-error"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/data-send-error"
func (n *System_GrpcServer_Connection_CountersPathAny) DataSendError() *System_GrpcServer_Connection_Counters_DataSendErrorPathAny {
	ps := &System_GrpcServer_Connection_Counters_DataSendErrorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"data-send-error"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsSent (leaf): The total number of packets sent to the client.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "packets-sent"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/packets-sent"
func (n *System_GrpcServer_Connection_CountersPath) PacketsSent() *System_GrpcServer_Connection_Counters_PacketsSentPath {
	ps := &System_GrpcServer_Connection_Counters_PacketsSentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsSent (leaf): The total number of packets sent to the client.
//
//	Defining module:      "openconfig-system-grpc"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "packets-sent"
//	Path from root:       "/system/grpc-servers/grpc-server/connections/connection/state/counters/packets-sent"
func (n *System_GrpcServer_Connection_CountersPathAny) PacketsSent() *System_GrpcServer_Connection_Counters_PacketsSentPathAny {
	ps := &System_GrpcServer_Connection_Counters_PacketsSentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-sent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_Connection_CountersPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_Connection_Counters] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_Connection_Counters](
		"System_GrpcServer_Connection_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_Connection_CountersPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_Connection_Counters] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_Connection_Counters](
		"System_GrpcServer_Connection_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Counters_ConnectionAcceptsPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/counters/connection-accepts YANG schema element.
type System_GrpcServer_Counters_ConnectionAcceptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Counters_ConnectionAcceptsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/counters/connection-accepts YANG schema element.
type System_GrpcServer_Counters_ConnectionAcceptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "connection-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/connection-accepts"
func (n *System_GrpcServer_Counters_ConnectionAcceptsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connection-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Counters).ConnectionAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "connection-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/connection-accepts"
func (n *System_GrpcServer_Counters_ConnectionAcceptsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connection-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Counters).ConnectionAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Counters_ConnectionRejectsPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/counters/connection-rejects YANG schema element.
type System_GrpcServer_Counters_ConnectionRejectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Counters_ConnectionRejectsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/counters/connection-rejects YANG schema element.
type System_GrpcServer_Counters_ConnectionRejectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "connection-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/connection-rejects"
func (n *System_GrpcServer_Counters_ConnectionRejectsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connection-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Counters).ConnectionRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "connection-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/connection-rejects"
func (n *System_GrpcServer_Counters_ConnectionRejectsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"connection-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Counters).ConnectionRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Counters_LastConnectionAcceptPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/counters/last-connection-accept YANG schema element.
type System_GrpcServer_Counters_LastConnectionAcceptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Counters_LastConnectionAcceptPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/counters/last-connection-accept YANG schema element.
type System_GrpcServer_Counters_LastConnectionAcceptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "last-connection-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/last-connection-accept"
func (n *System_GrpcServer_Counters_LastConnectionAcceptPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-connection-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Counters).LastConnectionAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "last-connection-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/last-connection-accept"
func (n *System_GrpcServer_Counters_LastConnectionAcceptPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-connection-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Counters).LastConnectionAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_Counters_LastConnectionRejectPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/counters/last-connection-reject YANG schema element.
type System_GrpcServer_Counters_LastConnectionRejectPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_Counters_LastConnectionRejectPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/counters/last-connection-reject YANG schema element.
type System_GrpcServer_Counters_LastConnectionRejectPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "last-connection-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/last-connection-reject"
func (n *System_GrpcServer_Counters_LastConnectionRejectPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-connection-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Counters).LastConnectionReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-gnsi-certz"
//	Path from parent:     "last-connection-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/last-connection-reject"
func (n *System_GrpcServer_Counters_LastConnectionRejectPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-connection-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_Counters).LastConnectionReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_CountersPath represents the /openconfig-system/system/grpc-servers/grpc-server/state/counters YANG schema element.
type System_GrpcServer_CountersPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_CountersPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/state/counters YANG schema element.
type System_GrpcServer_CountersPathAny struct {
	*ygnmi.NodePath
}

// ConnectionAccepts (leaf): The total number of times that gRPC clients have succeeded
// in establishing a connection to the server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connection-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/connection-accepts"
func (n *System_GrpcServer_CountersPath) ConnectionAccepts() *System_GrpcServer_Counters_ConnectionAcceptsPath {
	ps := &System_GrpcServer_Counters_ConnectionAcceptsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionAccepts (leaf): The total number of times that gRPC clients have succeeded
// in establishing a connection to the server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connection-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/connection-accepts"
func (n *System_GrpcServer_CountersPathAny) ConnectionAccepts() *System_GrpcServer_Counters_ConnectionAcceptsPathAny {
	ps := &System_GrpcServer_Counters_ConnectionAcceptsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionRejects (leaf): The total number of times that gRPC clients have failed
// in establishing a connection to the server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connection-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/connection-rejects"
func (n *System_GrpcServer_CountersPath) ConnectionRejects() *System_GrpcServer_Counters_ConnectionRejectsPath {
	ps := &System_GrpcServer_Counters_ConnectionRejectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionRejects (leaf): The total number of times that gRPC clients have failed
// in establishing a connection to the server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "connection-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/connection-rejects"
func (n *System_GrpcServer_CountersPathAny) ConnectionRejects() *System_GrpcServer_Counters_ConnectionRejectsPathAny {
	ps := &System_GrpcServer_Counters_ConnectionRejectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastConnectionAccept (leaf): A timestamp of the last time a gRPC client succeeded
// in establishing a connection to the server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-connection-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/last-connection-accept"
func (n *System_GrpcServer_CountersPath) LastConnectionAccept() *System_GrpcServer_Counters_LastConnectionAcceptPath {
	ps := &System_GrpcServer_Counters_LastConnectionAcceptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-connection-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastConnectionAccept (leaf): A timestamp of the last time a gRPC client succeeded
// in establishing a connection to the server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-connection-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/last-connection-accept"
func (n *System_GrpcServer_CountersPathAny) LastConnectionAccept() *System_GrpcServer_Counters_LastConnectionAcceptPathAny {
	ps := &System_GrpcServer_Counters_LastConnectionAcceptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-connection-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastConnectionReject (leaf): A timestamp of the last time a gRPC client failed
// in establishing a connection to the server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-connection-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/last-connection-reject"
func (n *System_GrpcServer_CountersPath) LastConnectionReject() *System_GrpcServer_Counters_LastConnectionRejectPath {
	ps := &System_GrpcServer_Counters_LastConnectionRejectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-connection-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastConnectionReject (leaf): A timestamp of the last time a gRPC client failed
// in establishing a connection to the server.
//
//	Defining module:      "openconfig-gnsi-certz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-connection-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/state/counters/last-connection-reject"
func (n *System_GrpcServer_CountersPathAny) LastConnectionReject() *System_GrpcServer_Counters_LastConnectionRejectPathAny {
	ps := &System_GrpcServer_Counters_LastConnectionRejectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-connection-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_CountersPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_Counters] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_Counters](
		"System_GrpcServer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_CountersPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_Counters] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_Counters](
		"System_GrpcServer_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCountersPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCountersPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_GnmiPathzPolicyCountersPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCountersPathAny struct {
	*ygnmi.NodePath
}

// PathAny (list): List for a collection of per-OpenConfig path counters.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "paths/path"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path"
func (n *System_GrpcServer_GnmiPathzPolicyCountersPath) PathAny() *System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"paths", "path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// PathAny (list): List for a collection of per-OpenConfig path counters.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "paths/path"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path"
func (n *System_GrpcServer_GnmiPathzPolicyCountersPathAny) PathAny() *System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"paths", "path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Path (list): List for a collection of per-OpenConfig path counters.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "paths/path"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path"
//
//	Name: string
func (n *System_GrpcServer_GnmiPathzPolicyCountersPath) Path(Name string) *System_GrpcServer_GnmiPathzPolicyCounters_PathPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_PathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"paths", "path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Path (list): List for a collection of per-OpenConfig path counters.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "paths/path"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path"
//
//	Name: string
func (n *System_GrpcServer_GnmiPathzPolicyCountersPathAny) Path(Name string) *System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"paths", "path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// PathMap (list): List for a collection of per-OpenConfig path counters.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "paths/path"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path"
func (n *System_GrpcServer_GnmiPathzPolicyCountersPath) PathMap() *System_GrpcServer_GnmiPathzPolicyCounters_PathPathMap {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_PathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathMap (list): List for a collection of per-OpenConfig path counters.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "paths/path"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path"
func (n *System_GrpcServer_GnmiPathzPolicyCountersPathAny) PathMap() *System_GrpcServer_GnmiPathzPolicyCounters_PathPathMapAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_PathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCountersPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters](
		"System_GrpcServer_GnmiPathzPolicyCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCountersPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters](
		"System_GrpcServer_GnmiPathzPolicyCounters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/name YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/name YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/name"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/name"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "state/name"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/name"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "name"
//	Path from root:       ""
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_PathPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_PathPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny struct {
	*ygnmi.NodePath
}

// System_GrpcServer_GnmiPathzPolicyCounters_PathPathMap represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_PathPathMap struct {
	*ygnmi.NodePath
}

// System_GrpcServer_GnmiPathzPolicyCounters_PathPathMapAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_PathPathMapAny struct {
	*ygnmi.NodePath
}

// Name (leaf): A OpenConfig schema path the counter were
// collected for.
//
// For documentation on the naming of paths, see
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-path-conventions.md
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/*/name"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPath) Name() *System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A OpenConfig schema path the counter were
// collected for.
//
// For documentation on the naming of paths, see
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-path-conventions.md
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/name"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/*/name"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny) Name() *System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reads (container): The counter were collected while
// performing a read operation on the
// schema path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reads"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPath) Reads() *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reads"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Reads (container): The counter were collected while
// performing a read operation on the
// schema path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reads"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny) Reads() *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reads"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Writes (container): The counter were collected while
// performing a write operation on the
// schema path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/writes"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPath) Writes() *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "writes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Writes (container): The counter were collected while
// performing a write operation on the
// schema path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/writes"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny) Writes() *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "writes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path](
		"System_GrpcServer_GnmiPathzPolicyCounters",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters).Path
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-gnsi-pathz:paths"},
			PostRelPath: []string{"openconfig-gnsi-pathz:path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCounters_PathPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path](
		"System_GrpcServer_GnmiPathzPolicyCounters",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters).Path
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-gnsi-pathz:paths"},
			PostRelPath: []string{"openconfig-gnsi-pathz:path"},
		},
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-accepts YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-accepts YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-accepts"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-accepts"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-rejects YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-rejects YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-rejects"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-rejects"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-accept YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-accept YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-accept"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads).LastAccessAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-accept"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads).LastAccessAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-reject YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-reject YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-reject"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads).LastAccessReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-reject"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads).LastAccessReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPathAny struct {
	*ygnmi.NodePath
}

// AccessAccepts (leaf): The total number of times the gNSI.pathz module allowed access
// to an OpenConfig path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-accepts"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPath) AccessAccepts() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessAccepts (leaf): The total number of times the gNSI.pathz module allowed access
// to an OpenConfig path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-accepts"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPathAny) AccessAccepts() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessAcceptsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): The total number of times the gNSI.pathz module denied access
// to an OpenConfig path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-rejects"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPath) AccessRejects() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): The total number of times the gNSI.pathz module denied access
// to an OpenConfig path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/access-rejects"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPathAny) AccessRejects() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_AccessRejectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessAccept (leaf): A timestamp of the last time the gNSI.pathz allowed access to
// an OpenConfig path
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-accept"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPath) LastAccessAccept() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessAccept (leaf): A timestamp of the last time the gNSI.pathz allowed access to
// an OpenConfig path
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-accept"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPathAny) LastAccessAccept() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessAcceptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessReject (leaf): A timestamp of the last time the gNSI.pathz denied access to
// an OpenConfig path
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-reject"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPath) LastAccessReject() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessReject (leaf): A timestamp of the last time the gNSI.pathz denied access to
// an OpenConfig path
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/reads/last-access-reject"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPathAny) LastAccessReject() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads_LastAccessRejectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_ReadsPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Reads",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-accepts YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-accepts YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-accepts"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-accepts"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-accepts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes).AccessAccepts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-rejects YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-rejects YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-rejects"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-rejects"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"access-rejects"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes).AccessRejects
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-accept YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-accept YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-accept"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes).LastAccessAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-accept"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes).LastAccessAccept
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-reject YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-reject YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-reject"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes).LastAccessReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-gnsi-pathz"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-reject"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes).LastAccessReject
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPath represents the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPath struct {
	*ygnmi.NodePath
}

// System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPathAny represents the wildcard version of the /openconfig-system/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes YANG schema element.
type System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPathAny struct {
	*ygnmi.NodePath
}

// AccessAccepts (leaf): The total number of times the gNSI.pathz module allowed access
// to an OpenConfig path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-accepts"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPath) AccessAccepts() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessAccepts (leaf): The total number of times the gNSI.pathz module allowed access
// to an OpenConfig path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-accepts"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-accepts"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPathAny) AccessAccepts() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessAcceptsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-accepts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): The total number of times the gNSI.pathz module denied access
// to an OpenConfig path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-rejects"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPath) AccessRejects() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AccessRejects (leaf): The total number of times the gNSI.pathz module denied access
// to an OpenConfig path.
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "access-rejects"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/access-rejects"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPathAny) AccessRejects() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_AccessRejectsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"access-rejects"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessAccept (leaf): A timestamp of the last time the gNSI.pathz allowed access to
// an OpenConfig path
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-accept"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPath) LastAccessAccept() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessAccept (leaf): A timestamp of the last time the gNSI.pathz allowed access to
// an OpenConfig path
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-accept"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-accept"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPathAny) LastAccessAccept() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessAcceptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessReject (leaf): A timestamp of the last time the gNSI.pathz denied access to
// an OpenConfig path
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-reject"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPath) LastAccessReject() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPath {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastAccessReject (leaf): A timestamp of the last time the gNSI.pathz denied access to
// an OpenConfig path
//
//	Defining module:      "openconfig-gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "last-access-reject"
//	Path from root:       "/system/grpc-servers/grpc-server/gnmi-pathz-policy-counters/paths/path/state/writes/last-access-reject"
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPathAny) LastAccessReject() *System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPathAny {
	ps := &System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes_LastAccessRejectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"last-access-reject"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPath) State() ygnmi.SingletonQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes] {
	return ygnmi.NewSingletonQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GrpcServer_GnmiPathzPolicyCounters_Path_WritesPathAny) State() ygnmi.WildcardQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes] {
	return ygnmi.NewWildcardQuery[*oc.System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes](
		"System_GrpcServer_GnmiPathzPolicyCounters_Path_Writes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_LicensePath represents the /openconfig-system/system/license YANG schema element.
type System_LicensePath struct {
	*ygnmi.NodePath
}

// System_LicensePathAny represents the wildcard version of the /openconfig-system/system/license YANG schema element.
type System_LicensePathAny struct {
	*ygnmi.NodePath
}

// LicenseAny (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePath) LicenseAny() *System_License_LicensePathAny {
	ps := &System_License_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
	return ps
}

// LicenseAny (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePathAny) LicenseAny() *System_License_LicensePathAny {
	ps := &System_License_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": "*"},
			n,
		),
	}
	return ps
}

// License (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
//
//	LicenseId: string
func (n *System_LicensePath) License(LicenseId string) *System_License_LicensePath {
	ps := &System_License_LicensePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
	return ps
}

// License (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
//
//	LicenseId: string
func (n *System_LicensePathAny) License(LicenseId string) *System_License_LicensePathAny {
	ps := &System_License_LicensePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses", "license"},
			map[string]interface{}{"license-id": LicenseId},
			n,
		),
	}
	return ps
}

// LicenseMap (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePath) LicenseMap() *System_License_LicensePathMap {
	ps := &System_License_LicensePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LicenseMap (list): List of licenses.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "licenses/license"
//	Path from root:       "/system/license/licenses/license"
func (n *System_LicensePathAny) LicenseMap() *System_License_LicensePathMapAny {
	ps := &System_License_LicensePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"licenses"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LicensePath) State() ygnmi.SingletonQuery[*oc.System_License] {
	return ygnmi.NewSingletonQuery[*oc.System_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LicensePathAny) State() ygnmi.WildcardQuery[*oc.System_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LicensePath) Config() ygnmi.ConfigQuery[*oc.System_License] {
	return ygnmi.NewConfigQuery[*oc.System_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LicensePathAny) Config() ygnmi.WildcardQuery[*oc.System_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ActivePath represents the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ActivePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/active YANG schema element.
type System_License_License_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active"
//	Path from root:       "/system/license/licenses/license/state/active"
func (n *System_License_License_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/active"
//	Path from root:       "/system/license/licenses/license/state/active"
func (n *System_License_License_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/active"
//	Path from root:       "/system/license/licenses/license/config/active"
func (n *System_License_License_ActivePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/active"
//	Path from root:       "/system/license/licenses/license/config/active"
func (n *System_License_License_ActivePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_DescriptionPath represents the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_DescriptionPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/description YANG schema element.
type System_License_License_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_License_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_License_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ExpirationDatePath represents the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ExpirationDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expiration-date YANG schema element.
type System_License_License_ExpirationDatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_License_ExpirationDatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).ExpirationDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_License_ExpirationDatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).ExpirationDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ExpiredPath represents the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ExpiredPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/expired YANG schema element.
type System_License_License_ExpiredPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_License_ExpiredPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expired"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Expired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_License_ExpiredPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "expired"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Expired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_InUsePath represents the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_InUsePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/in-use YANG schema element.
type System_License_License_InUsePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_License_InUsePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).InUse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_License_InUsePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).InUse
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_IssueDatePath represents the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_IssueDatePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/issue-date YANG schema element.
type System_License_License_IssueDatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_License_IssueDatePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).IssueDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_License_IssueDatePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_License_License).IssueDate
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_LicenseDataPath represents the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_LicenseDataPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-data YANG schema element.
type System_License_License_LicenseDataPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-data"
//	Path from root:       "/system/license/licenses/license/state/license-data"
func (n *System_License_License_LicenseDataPath) State() ygnmi.SingletonQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewSingletonQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-data"
//	Path from root:       "/system/license/licenses/license/state/license-data"
func (n *System_License_License_LicenseDataPathAny) State() ygnmi.WildcardQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewWildcardQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-data"
//	Path from root:       "/system/license/licenses/license/config/license-data"
func (n *System_License_License_LicenseDataPath) Config() ygnmi.ConfigQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewConfigQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-data"
//	Path from root:       "/system/license/licenses/license/config/license-data"
func (n *System_License_License_LicenseDataPathAny) Config() ygnmi.WildcardQuery[oc.System_License_License_LicenseData_Union] {
	return ygnmi.NewWildcardQuery[oc.System_License_License_LicenseData_Union](
		"System_License_License",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-data"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.System_License_License_LicenseData_Union, bool) {
			ret := gs.(*oc.System_License_License).LicenseData
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_LicenseIdPath represents the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_LicenseIdPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/license-id YANG schema element.
type System_License_License_LicenseIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-id"
//	Path from root:       "/system/license/licenses/license/state/license-id"
func (n *System_License_License_LicenseIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/license-id"
//	Path from root:       "/system/license/licenses/license/state/license-id"
func (n *System_License_License_LicenseIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-id"
//	Path from root:       "/system/license/licenses/license/config/license-id"
func (n *System_License_License_LicenseIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/license-id"
//	Path from root:       "/system/license/licenses/license/config/license-id"
func (n *System_License_License_LicenseIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_License_License",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "license-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_License_License).LicenseId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_License_ValidPath represents the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_License_License_ValidPathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license/state/valid YANG schema element.
type System_License_License_ValidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_License_ValidPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_License_ValidPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_License_License",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "valid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_License_License).Valid
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_License_LicensePath represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePath struct {
	*ygnmi.NodePath
}

// System_License_LicensePathAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathAny struct {
	*ygnmi.NodePath
}

// System_License_LicensePathMap represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathMap struct {
	*ygnmi.NodePath
}

// System_License_LicensePathMapAny represents the wildcard version of the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_LicensePathMapAny struct {
	*ygnmi.NodePath
}

// Active (leaf): The activation state of the license.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/active"
//	Path from root:       "/system/license/licenses/license/*/active"
func (n *System_License_LicensePath) Active() *System_License_License_ActivePath {
	ps := &System_License_License_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): The activation state of the license.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/active"
//	Path from root:       "/system/license/licenses/license/*/active"
func (n *System_License_LicensePathAny) Active() *System_License_License_ActivePathAny {
	ps := &System_License_License_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): The license description.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_LicensePath) Description() *System_License_License_DescriptionPath {
	ps := &System_License_License_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): The license description.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/description"
//	Path from root:       "/system/license/licenses/license/state/description"
func (n *System_License_LicensePathAny) Description() *System_License_License_DescriptionPathAny {
	ps := &System_License_License_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePath) ExpirationDate() *System_License_License_ExpirationDatePath {
	ps := &System_License_License_ExpirationDatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExpirationDate (leaf): The date and time at which the license will expire, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC). Zero if it does not expire.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expiration-date"
//	Path from root:       "/system/license/licenses/license/state/expiration-date"
func (n *System_License_LicensePathAny) ExpirationDate() *System_License_License_ExpirationDatePathAny {
	ps := &System_License_License_ExpirationDatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expiration-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Expired (leaf): The license has expired.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePath) Expired() *System_License_License_ExpiredPath {
	ps := &System_License_License_ExpiredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Expired (leaf): The license has expired.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/expired"
//	Path from root:       "/system/license/licenses/license/state/expired"
func (n *System_License_LicensePathAny) Expired() *System_License_License_ExpiredPathAny {
	ps := &System_License_License_ExpiredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "expired"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePath) InUse() *System_License_License_InUsePath {
	ps := &System_License_License_InUsePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InUse (leaf): The license is in use. Different from active. This states that the
// license is effectively being used in addition to being active. If
// license for feature X was activated but feature X is not being used,
// then this should be false.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/in-use"
//	Path from root:       "/system/license/licenses/license/state/in-use"
func (n *System_License_LicensePathAny) InUse() *System_License_License_InUsePathAny {
	ps := &System_License_License_InUsePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-use"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePath) IssueDate() *System_License_License_IssueDatePath {
	ps := &System_License_License_IssueDatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IssueDate (leaf): The date and time at which the license was issued, expressed as the
// number of nanoseconds since the Unix Epoch
// (January 1, 1970, 00:00 UTC).
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/issue-date"
//	Path from root:       "/system/license/licenses/license/state/issue-date"
func (n *System_License_LicensePathAny) IssueDate() *System_License_License_IssueDatePathAny {
	ps := &System_License_License_IssueDatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "issue-date"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-data"
//	Path from root:       "/system/license/licenses/license/*/license-data"
func (n *System_License_LicensePath) LicenseData() *System_License_License_LicenseDataPath {
	ps := &System_License_License_LicenseDataPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-data"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseData (leaf): The contents of the licence (if required) - which may be
// supplied as a binary blob, or a simple string value. If this
// value is considered sensitive, it may be read as an empty value.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-data"
//	Path from root:       "/system/license/licenses/license/*/license-data"
func (n *System_License_LicensePathAny) LicenseData() *System_License_License_LicenseDataPathAny {
	ps := &System_License_License_LicenseDataPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-data"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-id"
//	Path from root:       "/system/license/licenses/license/*/license-id"
func (n *System_License_LicensePath) LicenseId() *System_License_License_LicenseIdPath {
	ps := &System_License_License_LicenseIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LicenseId (leaf): License ID. A string that uniquelly identifies the license. The
// platform should list all the licenses it supports being activated.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/license-id"
//	Path from root:       "/system/license/licenses/license/*/license-id"
func (n *System_License_LicensePathAny) LicenseId() *System_License_License_LicenseIdPathAny {
	ps := &System_License_License_LicenseIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "license-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePath) Valid() *System_License_License_ValidPath {
	ps := &System_License_License_ValidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Valid (leaf): The license is valid. Can be activated in the system or platform.
//
//	Defining module:      "openconfig-license"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/valid"
//	Path from root:       "/system/license/licenses/license/state/valid"
func (n *System_License_LicensePathAny) Valid() *System_License_License_ValidPathAny {
	ps := &System_License_License_ValidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "valid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePath) State() ygnmi.SingletonQuery[*oc.System_License_License] {
	return ygnmi.NewSingletonQuery[*oc.System_License_License](
		"System_License_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathAny) State() ygnmi.WildcardQuery[*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License_License](
		"System_License_License",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePath) Config() ygnmi.ConfigQuery[*oc.System_License_License] {
	return ygnmi.NewConfigQuery[*oc.System_License_License](
		"System_License_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathAny) Config() ygnmi.WildcardQuery[*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[*oc.System_License_License](
		"System_License_License",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_License_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_License_License](
		"System_License",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_License_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_License_LicensePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_License_License] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_License_License](
		"System_License",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_License_License, bool) {
			ret := gs.(*oc.System_License).License
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_License) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:licenses"},
			PostRelPath: []string{"openconfig-system:license"},
		},
	)
}

// System_LoggingPath represents the /openconfig-system/system/logging YANG schema element.
type System_LoggingPath struct {
	*ygnmi.NodePath
}

// System_LoggingPathAny represents the wildcard version of the /openconfig-system/system/logging YANG schema element.
type System_LoggingPathAny struct {
	*ygnmi.NodePath
}

// Console (container): Top-level container for data related to console-based
// logging
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "console"
//	Path from root:       "/system/logging/console"
func (n *System_LoggingPath) Console() *System_Logging_ConsolePath {
	ps := &System_Logging_ConsolePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Console (container): Top-level container for data related to console-based
// logging
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "console"
//	Path from root:       "/system/logging/console"
func (n *System_LoggingPathAny) Console() *System_Logging_ConsolePathAny {
	ps := &System_Logging_ConsolePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"console"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FileAny (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPath) FileAny() *System_Logging_FilePathAny {
	ps := &System_Logging_FilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": "*"},
			n,
		),
	}
	return ps
}

// FileAny (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPathAny) FileAny() *System_Logging_FilePathAny {
	ps := &System_Logging_FilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": "*", "filename-prefix": "*"},
			n,
		),
	}
	return ps
}

// WithPath sets System_Logging_FilePathAny's key "path" to the specified value.
// Path: string
func (n *System_Logging_FilePathAny) WithPath(Path string) *System_Logging_FilePathAny {
	ygnmi.ModifyKey(n.NodePath, "path", Path)
	return n
}

// WithFilenamePrefix sets System_Logging_FilePathAny's key "filename-prefix" to the specified value.
// FilenamePrefix: string
func (n *System_Logging_FilePathAny) WithFilenamePrefix(FilenamePrefix string) *System_Logging_FilePathAny {
	ygnmi.ModifyKey(n.NodePath, "filename-prefix", FilenamePrefix)
	return n
}

// File (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
//
//	Path: string
//	FilenamePrefix: string
func (n *System_LoggingPath) File(Path string, FilenamePrefix string) *System_Logging_FilePath {
	ps := &System_Logging_FilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": FilenamePrefix},
			n,
		),
	}
	return ps
}

// File (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
//
//	Path: string
//	FilenamePrefix: string
func (n *System_LoggingPathAny) File(Path string, FilenamePrefix string) *System_Logging_FilePathAny {
	ps := &System_Logging_FilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files", "file"},
			map[string]interface{}{"path": Path, "filename-prefix": FilenamePrefix},
			n,
		),
	}
	return ps
}

// FileMap (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPath) FileMap() *System_Logging_FilePathMap {
	ps := &System_Logging_FilePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"files"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FileMap (list): List of logfiles
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "files/file"
//	Path from root:       "/system/logging/files/file"
func (n *System_LoggingPathAny) FileMap() *System_Logging_FilePathMapAny {
	ps := &System_Logging_FilePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"files"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteServerAny (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPath) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	ps := &System_Logging_RemoteServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
	return ps
}

// RemoteServerAny (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPathAny) RemoteServerAny() *System_Logging_RemoteServerPathAny {
	ps := &System_Logging_RemoteServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": "*"},
			n,
		),
	}
	return ps
}

// RemoteServer (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
//
//	Host: string
func (n *System_LoggingPath) RemoteServer(Host string) *System_Logging_RemoteServerPath {
	ps := &System_Logging_RemoteServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
	return ps
}

// RemoteServer (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
//
//	Host: string
func (n *System_LoggingPathAny) RemoteServer(Host string) *System_Logging_RemoteServerPathAny {
	ps := &System_Logging_RemoteServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers", "remote-server"},
			map[string]interface{}{"host": Host},
			n,
		),
	}
	return ps
}

// RemoteServerMap (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPath) RemoteServerMap() *System_Logging_RemoteServerPathMap {
	ps := &System_Logging_RemoteServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RemoteServerMap (list): List of remote log servers
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "remote-servers/remote-server"
//	Path from root:       "/system/logging/remote-servers/remote-server"
func (n *System_LoggingPathAny) RemoteServerMap() *System_Logging_RemoteServerPathMapAny {
	ps := &System_Logging_RemoteServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote-servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vty (container): Top-level container for data related to vty-based
// logging (active sessions of ssh, telnet, etc )
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "vty"
//	Path from root:       "/system/logging/vty"
func (n *System_LoggingPath) Vty() *System_Logging_VtyPath {
	ps := &System_Logging_VtyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vty"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vty (container): Top-level container for data related to vty-based
// logging (active sessions of ssh, telnet, etc )
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "vty"
//	Path from root:       "/system/logging/vty"
func (n *System_LoggingPathAny) Vty() *System_Logging_VtyPathAny {
	ps := &System_Logging_VtyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vty"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LoggingPath) State() ygnmi.SingletonQuery[*oc.System_Logging] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_LoggingPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LoggingPath) Config() ygnmi.ConfigQuery[*oc.System_Logging] {
	return ygnmi.NewConfigQuery[*oc.System_Logging](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_LoggingPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_ConsolePath represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePath struct {
	*ygnmi.NodePath
}

// System_Logging_ConsolePathAny represents the wildcard version of the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_ConsolePathAny struct {
	*ygnmi.NodePath
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePath) SelectorAny() *System_Logging_Console_SelectorPathAny {
	ps := &System_Logging_Console_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePathAny) SelectorAny() *System_Logging_Console_SelectorPathAny {
	ps := &System_Logging_Console_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_Console_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_Console_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Console_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_Console_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_Console_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPath {
	ps := &System_Logging_Console_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_ConsolePathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Console_SelectorPathAny {
	ps := &System_Logging_Console_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePath) SelectorMap() *System_Logging_Console_SelectorPathMap {
	ps := &System_Logging_Console_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/console/selectors/selector"
func (n *System_Logging_ConsolePathAny) SelectorMap() *System_Logging_Console_SelectorPathMapAny {
	ps := &System_Logging_Console_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePath) State() ygnmi.SingletonQuery[*oc.System_Logging_Console] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Console] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Console] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_ConsolePathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Console] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Console_Selector_FacilityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Console_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Console_Selector_SeverityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Console_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Console_SelectorPath represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_Console_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_Console_SelectorPathMap represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_Console_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/console/selectors/selector/*/facility"
func (n *System_Logging_Console_SelectorPath) Facility() *System_Logging_Console_Selector_FacilityPath {
	ps := &System_Logging_Console_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/console/selectors/selector/*/facility"
func (n *System_Logging_Console_SelectorPathAny) Facility() *System_Logging_Console_Selector_FacilityPathAny {
	ps := &System_Logging_Console_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/console/selectors/selector/*/severity"
func (n *System_Logging_Console_SelectorPath) Severity() *System_Logging_Console_Selector_SeverityPath {
	ps := &System_Logging_Console_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/console/selectors/selector/*/severity"
func (n *System_Logging_Console_SelectorPathAny) Severity() *System_Logging_Console_Selector_SeverityPathAny {
	ps := &System_Logging_Console_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_Logging_File_FilenamePrefixPath represents the /openconfig-system/system/logging/files/file/state/filename-prefix YANG schema element.
type System_Logging_File_FilenamePrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_FilenamePrefixPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/filename-prefix YANG schema element.
type System_Logging_File_FilenamePrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/filename-prefix"
//	Path from root:       "/system/logging/files/file/state/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/filename-prefix"
//	Path from root:       "/system/logging/files/file/state/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/filename-prefix"
//	Path from root:       "/system/logging/files/file/config/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/filename-prefix"
//	Path from root:       "/system/logging/files/file/config/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_MaxOpenTimePath represents the /openconfig-system/system/logging/files/file/state/max-open-time YANG schema element.
type System_Logging_File_MaxOpenTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_MaxOpenTimePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/max-open-time YANG schema element.
type System_Logging_File_MaxOpenTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-open-time"
//	Path from root:       "/system/logging/files/file/state/max-open-time"
func (n *System_Logging_File_MaxOpenTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-open-time"
//	Path from root:       "/system/logging/files/file/state/max-open-time"
func (n *System_Logging_File_MaxOpenTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-open-time"
//	Path from root:       "/system/logging/files/file/config/max-open-time"
func (n *System_Logging_File_MaxOpenTimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-open-time"
//	Path from root:       "/system/logging/files/file/config/max-open-time"
func (n *System_Logging_File_MaxOpenTimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_MaxSizePath represents the /openconfig-system/system/logging/files/file/state/max-size YANG schema element.
type System_Logging_File_MaxSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_MaxSizePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/max-size YANG schema element.
type System_Logging_File_MaxSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-size"
//	Path from root:       "/system/logging/files/file/state/max-size"
func (n *System_Logging_File_MaxSizePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-size"
//	Path from root:       "/system/logging/files/file/state/max-size"
func (n *System_Logging_File_MaxSizePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-size"
//	Path from root:       "/system/logging/files/file/config/max-size"
func (n *System_Logging_File_MaxSizePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-size"
//	Path from root:       "/system/logging/files/file/config/max-size"
func (n *System_Logging_File_MaxSizePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_OpenLogfilePath represents the /openconfig-system/system/logging/files/file/state/open-logfile YANG schema element.
type System_Logging_File_OpenLogfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_OpenLogfilePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/open-logfile YANG schema element.
type System_Logging_File_OpenLogfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_File_OpenLogfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).OpenLogfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_File_OpenLogfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).OpenLogfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_PathPath represents the /openconfig-system/system/logging/files/file/state/path YANG schema element.
type System_Logging_File_PathPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_PathPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/path YANG schema element.
type System_Logging_File_PathPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/path"
//	Path from root:       "/system/logging/files/file/state/path"
func (n *System_Logging_File_PathPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/path"
//	Path from root:       "/system/logging/files/file/state/path"
func (n *System_Logging_File_PathPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/path"
//	Path from root:       "/system/logging/files/file/config/path"
func (n *System_Logging_File_PathPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/path"
//	Path from root:       "/system/logging/files/file/config/path"
func (n *System_Logging_File_PathPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_RotatePath represents the /openconfig-system/system/logging/files/file/state/rotate YANG schema element.
type System_Logging_File_RotatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_RotatePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/rotate YANG schema element.
type System_Logging_File_RotatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rotate"
//	Path from root:       "/system/logging/files/file/state/rotate"
func (n *System_Logging_File_RotatePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rotate"
//	Path from root:       "/system/logging/files/file/state/rotate"
func (n *System_Logging_File_RotatePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rotate"
//	Path from root:       "/system/logging/files/file/config/rotate"
func (n *System_Logging_File_RotatePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rotate"
//	Path from root:       "/system/logging/files/file/config/rotate"
func (n *System_Logging_File_RotatePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_FilePath represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePath struct {
	*ygnmi.NodePath
}

// System_Logging_FilePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathAny struct {
	*ygnmi.NodePath
}

// System_Logging_FilePathMap represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathMap struct {
	*ygnmi.NodePath
}

// System_Logging_FilePathMapAny represents the wildcard version of the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathMapAny struct {
	*ygnmi.NodePath
}

// FilenamePrefix (leaf): A name used for the file.  It is expected that an
// implementation may append timestamp, serial-number or
// other identifier to the filename.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/filename-prefix"
//	Path from root:       "/system/logging/files/file/*/filename-prefix"
func (n *System_Logging_FilePath) FilenamePrefix() *System_Logging_File_FilenamePrefixPath {
	ps := &System_Logging_File_FilenamePrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filename-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FilenamePrefix (leaf): A name used for the file.  It is expected that an
// implementation may append timestamp, serial-number or
// other identifier to the filename.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/filename-prefix"
//	Path from root:       "/system/logging/files/file/*/filename-prefix"
func (n *System_Logging_FilePathAny) FilenamePrefix() *System_Logging_File_FilenamePrefixPathAny {
	ps := &System_Logging_File_FilenamePrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filename-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxOpenTime (leaf): Used for logfile rotation.
// Maximum time, in minutes, the logfile can be open. When expires,
// it triggers log rotation.
// Actions are same ans when log file reaches its max-size.
// it need to be closed, save, and new file open or future log
// storage. If needed oldest logfile of same prefix shall be
// deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-open-time"
//	Path from root:       "/system/logging/files/file/*/max-open-time"
func (n *System_Logging_FilePath) MaxOpenTime() *System_Logging_File_MaxOpenTimePath {
	ps := &System_Logging_File_MaxOpenTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-open-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxOpenTime (leaf): Used for logfile rotation.
// Maximum time, in minutes, the logfile can be open. When expires,
// it triggers log rotation.
// Actions are same ans when log file reaches its max-size.
// it need to be closed, save, and new file open or future log
// storage. If needed oldest logfile of same prefix shall be
// deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-open-time"
//	Path from root:       "/system/logging/files/file/*/max-open-time"
func (n *System_Logging_FilePathAny) MaxOpenTime() *System_Logging_File_MaxOpenTimePathAny {
	ps := &System_Logging_File_MaxOpenTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-open-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxSize (leaf): Used for logfile rotation.
// Maximum size in Bytes, logfile may grow to. When logfile
// reach this size it triggers log rotation. The log file need to
// be save, closed, and new file open or future log storage.
// If needed oldest logfile of same prefix shall be deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-size"
//	Path from root:       "/system/logging/files/file/*/max-size"
func (n *System_Logging_FilePath) MaxSize() *System_Logging_File_MaxSizePath {
	ps := &System_Logging_File_MaxSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxSize (leaf): Used for logfile rotation.
// Maximum size in Bytes, logfile may grow to. When logfile
// reach this size it triggers log rotation. The log file need to
// be save, closed, and new file open or future log storage.
// If needed oldest logfile of same prefix shall be deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-size"
//	Path from root:       "/system/logging/files/file/*/max-size"
func (n *System_Logging_FilePathAny) MaxSize() *System_Logging_File_MaxSizePathAny {
	ps := &System_Logging_File_MaxSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OpenLogfile (leaf): the currently active/open filename prepended by folder path
// and including suffix appended to filename-prefix by system
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_FilePath) OpenLogfile() *System_Logging_File_OpenLogfilePath {
	ps := &System_Logging_File_OpenLogfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OpenLogfile (leaf): the currently active/open filename prepended by folder path
// and including suffix appended to filename-prefix by system
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_FilePathAny) OpenLogfile() *System_Logging_File_OpenLogfilePathAny {
	ps := &System_Logging_File_OpenLogfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Path (leaf): The fully specified path of the folder where the
// logfile is stored.  The path is implementation specific
// and may include attributes such as a drive identifier.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/path"
//	Path from root:       "/system/logging/files/file/*/path"
func (n *System_Logging_FilePath) Path() *System_Logging_File_PathPath {
	ps := &System_Logging_File_PathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Path (leaf): The fully specified path of the folder where the
// logfile is stored.  The path is implementation specific
// and may include attributes such as a drive identifier.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/path"
//	Path from root:       "/system/logging/files/file/*/path"
func (n *System_Logging_FilePathAny) Path() *System_Logging_File_PathPathAny {
	ps := &System_Logging_File_PathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rotate (leaf): Used for logfile rotation.
// Log files are rotated the number of times defined by
// this leaf.
// The default value of 1 indicates that there will be one
// rotation file and one active file.  A 0 value indicates
// old versions are removed rather than rotated.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rotate"
//	Path from root:       "/system/logging/files/file/*/rotate"
func (n *System_Logging_FilePath) Rotate() *System_Logging_File_RotatePath {
	ps := &System_Logging_File_RotatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rotate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rotate (leaf): Used for logfile rotation.
// Log files are rotated the number of times defined by
// this leaf.
// The default value of 1 indicates that there will be one
// rotation file and one active file.  A 0 value indicates
// old versions are removed rather than rotated.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rotate"
//	Path from root:       "/system/logging/files/file/*/rotate"
func (n *System_Logging_FilePathAny) Rotate() *System_Logging_File_RotatePathAny {
	ps := &System_Logging_File_RotatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rotate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePath) SelectorAny() *System_Logging_File_SelectorPathAny {
	ps := &System_Logging_File_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePathAny) SelectorAny() *System_Logging_File_SelectorPathAny {
	ps := &System_Logging_File_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_File_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_File_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_File_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_File_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_File_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPath {
	ps := &System_Logging_File_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPathAny {
	ps := &System_Logging_File_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePath) SelectorMap() *System_Logging_File_SelectorPathMap {
	ps := &System_Logging_File_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePathAny) SelectorMap() *System_Logging_File_SelectorPathMapAny {
	ps := &System_Logging_File_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePath) State() ygnmi.SingletonQuery[*oc.System_Logging_File] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_File](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePath) Config() ygnmi.ConfigQuery[*oc.System_Logging_File] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_File](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// System_Logging_File_Selector_FacilityPath represents the /openconfig-system/system/logging/files/file/selectors/selector/state/facility YANG schema element.
type System_Logging_File_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector/state/facility YANG schema element.
type System_Logging_File_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/facility"
func (n *System_Logging_File_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/facility"
func (n *System_Logging_File_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/facility"
func (n *System_Logging_File_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/facility"
func (n *System_Logging_File_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_Selector_SeverityPath represents the /openconfig-system/system/logging/files/file/selectors/selector/state/severity YANG schema element.
type System_Logging_File_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector/state/severity YANG schema element.
type System_Logging_File_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/severity"
func (n *System_Logging_File_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/severity"
func (n *System_Logging_File_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/severity"
func (n *System_Logging_File_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/severity"
func (n *System_Logging_File_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_SelectorPath represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_File_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_File_SelectorPathMap represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_File_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/facility"
func (n *System_Logging_File_SelectorPath) Facility() *System_Logging_File_Selector_FacilityPath {
	ps := &System_Logging_File_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/facility"
func (n *System_Logging_File_SelectorPathAny) Facility() *System_Logging_File_Selector_FacilityPathAny {
	ps := &System_Logging_File_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/severity"
func (n *System_Logging_File_SelectorPath) Severity() *System_Logging_File_Selector_SeverityPath {
	ps := &System_Logging_File_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/severity"
func (n *System_Logging_File_SelectorPathAny) Severity() *System_Logging_File_Selector_SeverityPathAny {
	ps := &System_Logging_File_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_Logging_RemoteServer_HostPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_HostPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServer_HostPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServer_HostPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServer_HostPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServer_HostPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_NetworkInstancePath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/network-instance YANG schema element.
type System_Logging_RemoteServer_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/network-instance YANG schema element.
type System_Logging_RemoteServer_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_RemotePortPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_RemotePortPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_SourceAddressPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
