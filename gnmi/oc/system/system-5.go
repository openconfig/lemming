/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_Logging_Console_Selector_FacilityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Console_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/facility YANG schema element.
type System_Logging_Console_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/console/selectors/selector/state/facility"
func (n *System_Logging_Console_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/console/selectors/selector/config/facility"
func (n *System_Logging_Console_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Console_Selector_SeverityPath represents the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Console_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector/state/severity YANG schema element.
type System_Logging_Console_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/console/selectors/selector/state/severity"
func (n *System_Logging_Console_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/console/selectors/selector/config/severity"
func (n *System_Logging_Console_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Console_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Console_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Console_SelectorPath represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_Console_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_Console_SelectorPathMap represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_Console_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/console/selectors/selector/*/facility"
func (n *System_Logging_Console_SelectorPath) Facility() *System_Logging_Console_Selector_FacilityPath {
	ps := &System_Logging_Console_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/console/selectors/selector/*/facility"
func (n *System_Logging_Console_SelectorPathAny) Facility() *System_Logging_Console_Selector_FacilityPathAny {
	ps := &System_Logging_Console_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/console/selectors/selector/*/severity"
func (n *System_Logging_Console_SelectorPath) Severity() *System_Logging_Console_Selector_SeverityPath {
	ps := &System_Logging_Console_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/console/selectors/selector/*/severity"
func (n *System_Logging_Console_SelectorPathAny) Severity() *System_Logging_Console_Selector_SeverityPathAny {
	ps := &System_Logging_Console_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Console_Selector](
		"System_Logging_Console_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Console_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector](
		"System_Logging_Console",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Console_Selector_Key]*oc.System_Logging_Console_Selector, bool) {
			ret := gs.(*oc.System_Logging_Console).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Console) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_Logging_File_FilenamePrefixPath represents the /openconfig-system/system/logging/files/file/state/filename-prefix YANG schema element.
type System_Logging_File_FilenamePrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_FilenamePrefixPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/filename-prefix YANG schema element.
type System_Logging_File_FilenamePrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/filename-prefix"
//	Path from root:       "/system/logging/files/file/state/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/filename-prefix"
//	Path from root:       "/system/logging/files/file/state/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/filename-prefix"
//	Path from root:       "/system/logging/files/file/config/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/filename-prefix"
//	Path from root:       "/system/logging/files/file/config/filename-prefix"
func (n *System_Logging_File_FilenamePrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "filename-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).FilenamePrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_MaxOpenTimePath represents the /openconfig-system/system/logging/files/file/state/max-open-time YANG schema element.
type System_Logging_File_MaxOpenTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_MaxOpenTimePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/max-open-time YANG schema element.
type System_Logging_File_MaxOpenTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-open-time"
//	Path from root:       "/system/logging/files/file/state/max-open-time"
func (n *System_Logging_File_MaxOpenTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-open-time"
//	Path from root:       "/system/logging/files/file/state/max-open-time"
func (n *System_Logging_File_MaxOpenTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-open-time"
//	Path from root:       "/system/logging/files/file/config/max-open-time"
func (n *System_Logging_File_MaxOpenTimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-open-time"
//	Path from root:       "/system/logging/files/file/config/max-open-time"
func (n *System_Logging_File_MaxOpenTimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-open-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxOpenTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_MaxSizePath represents the /openconfig-system/system/logging/files/file/state/max-size YANG schema element.
type System_Logging_File_MaxSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_MaxSizePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/max-size YANG schema element.
type System_Logging_File_MaxSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-size"
//	Path from root:       "/system/logging/files/file/state/max-size"
func (n *System_Logging_File_MaxSizePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/max-size"
//	Path from root:       "/system/logging/files/file/state/max-size"
func (n *System_Logging_File_MaxSizePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-size"
//	Path from root:       "/system/logging/files/file/config/max-size"
func (n *System_Logging_File_MaxSizePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/max-size"
//	Path from root:       "/system/logging/files/file/config/max-size"
func (n *System_Logging_File_MaxSizePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).MaxSize
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_OpenLogfilePath represents the /openconfig-system/system/logging/files/file/state/open-logfile YANG schema element.
type System_Logging_File_OpenLogfilePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_OpenLogfilePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/open-logfile YANG schema element.
type System_Logging_File_OpenLogfilePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_File_OpenLogfilePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).OpenLogfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_File_OpenLogfilePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).OpenLogfile
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_PathPath represents the /openconfig-system/system/logging/files/file/state/path YANG schema element.
type System_Logging_File_PathPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_PathPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/path YANG schema element.
type System_Logging_File_PathPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/path"
//	Path from root:       "/system/logging/files/file/state/path"
func (n *System_Logging_File_PathPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/path"
//	Path from root:       "/system/logging/files/file/state/path"
func (n *System_Logging_File_PathPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/path"
//	Path from root:       "/system/logging/files/file/config/path"
func (n *System_Logging_File_PathPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/path"
//	Path from root:       "/system/logging/files/file/config/path"
func (n *System_Logging_File_PathPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_File).Path
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_RotatePath represents the /openconfig-system/system/logging/files/file/state/rotate YANG schema element.
type System_Logging_File_RotatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_RotatePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/state/rotate YANG schema element.
type System_Logging_File_RotatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rotate"
//	Path from root:       "/system/logging/files/file/state/rotate"
func (n *System_Logging_File_RotatePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/rotate"
//	Path from root:       "/system/logging/files/file/state/rotate"
func (n *System_Logging_File_RotatePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rotate"
//	Path from root:       "/system/logging/files/file/config/rotate"
func (n *System_Logging_File_RotatePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/rotate"
//	Path from root:       "/system/logging/files/file/config/rotate"
func (n *System_Logging_File_RotatePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"System_Logging_File",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "rotate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.System_Logging_File).Rotate
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_FilePath represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePath struct {
	*ygnmi.NodePath
}

// System_Logging_FilePathAny represents the wildcard version of the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathAny struct {
	*ygnmi.NodePath
}

// System_Logging_FilePathMap represents the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathMap struct {
	*ygnmi.NodePath
}

// System_Logging_FilePathMapAny represents the wildcard version of the /openconfig-system/system/logging/files/file YANG schema element.
type System_Logging_FilePathMapAny struct {
	*ygnmi.NodePath
}

// FilenamePrefix (leaf): A name used for the file.  It is expected that an
// implementation may append timestamp, serial-number or
// other identifier to the filename.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/filename-prefix"
//	Path from root:       "/system/logging/files/file/*/filename-prefix"
func (n *System_Logging_FilePath) FilenamePrefix() *System_Logging_File_FilenamePrefixPath {
	ps := &System_Logging_File_FilenamePrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filename-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FilenamePrefix (leaf): A name used for the file.  It is expected that an
// implementation may append timestamp, serial-number or
// other identifier to the filename.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/filename-prefix"
//	Path from root:       "/system/logging/files/file/*/filename-prefix"
func (n *System_Logging_FilePathAny) FilenamePrefix() *System_Logging_File_FilenamePrefixPathAny {
	ps := &System_Logging_File_FilenamePrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filename-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxOpenTime (leaf): Used for logfile rotation.
// Maximum time, in minutes, the logfile can be open. When expires,
// it triggers log rotation.
// Actions are same ans when log file reaches its max-size.
// it need to be closed, save, and new file open or future log
// storage. If needed oldest logfile of same prefix shall be
// deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-open-time"
//	Path from root:       "/system/logging/files/file/*/max-open-time"
func (n *System_Logging_FilePath) MaxOpenTime() *System_Logging_File_MaxOpenTimePath {
	ps := &System_Logging_File_MaxOpenTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-open-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxOpenTime (leaf): Used for logfile rotation.
// Maximum time, in minutes, the logfile can be open. When expires,
// it triggers log rotation.
// Actions are same ans when log file reaches its max-size.
// it need to be closed, save, and new file open or future log
// storage. If needed oldest logfile of same prefix shall be
// deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-open-time"
//	Path from root:       "/system/logging/files/file/*/max-open-time"
func (n *System_Logging_FilePathAny) MaxOpenTime() *System_Logging_File_MaxOpenTimePathAny {
	ps := &System_Logging_File_MaxOpenTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-open-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxSize (leaf): Used for logfile rotation.
// Maximum size in Bytes, logfile may grow to. When logfile
// reach this size it triggers log rotation. The log file need to
// be save, closed, and new file open or future log storage.
// If needed oldest logfile of same prefix shall be deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-size"
//	Path from root:       "/system/logging/files/file/*/max-size"
func (n *System_Logging_FilePath) MaxSize() *System_Logging_File_MaxSizePath {
	ps := &System_Logging_File_MaxSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxSize (leaf): Used for logfile rotation.
// Maximum size in Bytes, logfile may grow to. When logfile
// reach this size it triggers log rotation. The log file need to
// be save, closed, and new file open or future log storage.
// If needed oldest logfile of same prefix shall be deleted to
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/max-size"
//	Path from root:       "/system/logging/files/file/*/max-size"
func (n *System_Logging_FilePathAny) MaxSize() *System_Logging_File_MaxSizePathAny {
	ps := &System_Logging_File_MaxSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OpenLogfile (leaf): the currently active/open filename prepended by folder path
// and including suffix appended to filename-prefix by system
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_FilePath) OpenLogfile() *System_Logging_File_OpenLogfilePath {
	ps := &System_Logging_File_OpenLogfilePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OpenLogfile (leaf): the currently active/open filename prepended by folder path
// and including suffix appended to filename-prefix by system
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/open-logfile"
//	Path from root:       "/system/logging/files/file/state/open-logfile"
func (n *System_Logging_FilePathAny) OpenLogfile() *System_Logging_File_OpenLogfilePathAny {
	ps := &System_Logging_File_OpenLogfilePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "open-logfile"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Path (leaf): The fully specified path of the folder where the
// logfile is stored.  The path is implementation specific
// and may include attributes such as a drive identifier.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/path"
//	Path from root:       "/system/logging/files/file/*/path"
func (n *System_Logging_FilePath) Path() *System_Logging_File_PathPath {
	ps := &System_Logging_File_PathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Path (leaf): The fully specified path of the folder where the
// logfile is stored.  The path is implementation specific
// and may include attributes such as a drive identifier.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/path"
//	Path from root:       "/system/logging/files/file/*/path"
func (n *System_Logging_FilePathAny) Path() *System_Logging_File_PathPathAny {
	ps := &System_Logging_File_PathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rotate (leaf): Used for logfile rotation.
// Log files are rotated the number of times defined by
// this leaf.
// The default value of 1 indicates that there will be one
// rotation file and one active file.  A 0 value indicates
// old versions are removed rather than rotated.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rotate"
//	Path from root:       "/system/logging/files/file/*/rotate"
func (n *System_Logging_FilePath) Rotate() *System_Logging_File_RotatePath {
	ps := &System_Logging_File_RotatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rotate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rotate (leaf): Used for logfile rotation.
// Log files are rotated the number of times defined by
// this leaf.
// The default value of 1 indicates that there will be one
// rotation file and one active file.  A 0 value indicates
// old versions are removed rather than rotated.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/rotate"
//	Path from root:       "/system/logging/files/file/*/rotate"
func (n *System_Logging_FilePathAny) Rotate() *System_Logging_File_RotatePathAny {
	ps := &System_Logging_File_RotatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "rotate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePath) SelectorAny() *System_Logging_File_SelectorPathAny {
	ps := &System_Logging_File_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePathAny) SelectorAny() *System_Logging_File_SelectorPathAny {
	ps := &System_Logging_File_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_File_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_File_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_File_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_File_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_File_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPath {
	ps := &System_Logging_File_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_FilePathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_File_SelectorPathAny {
	ps := &System_Logging_File_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePath) SelectorMap() *System_Logging_File_SelectorPathMap {
	ps := &System_Logging_File_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/files/file/selectors/selector"
func (n *System_Logging_FilePathAny) SelectorMap() *System_Logging_File_SelectorPathMapAny {
	ps := &System_Logging_File_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePath) State() ygnmi.SingletonQuery[*oc.System_Logging_File] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_File](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePath) Config() ygnmi.ConfigQuery[*oc.System_Logging_File] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_File](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_FilePathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Key]*oc.System_Logging_File](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Key]*oc.System_Logging_File, bool) {
			ret := gs.(*oc.System_Logging).File
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:files"},
			PostRelPath: []string{"openconfig-system:file"},
		},
	)
}

// System_Logging_File_Selector_FacilityPath represents the /openconfig-system/system/logging/files/file/selectors/selector/state/facility YANG schema element.
type System_Logging_File_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector/state/facility YANG schema element.
type System_Logging_File_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/facility"
func (n *System_Logging_File_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/facility"
func (n *System_Logging_File_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/facility"
func (n *System_Logging_File_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/facility"
func (n *System_Logging_File_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_Selector_SeverityPath represents the /openconfig-system/system/logging/files/file/selectors/selector/state/severity YANG schema element.
type System_Logging_File_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_File_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector/state/severity YANG schema element.
type System_Logging_File_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/severity"
func (n *System_Logging_File_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/state/severity"
func (n *System_Logging_File_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/severity"
func (n *System_Logging_File_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/config/severity"
func (n *System_Logging_File_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_File_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_File_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_File_SelectorPath represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_File_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_File_SelectorPathMap represents the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_File_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/files/file/selectors/selector YANG schema element.
type System_Logging_File_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/facility"
func (n *System_Logging_File_SelectorPath) Facility() *System_Logging_File_Selector_FacilityPath {
	ps := &System_Logging_File_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/facility"
func (n *System_Logging_File_SelectorPathAny) Facility() *System_Logging_File_Selector_FacilityPathAny {
	ps := &System_Logging_File_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/severity"
func (n *System_Logging_File_SelectorPath) Severity() *System_Logging_File_Selector_SeverityPath {
	ps := &System_Logging_File_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/files/file/selectors/selector/*/severity"
func (n *System_Logging_File_SelectorPathAny) Severity() *System_Logging_File_Selector_SeverityPathAny {
	ps := &System_Logging_File_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_File_Selector](
		"System_Logging_File_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_File_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector](
		"System_Logging_File",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_File_Selector_Key]*oc.System_Logging_File_Selector, bool) {
			ret := gs.(*oc.System_Logging_File).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_File) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_Logging_RemoteServer_HostPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_HostPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/host YANG schema element.
type System_Logging_RemoteServer_HostPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServer_HostPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/host"
func (n *System_Logging_RemoteServer_HostPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServer_HostPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/host"
func (n *System_Logging_RemoteServer_HostPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Host
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_NetworkInstancePath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/network-instance YANG schema element.
type System_Logging_RemoteServer_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_NetworkInstancePathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/network-instance YANG schema element.
type System_Logging_RemoteServer_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/network-instance"
func (n *System_Logging_RemoteServer_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_RemotePortPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_RemotePortPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/remote-port YANG schema element.
type System_Logging_RemoteServer_RemotePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/remote-port"
func (n *System_Logging_RemoteServer_RemotePortPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).RemotePort
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_SourceAddressPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_SourceAddressPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/source-address YANG schema element.
type System_Logging_RemoteServer_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/source-address"
func (n *System_Logging_RemoteServer_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_TlsProfileIdPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/tls-profile-id YANG schema element.
type System_Logging_RemoteServer_TlsProfileIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_TlsProfileIdPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/tls-profile-id YANG schema element.
type System_Logging_RemoteServer_TlsProfileIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/tls-profile-id"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/tls-profile-id"
func (n *System_Logging_RemoteServer_TlsProfileIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tls-profile-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).TlsProfileId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/tls-profile-id"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/tls-profile-id"
func (n *System_Logging_RemoteServer_TlsProfileIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tls-profile-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).TlsProfileId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/tls-profile-id"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/tls-profile-id"
func (n *System_Logging_RemoteServer_TlsProfileIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tls-profile-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).TlsProfileId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/tls-profile-id"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/tls-profile-id"
func (n *System_Logging_RemoteServer_TlsProfileIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tls-profile-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).TlsProfileId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_TransportSecurityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/state/transport-security YANG schema element.
type System_Logging_RemoteServer_TransportSecurityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_TransportSecurityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/state/transport-security YANG schema element.
type System_Logging_RemoteServer_TransportSecurityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/transport-security"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/transport-security"
func (n *System_Logging_RemoteServer_TransportSecurityPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/transport-security"
//	Path from root:       "/system/logging/remote-servers/remote-server/state/transport-security"
func (n *System_Logging_RemoteServer_TransportSecurityPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Logging_RemoteServer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/transport-security"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/transport-security"
func (n *System_Logging_RemoteServer_TransportSecurityPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/transport-security"
//	Path from root:       "/system/logging/remote-servers/remote-server/config/transport-security"
func (n *System_Logging_RemoteServer_TransportSecurityPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"System_Logging_RemoteServer",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "transport-security"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).TransportSecurity
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServerPath represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPath struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServerPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServerPathMap represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServerPathMapAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServerPathMapAny struct {
	*ygnmi.NodePath
}

// Host (leaf): IP address or hostname of the remote log server
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/host"
func (n *System_Logging_RemoteServerPath) Host() *System_Logging_RemoteServer_HostPath {
	ps := &System_Logging_RemoteServer_HostPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Host (leaf): IP address or hostname of the remote log server
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/host"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/host"
func (n *System_Logging_RemoteServerPathAny) Host() *System_Logging_RemoteServer_HostPathAny {
	ps := &System_Logging_RemoteServer_HostPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance used to reach the log server.  If no
// instance is specified, DEFAULT_INSTANCE is used.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/network-instance"
func (n *System_Logging_RemoteServerPath) NetworkInstance() *System_Logging_RemoteServer_NetworkInstancePath {
	ps := &System_Logging_RemoteServer_NetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): The network instance used to reach the log server.  If no
// instance is specified, DEFAULT_INSTANCE is used.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/network-instance"
func (n *System_Logging_RemoteServerPathAny) NetworkInstance() *System_Logging_RemoteServer_NetworkInstancePathAny {
	ps := &System_Logging_RemoteServer_NetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/remote-port"
func (n *System_Logging_RemoteServerPath) RemotePort() *System_Logging_RemoteServer_RemotePortPath {
	ps := &System_Logging_RemoteServer_RemotePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemotePort (leaf): Sets the destination port number for syslog UDP messages to
// the server.  The default for syslog is 514.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/remote-port"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/remote-port"
func (n *System_Logging_RemoteServerPathAny) RemotePort() *System_Logging_RemoteServer_RemotePortPathAny {
	ps := &System_Logging_RemoteServer_RemotePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
func (n *System_Logging_RemoteServerPath) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	ps := &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
func (n *System_Logging_RemoteServerPathAny) SelectorAny() *System_Logging_RemoteServer_SelectorPathAny {
	ps := &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_RemoteServer_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_RemoteServer_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_RemoteServer_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_RemoteServer_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServer_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPath {
	ps := &System_Logging_RemoteServer_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_RemoteServerPathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_SelectorPathAny {
	ps := &System_Logging_RemoteServer_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
func (n *System_Logging_RemoteServerPath) SelectorMap() *System_Logging_RemoteServer_SelectorPathMap {
	ps := &System_Logging_RemoteServer_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector"
func (n *System_Logging_RemoteServerPathAny) SelectorMap() *System_Logging_RemoteServer_SelectorPathMapAny {
	ps := &System_Logging_RemoteServer_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SourceAddress (leaf): Source IP address for packets to the log server
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/source-address"
func (n *System_Logging_RemoteServerPath) SourceAddress() *System_Logging_RemoteServer_SourceAddressPath {
	ps := &System_Logging_RemoteServer_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IP address for packets to the log server
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/source-address"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/source-address"
func (n *System_Logging_RemoteServerPathAny) SourceAddress() *System_Logging_RemoteServer_SourceAddressPathAny {
	ps := &System_Logging_RemoteServer_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlsProfileId (leaf): The ID of this syslog client's TLS profile.  TLS profiles are managed
// using the gNSI Certz service or other certificate management service
// provided by the system.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/tls-profile-id"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/tls-profile-id"
func (n *System_Logging_RemoteServerPath) TlsProfileId() *System_Logging_RemoteServer_TlsProfileIdPath {
	ps := &System_Logging_RemoteServer_TlsProfileIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tls-profile-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TlsProfileId (leaf): The ID of this syslog client's TLS profile.  TLS profiles are managed
// using the gNSI Certz service or other certificate management service
// provided by the system.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/tls-profile-id"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/tls-profile-id"
func (n *System_Logging_RemoteServerPathAny) TlsProfileId() *System_Logging_RemoteServer_TlsProfileIdPathAny {
	ps := &System_Logging_RemoteServer_TlsProfileIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tls-profile-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransportSecurity (leaf): Indicates if syslog transport layer security (TLS) is enabled.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/transport-security"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/transport-security"
func (n *System_Logging_RemoteServerPath) TransportSecurity() *System_Logging_RemoteServer_TransportSecurityPath {
	ps := &System_Logging_RemoteServer_TransportSecurityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transport-security"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransportSecurity (leaf): Indicates if syslog transport layer security (TLS) is enabled.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/transport-security"
//	Path from root:       "/system/logging/remote-servers/remote-server/*/transport-security"
func (n *System_Logging_RemoteServerPathAny) TransportSecurity() *System_Logging_RemoteServer_TransportSecurityPathAny {
	ps := &System_Logging_RemoteServer_TransportSecurityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "transport-security"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPath) State() ygnmi.SingletonQuery[*oc.System_Logging_RemoteServer] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_RemoteServer](
		"System_Logging_RemoteServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_RemoteServer] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_RemoteServer](
		"System_Logging_RemoteServer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_RemoteServer] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_RemoteServer](
		"System_Logging_RemoteServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_RemoteServer] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_RemoteServer](
		"System_Logging_RemoteServer",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Logging_RemoteServer] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Logging_RemoteServer](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Logging_RemoteServer, bool) {
			ret := gs.(*oc.System_Logging).RemoteServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:remote-servers"},
			PostRelPath: []string{"openconfig-system:remote-server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Logging_RemoteServer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Logging_RemoteServer](
		"System_Logging",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Logging_RemoteServer, bool) {
			ret := gs.(*oc.System_Logging).RemoteServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:remote-servers"},
			PostRelPath: []string{"openconfig-system:remote-server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Logging_RemoteServer] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Logging_RemoteServer](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Logging_RemoteServer, bool) {
			ret := gs.(*oc.System_Logging).RemoteServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:remote-servers"},
			PostRelPath: []string{"openconfig-system:remote-server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServerPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Logging_RemoteServer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Logging_RemoteServer](
		"System_Logging",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Logging_RemoteServer, bool) {
			ret := gs.(*oc.System_Logging).RemoteServer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:remote-servers"},
			PostRelPath: []string{"openconfig-system:remote-server"},
		},
	)
}

// System_Logging_RemoteServer_Selector_FacilityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/facility YANG schema element.
type System_Logging_RemoteServer_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/state/facility"
func (n *System_Logging_RemoteServer_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/state/facility"
func (n *System_Logging_RemoteServer_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/config/facility"
func (n *System_Logging_RemoteServer_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_Selector_SeverityPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_RemoteServer_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state/severity YANG schema element.
type System_Logging_RemoteServer_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/state/severity"
func (n *System_Logging_RemoteServer_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/state/severity"
func (n *System_Logging_RemoteServer_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/config/severity"
func (n *System_Logging_RemoteServer_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_RemoteServer_SelectorPath represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServer_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServer_SelectorPathMap represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_RemoteServer_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/*/facility"
func (n *System_Logging_RemoteServer_SelectorPath) Facility() *System_Logging_RemoteServer_Selector_FacilityPath {
	ps := &System_Logging_RemoteServer_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/*/facility"
func (n *System_Logging_RemoteServer_SelectorPathAny) Facility() *System_Logging_RemoteServer_Selector_FacilityPathAny {
	ps := &System_Logging_RemoteServer_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/*/severity"
func (n *System_Logging_RemoteServer_SelectorPath) Severity() *System_Logging_RemoteServer_Selector_SeverityPath {
	ps := &System_Logging_RemoteServer_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/remote-servers/remote-server/selectors/selector/*/severity"
func (n *System_Logging_RemoteServer_SelectorPathAny) Severity() *System_Logging_RemoteServer_Selector_SeverityPathAny {
	ps := &System_Logging_RemoteServer_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_RemoteServer_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector](
		"System_Logging_RemoteServer",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_RemoteServer_Selector_Key]*oc.System_Logging_RemoteServer_Selector, bool) {
			ret := gs.(*oc.System_Logging_RemoteServer).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_RemoteServer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_Logging_VtyPath represents the /openconfig-system/system/logging/vty YANG schema element.
type System_Logging_VtyPath struct {
	*ygnmi.NodePath
}

// System_Logging_VtyPathAny represents the wildcard version of the /openconfig-system/system/logging/vty YANG schema element.
type System_Logging_VtyPathAny struct {
	*ygnmi.NodePath
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
func (n *System_Logging_VtyPath) SelectorAny() *System_Logging_Vty_SelectorPathAny {
	ps := &System_Logging_Vty_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// SelectorAny (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
func (n *System_Logging_VtyPathAny) SelectorAny() *System_Logging_Vty_SelectorPathAny {
	ps := &System_Logging_Vty_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": "*", "severity": "*"},
			n,
		),
	}
	return ps
}

// WithFacility sets System_Logging_Vty_SelectorPathAny's key "facility" to the specified value.
// Facility: oc.E_SystemLogging_SYSLOG_FACILITY
func (n *System_Logging_Vty_SelectorPathAny) WithFacility(Facility oc.E_SystemLogging_SYSLOG_FACILITY) *System_Logging_Vty_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "facility", Facility)
	return n
}

// WithSeverity sets System_Logging_Vty_SelectorPathAny's key "severity" to the specified value.
// Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_Vty_SelectorPathAny) WithSeverity(Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPathAny {
	ygnmi.ModifyKey(n.NodePath, "severity", Severity)
	return n
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPath) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPath {
	ps := &System_Logging_Vty_SelectorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// Selector (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
//
//	Facility: oc.E_SystemLogging_SYSLOG_FACILITY
//	Severity: oc.E_SystemLogging_SyslogSeverity
func (n *System_Logging_VtyPathAny) Selector(Facility oc.E_SystemLogging_SYSLOG_FACILITY, Severity oc.E_SystemLogging_SyslogSeverity) *System_Logging_Vty_SelectorPathAny {
	ps := &System_Logging_Vty_SelectorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors", "selector"},
			map[string]interface{}{"facility": Facility, "severity": Severity},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
func (n *System_Logging_VtyPath) SelectorMap() *System_Logging_Vty_SelectorPathMap {
	ps := &System_Logging_Vty_SelectorPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SelectorMap (list): List of selectors for log messages
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "selectors/selector"
//	Path from root:       "/system/logging/vty/selectors/selector"
func (n *System_Logging_VtyPathAny) SelectorMap() *System_Logging_Vty_SelectorPathMapAny {
	ps := &System_Logging_Vty_SelectorPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"selectors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_VtyPath) State() ygnmi.SingletonQuery[*oc.System_Logging_Vty] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Vty](
		"System_Logging_Vty",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_VtyPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Vty] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Vty](
		"System_Logging_Vty",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_VtyPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Vty] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Vty](
		"System_Logging_Vty",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_VtyPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Vty] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Vty](
		"System_Logging_Vty",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Vty_Selector_FacilityPath represents the /openconfig-system/system/logging/vty/selectors/selector/state/facility YANG schema element.
type System_Logging_Vty_Selector_FacilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Vty_Selector_FacilityPathAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector/state/facility YANG schema element.
type System_Logging_Vty_Selector_FacilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/state/facility"
func (n *System_Logging_Vty_Selector_FacilityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Vty_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/state/facility"
func (n *System_Logging_Vty_Selector_FacilityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Vty_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/config/facility"
func (n *System_Logging_Vty_Selector_FacilityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Vty_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/config/facility"
func (n *System_Logging_Vty_Selector_FacilityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SYSLOG_FACILITY](
		"System_Logging_Vty_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "facility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SYSLOG_FACILITY, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Facility
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Vty_Selector_SeverityPath represents the /openconfig-system/system/logging/vty/selectors/selector/state/severity YANG schema element.
type System_Logging_Vty_Selector_SeverityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Logging_Vty_Selector_SeverityPathAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector/state/severity YANG schema element.
type System_Logging_Vty_Selector_SeverityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/state/severity"
func (n *System_Logging_Vty_Selector_SeverityPath) State() ygnmi.SingletonQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewSingletonQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Vty_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/state/severity"
func (n *System_Logging_Vty_Selector_SeverityPathAny) State() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Vty_Selector",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/config/severity"
func (n *System_Logging_Vty_Selector_SeverityPath) Config() ygnmi.ConfigQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewConfigQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Vty_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/config/severity"
func (n *System_Logging_Vty_Selector_SeverityPathAny) Config() ygnmi.WildcardQuery[oc.E_SystemLogging_SyslogSeverity] {
	return ygnmi.NewWildcardQuery[oc.E_SystemLogging_SyslogSeverity](
		"System_Logging_Vty_Selector",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "severity"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_SystemLogging_SyslogSeverity, bool) {
			ret := gs.(*oc.System_Logging_Vty_Selector).Severity
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty_Selector) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Logging_Vty_SelectorPath represents the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPath struct {
	*ygnmi.NodePath
}

// System_Logging_Vty_SelectorPathAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPathAny struct {
	*ygnmi.NodePath
}

// System_Logging_Vty_SelectorPathMap represents the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPathMap struct {
	*ygnmi.NodePath
}

// System_Logging_Vty_SelectorPathMapAny represents the wildcard version of the /openconfig-system/system/logging/vty/selectors/selector YANG schema element.
type System_Logging_Vty_SelectorPathMapAny struct {
	*ygnmi.NodePath
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/*/facility"
func (n *System_Logging_Vty_SelectorPath) Facility() *System_Logging_Vty_Selector_FacilityPath {
	ps := &System_Logging_Vty_Selector_FacilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Facility (leaf): Specifies the facility, or class of messages to log
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/facility"
//	Path from root:       "/system/logging/vty/selectors/selector/*/facility"
func (n *System_Logging_Vty_SelectorPathAny) Facility() *System_Logging_Vty_Selector_FacilityPathAny {
	ps := &System_Logging_Vty_Selector_FacilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "facility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/*/severity"
func (n *System_Logging_Vty_SelectorPath) Severity() *System_Logging_Vty_Selector_SeverityPath {
	ps := &System_Logging_Vty_Selector_SeverityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Severity (leaf): Specifies that only messages of the given severity (or
// greater severity) for the corresonding facility are logged
//
//	Defining module:      "openconfig-system-logging"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/severity"
//	Path from root:       "/system/logging/vty/selectors/selector/*/severity"
func (n *System_Logging_Vty_SelectorPathAny) Severity() *System_Logging_Vty_Selector_SeverityPathAny {
	ps := &System_Logging_Vty_Selector_SeverityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "severity"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPath) State() ygnmi.SingletonQuery[*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewSingletonQuery[*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathAny) State() ygnmi.WildcardQuery[*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty_Selector",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPath) Config() ygnmi.ConfigQuery[*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewConfigQuery[*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathAny) Config() ygnmi.WildcardQuery[*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewWildcardQuery[*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty_Selector",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathMap) State() ygnmi.SingletonQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewSingletonQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector, bool) {
			ret := gs.(*oc.System_Logging_Vty).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathMapAny) State() ygnmi.WildcardQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector, bool) {
			ret := gs.(*oc.System_Logging_Vty).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathMap) Config() ygnmi.ConfigQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewConfigQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector, bool) {
			ret := gs.(*oc.System_Logging_Vty).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Logging_Vty_SelectorPathMapAny) Config() ygnmi.WildcardQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector] {
	return ygnmi.NewWildcardQuery[map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector](
		"System_Logging_Vty",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.System_Logging_Vty_Selector_Key]*oc.System_Logging_Vty_Selector, bool) {
			ret := gs.(*oc.System_Logging_Vty).Selector
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Logging_Vty) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:selectors"},
			PostRelPath: []string{"openconfig-system:selector"},
		},
	)
}

// System_MacAddress_RoutingMacPath represents the /openconfig-system/system/mac-address/state/routing-mac YANG schema element.
type System_MacAddress_RoutingMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_MacAddress_RoutingMacPathAny represents the wildcard version of the /openconfig-system/system/mac-address/state/routing-mac YANG schema element.
type System_MacAddress_RoutingMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/routing-mac"
//	Path from root:       "/system/mac-address/state/routing-mac"
func (n *System_MacAddress_RoutingMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_MacAddress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "routing-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MacAddress).RoutingMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MacAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/routing-mac"
//	Path from root:       "/system/mac-address/state/routing-mac"
func (n *System_MacAddress_RoutingMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MacAddress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "routing-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MacAddress).RoutingMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MacAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/routing-mac"
//	Path from root:       "/system/mac-address/config/routing-mac"
func (n *System_MacAddress_RoutingMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_MacAddress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "routing-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MacAddress).RoutingMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MacAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/routing-mac"
//	Path from root:       "/system/mac-address/config/routing-mac"
func (n *System_MacAddress_RoutingMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_MacAddress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "routing-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_MacAddress).RoutingMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_MacAddress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_MacAddressPath represents the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddressPath struct {
	*ygnmi.NodePath
}

// System_MacAddressPathAny represents the wildcard version of the /openconfig-system/system/mac-address YANG schema element.
type System_MacAddressPathAny struct {
	*ygnmi.NodePath
}

// RoutingMac (leaf): Any packets destined to this MAC address must be sent through the
// routing pipeline by the system. This MAC address is used to identify
// routed packets in addition to any other MAC addresses that the system
// may already have been using to perform routing.
//
// It is not expected that this MAC address will be used as the
// source MAC address of any routed packet, as the source MAC address of
// any packets generated by the system, or a MAC address used in ARP
// response. This MAC address may not be allocated from the block of
// MAC address that system owns. For instance, it's allocation could
// be managed by an external controller.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/routing-mac"
//	Path from root:       "/system/mac-address/*/routing-mac"
func (n *System_MacAddressPath) RoutingMac() *System_MacAddress_RoutingMacPath {
	ps := &System_MacAddress_RoutingMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "routing-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RoutingMac (leaf): Any packets destined to this MAC address must be sent through the
// routing pipeline by the system. This MAC address is used to identify
// routed packets in addition to any other MAC addresses that the system
// may already have been using to perform routing.
//
// It is not expected that this MAC address will be used as the
// source MAC address of any routed packet, as the source MAC address of
// any packets generated by the system, or a MAC address used in ARP
// response. This MAC address may not be allocated from the block of
// MAC address that system owns. For instance, it's allocation could
// be managed by an external controller.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/routing-mac"
//	Path from root:       "/system/mac-address/*/routing-mac"
func (n *System_MacAddressPathAny) RoutingMac() *System_MacAddress_RoutingMacPathAny {
	ps := &System_MacAddress_RoutingMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "routing-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MacAddressPath) State() ygnmi.SingletonQuery[*oc.System_MacAddress] {
	return ygnmi.NewSingletonQuery[*oc.System_MacAddress](
		"System_MacAddress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_MacAddressPathAny) State() ygnmi.WildcardQuery[*oc.System_MacAddress] {
	return ygnmi.NewWildcardQuery[*oc.System_MacAddress](
		"System_MacAddress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MacAddressPath) Config() ygnmi.ConfigQuery[*oc.System_MacAddress] {
	return ygnmi.NewConfigQuery[*oc.System_MacAddress](
		"System_MacAddress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_MacAddressPathAny) Config() ygnmi.WildcardQuery[*oc.System_MacAddress] {
	return ygnmi.NewWildcardQuery[*oc.System_MacAddress](
		"System_MacAddress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_FreePath represents the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_FreePathAny represents the wildcard version of the /openconfig-system/system/memory/state/free YANG schema element.
type System_Memory_FreePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/free"
//	Path from root:       "/system/memory/state/free"
func (n *System_Memory_FreePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/free"
//	Path from root:       "/system/memory/state/free"
func (n *System_Memory_FreePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "free"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Free
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_PhysicalPath represents the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_PhysicalPathAny represents the wildcard version of the /openconfig-system/system/memory/state/physical YANG schema element.
type System_Memory_PhysicalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/physical"
//	Path from root:       "/system/memory/state/physical"
func (n *System_Memory_PhysicalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Physical
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/physical"
//	Path from root:       "/system/memory/state/physical"
func (n *System_Memory_PhysicalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "physical"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Physical
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Memory_ReservedPath represents the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Memory_ReservedPathAny represents the wildcard version of the /openconfig-system/system/memory/state/reserved YANG schema element.
type System_Memory_ReservedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reserved"
//	Path from root:       "/system/memory/state/reserved"
func (n *System_Memory_ReservedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reserved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Reserved
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/reserved"
//	Path from root:       "/system/memory/state/reserved"
func (n *System_Memory_ReservedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Memory",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reserved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Memory).Reserved
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Memory) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
